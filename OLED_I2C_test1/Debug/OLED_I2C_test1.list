
OLED_I2C_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ecc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d78  08004d78  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d80  08004d80  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d84  08004d84  00014d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000014  08004d9c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08004d9c  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f662  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002337  00000000  00000000  0002f6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  00031a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f4  00000000  00000000  000326d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf43  00000000  00000000  000330cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001127e  00000000  00000000  0004f00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2f64  00000000  00000000  0006028d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d68  00000000  00000000  001131f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00115f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003f70 	.word	0x08003f70

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08003f70 	.word	0x08003f70

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fdf4 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f832 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f906 	bl	8000838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f8b6 	bl	800079c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000630:	f000 f874 	bl	800071c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	SSD1306_Init();
 8000634:	f000 f9d2 	bl	80009dc <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SSD1306_GotoXY (0,0);
 8000638:	2100      	movs	r1, #0
 800063a:	2000      	movs	r0, #0
 800063c:	f000 fb4e 	bl	8000cdc <SSD1306_GotoXY>
	SSD1306_Puts ("I2C Works", &Font_11x18, 1);
 8000640:	490f      	ldr	r1, [pc, #60]	; (8000680 <main+0x64>)
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <main+0x68>)
 8000644:	2201      	movs	r2, #1
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fbe2 	bl	8000e10 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800064c:	f000 fa8a 	bl	8000b64 <SSD1306_UpdateScreen>
	HAL_Delay (1000);
 8000650:	23fa      	movs	r3, #250	; 0xfa
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fe5f 	bl	8001318 <HAL_Delay>

	SSD1306_ScrollRight(0,7);
 800065a:	2107      	movs	r1, #7
 800065c:	2000      	movs	r0, #0
 800065e:	f000 f940 	bl	80008e2 <SSD1306_ScrollRight>
	HAL_Delay(3000);
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <main+0x6c>)
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fe57 	bl	8001318 <HAL_Delay>
	SSD1306_ScrollLeft(0,7);
 800066a:	2107      	movs	r1, #7
 800066c:	2000      	movs	r0, #0
 800066e:	f000 f971 	bl	8000954 <SSD1306_ScrollLeft>
	HAL_Delay(3000);
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <main+0x6c>)
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fe4f 	bl	8001318 <HAL_Delay>
	SSD1306_Stopscroll();
 800067a:	f000 f9a4 	bl	80009c6 <SSD1306_Stopscroll>
	SSD1306_GotoXY (0,0);
 800067e:	e7db      	b.n	8000638 <main+0x1c>
 8000680:	20000000 	.word	0x20000000
 8000684:	08003f88 	.word	0x08003f88
 8000688:	00000bb8 	.word	0x00000bb8

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b095      	sub	sp, #84	; 0x54
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	2414      	movs	r4, #20
 8000694:	193b      	adds	r3, r7, r4
 8000696:	0018      	movs	r0, r3
 8000698:	233c      	movs	r3, #60	; 0x3c
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f003 fc3b 	bl	8003f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	0018      	movs	r0, r3
 80006a6:	2310      	movs	r3, #16
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f003 fc34 	bl	8003f18 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fe0d 	bl	80022d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2202      	movs	r2, #2
 80006be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	0052      	lsls	r2, r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2240      	movs	r2, #64	; 0x40
 80006d2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fe45 	bl	800236c <HAL_RCC_OscConfig>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006e6:	f000 f8f7 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2207      	movs	r2, #7
 80006ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2100      	movs	r1, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f002 f990 	bl	8002a2c <HAL_RCC_ClockConfig>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000710:	f000 f8e2 	bl	80008d8 <Error_Handler>
  }
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b015      	add	sp, #84	; 0x54
 800071a:	bd90      	pop	{r4, r7, pc}

0800071c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_I2C1_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_I2C1_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_I2C1_Init+0x74>)
 8000728:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <MX_I2C1_Init+0x7c>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_I2C1_Init+0x74>)
 8000734:	2201      	movs	r2, #1
 8000736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_I2C1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_I2C1_Init+0x74>)
 8000758:	0018      	movs	r0, r3
 800075a:	f001 f855 	bl	8001808 <HAL_I2C_Init>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000762:	f000 f8b9 	bl	80008d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_I2C1_Init+0x74>)
 8000768:	2100      	movs	r1, #0
 800076a:	0018      	movs	r0, r3
 800076c:	f001 fd1a 	bl	80021a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000774:	f000 f8b0 	bl	80008d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <MX_I2C1_Init+0x74>)
 800077a:	2100      	movs	r1, #0
 800077c:	0018      	movs	r0, r3
 800077e:	f001 fd5d 	bl	800223c <HAL_I2CEx_ConfigDigitalFilter>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f8a7 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000030 	.word	0x20000030
 8000794:	40005400 	.word	0x40005400
 8000798:	0010061a 	.word	0x0010061a

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007a2:	4a24      	ldr	r2, [pc, #144]	; (8000834 <MX_USART2_UART_Init+0x98>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007a8:	22e1      	movs	r2, #225	; 0xe1
 80007aa:	0252      	lsls	r2, r2, #9
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b1d      	ldr	r3, [pc, #116]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f002 fd06 	bl	80031f8 <HAL_UART_Init>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007f0:	f000 f872 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x94>)
 80007f6:	2100      	movs	r1, #0
 80007f8:	0018      	movs	r0, r3
 80007fa:	f003 faad 	bl	8003d58 <HAL_UARTEx_SetTxFifoThreshold>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d001      	beq.n	8000806 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000802:	f000 f869 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_USART2_UART_Init+0x94>)
 8000808:	2100      	movs	r1, #0
 800080a:	0018      	movs	r0, r3
 800080c:	f003 fae4 	bl	8003dd8 <HAL_UARTEx_SetRxFifoThreshold>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000814:	f000 f860 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x94>)
 800081a:	0018      	movs	r0, r3
 800081c:	f003 fa62 	bl	8003ce4 <HAL_UARTEx_DisableFifoMode>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 f858 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	20000084 	.word	0x20000084
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b089      	sub	sp, #36	; 0x24
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	240c      	movs	r4, #12
 8000840:	193b      	adds	r3, r7, r4
 8000842:	0018      	movs	r0, r3
 8000844:	2314      	movs	r3, #20
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f003 fb65 	bl	8003f18 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000852:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000854:	2104      	movs	r1, #4
 8000856:	430a      	orrs	r2, r1
 8000858:	635a      	str	r2, [r3, #52]	; 0x34
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_GPIO_Init+0x9c>)
 800085c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085e:	2204      	movs	r2, #4
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_GPIO_Init+0x9c>)
 800086c:	2120      	movs	r1, #32
 800086e:	430a      	orrs	r2, r1
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000876:	2220      	movs	r2, #32
 8000878:	4013      	ands	r3, r2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_GPIO_Init+0x9c>)
 8000884:	2101      	movs	r1, #1
 8000886:	430a      	orrs	r2, r1
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_GPIO_Init+0x9c>)
 800088c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088e:	2201      	movs	r2, #1
 8000890:	4013      	ands	r3, r2
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000896:	23a0      	movs	r3, #160	; 0xa0
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	2200      	movs	r2, #0
 800089c:	2120      	movs	r1, #32
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 ff94 	bl	80017cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008a4:	0021      	movs	r1, r4
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2220      	movs	r2, #32
 80008aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2201      	movs	r2, #1
 80008b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2202      	movs	r2, #2
 80008bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008be:	187a      	adds	r2, r7, r1
 80008c0:	23a0      	movs	r3, #160	; 0xa0
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	0011      	movs	r1, r2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 fe14 	bl	80014f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b009      	add	sp, #36	; 0x24
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	40021000 	.word	0x40021000

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>

080008e2 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	0002      	movs	r2, r0
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	1dbb      	adds	r3, r7, #6
 80008f0:	1c0a      	adds	r2, r1, #0
 80008f2:	701a      	strb	r2, [r3, #0]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80008f4:	2226      	movs	r2, #38	; 0x26
 80008f6:	2100      	movs	r1, #0
 80008f8:	2078      	movs	r0, #120	; 0x78
 80008fa:	f000 fb2f 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2078      	movs	r0, #120	; 0x78
 8000904:	f000 fb2a 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	001a      	movs	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	2078      	movs	r0, #120	; 0x78
 8000912:	f000 fb23 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2078      	movs	r0, #120	; 0x78
 800091c:	f000 fb1e 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000920:	1dbb      	adds	r3, r7, #6
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	2078      	movs	r0, #120	; 0x78
 800092a:	f000 fb17 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2078      	movs	r0, #120	; 0x78
 8000934:	f000 fb12 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000938:	22ff      	movs	r2, #255	; 0xff
 800093a:	2100      	movs	r1, #0
 800093c:	2078      	movs	r0, #120	; 0x78
 800093e:	f000 fb0d 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000942:	222f      	movs	r2, #47	; 0x2f
 8000944:	2100      	movs	r1, #0
 8000946:	2078      	movs	r0, #120	; 0x78
 8000948:	f000 fb08 	bl	8000f5c <ssd1306_I2C_Write>
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}

08000954 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	0002      	movs	r2, r0
 800095c:	1dfb      	adds	r3, r7, #7
 800095e:	701a      	strb	r2, [r3, #0]
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	1c0a      	adds	r2, r1, #0
 8000964:	701a      	strb	r2, [r3, #0]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000966:	2227      	movs	r2, #39	; 0x27
 8000968:	2100      	movs	r1, #0
 800096a:	2078      	movs	r0, #120	; 0x78
 800096c:	f000 faf6 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2078      	movs	r0, #120	; 0x78
 8000976:	f000 faf1 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	2078      	movs	r0, #120	; 0x78
 8000984:	f000 faea 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2078      	movs	r0, #120	; 0x78
 800098e:	f000 fae5 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000992:	1dbb      	adds	r3, r7, #6
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	001a      	movs	r2, r3
 8000998:	2100      	movs	r1, #0
 800099a:	2078      	movs	r0, #120	; 0x78
 800099c:	f000 fade 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2078      	movs	r0, #120	; 0x78
 80009a6:	f000 fad9 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	2100      	movs	r1, #0
 80009ae:	2078      	movs	r0, #120	; 0x78
 80009b0:	f000 fad4 	bl	8000f5c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80009b4:	222f      	movs	r2, #47	; 0x2f
 80009b6:	2100      	movs	r1, #0
 80009b8:	2078      	movs	r0, #120	; 0x78
 80009ba:	f000 facf 	bl	8000f5c <ssd1306_I2C_Write>
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80009ca:	222e      	movs	r2, #46	; 0x2e
 80009cc:	2100      	movs	r1, #0
 80009ce:	2078      	movs	r0, #120	; 0x78
 80009d0:	f000 fac4 	bl	8000f5c <ssd1306_I2C_Write>
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80009e2:	f000 fa3b 	bl	8000e5c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80009e6:	4b5b      	ldr	r3, [pc, #364]	; (8000b54 <SSD1306_Init+0x178>)
 80009e8:	485b      	ldr	r0, [pc, #364]	; (8000b58 <SSD1306_Init+0x17c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	2178      	movs	r1, #120	; 0x78
 80009ee:	f001 f8a9 	bl	8001b44 <HAL_I2C_IsDeviceReady>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d001      	beq.n	80009fa <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e0a8      	b.n	8000b4c <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80009fa:	4b58      	ldr	r3, [pc, #352]	; (8000b5c <SSD1306_Init+0x180>)
 80009fc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009fe:	e002      	b.n	8000a06 <SSD1306_Init+0x2a>
		p--;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d1f9      	bne.n	8000a00 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000a0c:	22ae      	movs	r2, #174	; 0xae
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2078      	movs	r0, #120	; 0x78
 8000a12:	f000 faa3 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000a16:	2220      	movs	r2, #32
 8000a18:	2100      	movs	r1, #0
 8000a1a:	2078      	movs	r0, #120	; 0x78
 8000a1c:	f000 fa9e 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000a20:	2210      	movs	r2, #16
 8000a22:	2100      	movs	r1, #0
 8000a24:	2078      	movs	r0, #120	; 0x78
 8000a26:	f000 fa99 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a2a:	22b0      	movs	r2, #176	; 0xb0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2078      	movs	r0, #120	; 0x78
 8000a30:	f000 fa94 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000a34:	22c8      	movs	r2, #200	; 0xc8
 8000a36:	2100      	movs	r1, #0
 8000a38:	2078      	movs	r0, #120	; 0x78
 8000a3a:	f000 fa8f 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2078      	movs	r0, #120	; 0x78
 8000a44:	f000 fa8a 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000a48:	2210      	movs	r2, #16
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2078      	movs	r0, #120	; 0x78
 8000a4e:	f000 fa85 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000a52:	2240      	movs	r2, #64	; 0x40
 8000a54:	2100      	movs	r1, #0
 8000a56:	2078      	movs	r0, #120	; 0x78
 8000a58:	f000 fa80 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000a5c:	2281      	movs	r2, #129	; 0x81
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2078      	movs	r0, #120	; 0x78
 8000a62:	f000 fa7b 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a66:	22ff      	movs	r2, #255	; 0xff
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2078      	movs	r0, #120	; 0x78
 8000a6c:	f000 fa76 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a70:	22a1      	movs	r2, #161	; 0xa1
 8000a72:	2100      	movs	r1, #0
 8000a74:	2078      	movs	r0, #120	; 0x78
 8000a76:	f000 fa71 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000a7a:	22a6      	movs	r2, #166	; 0xa6
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2078      	movs	r0, #120	; 0x78
 8000a80:	f000 fa6c 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000a84:	22a8      	movs	r2, #168	; 0xa8
 8000a86:	2100      	movs	r1, #0
 8000a88:	2078      	movs	r0, #120	; 0x78
 8000a8a:	f000 fa67 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000a8e:	223f      	movs	r2, #63	; 0x3f
 8000a90:	2100      	movs	r1, #0
 8000a92:	2078      	movs	r0, #120	; 0x78
 8000a94:	f000 fa62 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a98:	22a4      	movs	r2, #164	; 0xa4
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2078      	movs	r0, #120	; 0x78
 8000a9e:	f000 fa5d 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000aa2:	22d3      	movs	r2, #211	; 0xd3
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2078      	movs	r0, #120	; 0x78
 8000aa8:	f000 fa58 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2078      	movs	r0, #120	; 0x78
 8000ab2:	f000 fa53 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ab6:	22d5      	movs	r2, #213	; 0xd5
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2078      	movs	r0, #120	; 0x78
 8000abc:	f000 fa4e 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ac0:	22f0      	movs	r2, #240	; 0xf0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2078      	movs	r0, #120	; 0x78
 8000ac6:	f000 fa49 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000aca:	22d9      	movs	r2, #217	; 0xd9
 8000acc:	2100      	movs	r1, #0
 8000ace:	2078      	movs	r0, #120	; 0x78
 8000ad0:	f000 fa44 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000ad4:	2222      	movs	r2, #34	; 0x22
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2078      	movs	r0, #120	; 0x78
 8000ada:	f000 fa3f 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ade:	22da      	movs	r2, #218	; 0xda
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2078      	movs	r0, #120	; 0x78
 8000ae4:	f000 fa3a 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000ae8:	2212      	movs	r2, #18
 8000aea:	2100      	movs	r1, #0
 8000aec:	2078      	movs	r0, #120	; 0x78
 8000aee:	f000 fa35 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000af2:	22db      	movs	r2, #219	; 0xdb
 8000af4:	2100      	movs	r1, #0
 8000af6:	2078      	movs	r0, #120	; 0x78
 8000af8:	f000 fa30 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000afc:	2220      	movs	r2, #32
 8000afe:	2100      	movs	r1, #0
 8000b00:	2078      	movs	r0, #120	; 0x78
 8000b02:	f000 fa2b 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000b06:	228d      	movs	r2, #141	; 0x8d
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2078      	movs	r0, #120	; 0x78
 8000b0c:	f000 fa26 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000b10:	2214      	movs	r2, #20
 8000b12:	2100      	movs	r1, #0
 8000b14:	2078      	movs	r0, #120	; 0x78
 8000b16:	f000 fa21 	bl	8000f5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000b1a:	22af      	movs	r2, #175	; 0xaf
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2078      	movs	r0, #120	; 0x78
 8000b20:	f000 fa1c 	bl	8000f5c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000b24:	222e      	movs	r2, #46	; 0x2e
 8000b26:	2100      	movs	r1, #0
 8000b28:	2078      	movs	r0, #120	; 0x78
 8000b2a:	f000 fa17 	bl	8000f5c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f84c 	bl	8000bcc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000b34:	f000 f816 	bl	8000b64 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <SSD1306_Init+0x184>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <SSD1306_Init+0x184>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <SSD1306_Init+0x184>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	00004e20 	.word	0x00004e20
 8000b58:	20000030 	.word	0x20000030
 8000b5c:	000009c4 	.word	0x000009c4
 8000b60:	20000318 	.word	0x20000318

08000b64 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	e021      	b.n	8000bb6 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	3b50      	subs	r3, #80	; 0x50
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2078      	movs	r0, #120	; 0x78
 8000b80:	f000 f9ec 	bl	8000f5c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2078      	movs	r0, #120	; 0x78
 8000b8a:	f000 f9e7 	bl	8000f5c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000b8e:	2210      	movs	r2, #16
 8000b90:	2100      	movs	r1, #0
 8000b92:	2078      	movs	r0, #120	; 0x78
 8000b94:	f000 f9e2 	bl	8000f5c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	01da      	lsls	r2, r3, #7
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <SSD1306_UpdateScreen+0x64>)
 8000ba0:	18d2      	adds	r2, r2, r3
 8000ba2:	2380      	movs	r3, #128	; 0x80
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	2078      	movs	r0, #120	; 0x78
 8000ba8:	f000 f96c 	bl	8000e84 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	3201      	adds	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b07      	cmp	r3, #7
 8000bbc:	d9d9      	bls.n	8000b72 <SSD1306_UpdateScreen+0xe>
	}
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b002      	add	sp, #8
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000118 	.word	0x20000118

08000bcc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	0002      	movs	r2, r0
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000bd8:	1dfb      	adds	r3, r7, #7
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d101      	bne.n	8000be4 <SSD1306_Fill+0x18>
 8000be0:	2300      	movs	r3, #0
 8000be2:	e000      	b.n	8000be6 <SSD1306_Fill+0x1a>
 8000be4:	23ff      	movs	r3, #255	; 0xff
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <SSD1306_Fill+0x30>)
 8000bec:	0019      	movs	r1, r3
 8000bee:	f003 f993 	bl	8003f18 <memset>
}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	20000118 	.word	0x20000118

08000c00 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	0004      	movs	r4, r0
 8000c08:	0008      	movs	r0, r1
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	1dbb      	adds	r3, r7, #6
 8000c0e:	1c22      	adds	r2, r4, #0
 8000c10:	801a      	strh	r2, [r3, #0]
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	1c02      	adds	r2, r0, #0
 8000c16:	801a      	strh	r2, [r3, #0]
 8000c18:	1cfb      	adds	r3, r7, #3
 8000c1a:	1c0a      	adds	r2, r1, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
	if (
 8000c1e:	1dbb      	adds	r3, r7, #6
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	2b7f      	cmp	r3, #127	; 0x7f
 8000c24:	d852      	bhi.n	8000ccc <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	2b1f      	cmp	r3, #31
 8000c2c:	d84e      	bhi.n	8000ccc <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <SSD1306_DrawPixel+0xd4>)
 8000c30:	791b      	ldrb	r3, [r3, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8000c36:	1cfb      	adds	r3, r7, #3
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	425a      	negs	r2, r3
 8000c3c:	4153      	adcs	r3, r2
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	1cfb      	adds	r3, r7, #3
 8000c42:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000c44:	1cfb      	adds	r3, r7, #3
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d11e      	bne.n	8000c8a <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c4c:	1dbb      	adds	r3, r7, #6
 8000c4e:	881a      	ldrh	r2, [r3, #0]
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	b298      	uxth	r0, r3
 8000c58:	0003      	movs	r3, r0
 8000c5a:	01db      	lsls	r3, r3, #7
 8000c5c:	18d3      	adds	r3, r2, r3
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <SSD1306_DrawPixel+0xd8>)
 8000c60:	5cd3      	ldrb	r3, [r2, r3]
 8000c62:	b25a      	sxtb	r2, r3
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	2107      	movs	r1, #7
 8000c6a:	400b      	ands	r3, r1
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	4099      	lsls	r1, r3
 8000c70:	000b      	movs	r3, r1
 8000c72:	b25b      	sxtb	r3, r3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	b259      	sxtb	r1, r3
 8000c78:	1dbb      	adds	r3, r7, #6
 8000c7a:	881a      	ldrh	r2, [r3, #0]
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	01db      	lsls	r3, r3, #7
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	b2c9      	uxtb	r1, r1
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <SSD1306_DrawPixel+0xd8>)
 8000c86:	54d1      	strb	r1, [r2, r3]
 8000c88:	e021      	b.n	8000cce <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c8a:	1dbb      	adds	r3, r7, #6
 8000c8c:	881a      	ldrh	r2, [r3, #0]
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	b298      	uxth	r0, r3
 8000c96:	0003      	movs	r3, r0
 8000c98:	01db      	lsls	r3, r3, #7
 8000c9a:	18d3      	adds	r3, r2, r3
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <SSD1306_DrawPixel+0xd8>)
 8000c9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	1d3a      	adds	r2, r7, #4
 8000ca4:	8812      	ldrh	r2, [r2, #0]
 8000ca6:	2107      	movs	r1, #7
 8000ca8:	400a      	ands	r2, r1
 8000caa:	2101      	movs	r1, #1
 8000cac:	4091      	lsls	r1, r2
 8000cae:	000a      	movs	r2, r1
 8000cb0:	b252      	sxtb	r2, r2
 8000cb2:	43d2      	mvns	r2, r2
 8000cb4:	b252      	sxtb	r2, r2
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	b259      	sxtb	r1, r3
 8000cba:	1dbb      	adds	r3, r7, #6
 8000cbc:	881a      	ldrh	r2, [r3, #0]
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	01db      	lsls	r3, r3, #7
 8000cc2:	18d3      	adds	r3, r2, r3
 8000cc4:	b2c9      	uxtb	r1, r1
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <SSD1306_DrawPixel+0xd8>)
 8000cc8:	54d1      	strb	r1, [r2, r3]
 8000cca:	e000      	b.n	8000cce <SSD1306_DrawPixel+0xce>
		return;
 8000ccc:	46c0      	nop			; (mov r8, r8)
	}
}
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b003      	add	sp, #12
 8000cd2:	bd90      	pop	{r4, r7, pc}
 8000cd4:	20000318 	.word	0x20000318
 8000cd8:	20000118 	.word	0x20000118

08000cdc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	801a      	strh	r2, [r3, #0]
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	1c0a      	adds	r2, r1, #0
 8000cec:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <SSD1306_GotoXY+0x2c>)
 8000cf0:	1dba      	adds	r2, r7, #6
 8000cf2:	8812      	ldrh	r2, [r2, #0]
 8000cf4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SSD1306_GotoXY+0x2c>)
 8000cf8:	1d3a      	adds	r2, r7, #4
 8000cfa:	8812      	ldrh	r2, [r2, #0]
 8000cfc:	805a      	strh	r2, [r3, #2]
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	20000318 	.word	0x20000318

08000d0c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6039      	str	r1, [r7, #0]
 8000d14:	0011      	movs	r1, r2
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	1c02      	adds	r2, r0, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	1dbb      	adds	r3, r7, #6
 8000d1e:	1c0a      	adds	r2, r1, #0
 8000d20:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d22:	4b3a      	ldr	r3, [pc, #232]	; (8000e0c <SSD1306_Putc+0x100>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	001a      	movs	r2, r3
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	18d3      	adds	r3, r2, r3
	if (
 8000d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d30:	dc07      	bgt.n	8000d42 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000d32:	4b36      	ldr	r3, [pc, #216]	; (8000e0c <SSD1306_Putc+0x100>)
 8000d34:	885b      	ldrh	r3, [r3, #2]
 8000d36:	001a      	movs	r2, r3
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	785b      	ldrb	r3, [r3, #1]
 8000d3c:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d3e:	2b1f      	cmp	r3, #31
 8000d40:	dd01      	ble.n	8000d46 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e05e      	b.n	8000e04 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	e04a      	b.n	8000de2 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	3b20      	subs	r3, #32
 8000d56:	6839      	ldr	r1, [r7, #0]
 8000d58:	7849      	ldrb	r1, [r1, #1]
 8000d5a:	434b      	muls	r3, r1
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	18cb      	adds	r3, r1, r3
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	18d3      	adds	r3, r2, r3
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	e02f      	b.n	8000dd0 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	409a      	lsls	r2, r3
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	d011      	beq.n	8000da2 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000d7e:	4b23      	ldr	r3, [pc, #140]	; (8000e0c <SSD1306_Putc+0x100>)
 8000d80:	881a      	ldrh	r2, [r3, #0]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	18d3      	adds	r3, r2, r3
 8000d88:	b298      	uxth	r0, r3
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <SSD1306_Putc+0x100>)
 8000d8c:	885a      	ldrh	r2, [r3, #2]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	18d3      	adds	r3, r2, r3
 8000d94:	b299      	uxth	r1, r3
 8000d96:	1dbb      	adds	r3, r7, #6
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	001a      	movs	r2, r3
 8000d9c:	f7ff ff30 	bl	8000c00 <SSD1306_DrawPixel>
 8000da0:	e013      	b.n	8000dca <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <SSD1306_Putc+0x100>)
 8000da4:	881a      	ldrh	r2, [r3, #0]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	18d3      	adds	r3, r2, r3
 8000dac:	b298      	uxth	r0, r3
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <SSD1306_Putc+0x100>)
 8000db0:	885a      	ldrh	r2, [r3, #2]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	18d3      	adds	r3, r2, r3
 8000db8:	b299      	uxth	r1, r3
 8000dba:	1dbb      	adds	r3, r7, #6
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	425a      	negs	r2, r3
 8000dc0:	4153      	adcs	r3, r2
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	f7ff ff1b 	bl	8000c00 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d3c9      	bcc.n	8000d70 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3301      	adds	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	785b      	ldrb	r3, [r3, #1]
 8000de6:	001a      	movs	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d3ae      	bcc.n	8000d4c <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <SSD1306_Putc+0x100>)
 8000df0:	881a      	ldrh	r2, [r3, #0]
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	18d3      	adds	r3, r2, r3
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <SSD1306_Putc+0x100>)
 8000dfe:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	781b      	ldrb	r3, [r3, #0]
}
 8000e04:	0018      	movs	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	b006      	add	sp, #24
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000318 	.word	0x20000318

08000e10 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8000e1e:	e013      	b.n	8000e48 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	7818      	ldrb	r0, [r3, #0]
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	0019      	movs	r1, r3
 8000e2c:	f7ff ff6e 	bl	8000d0c <SSD1306_Putc>
 8000e30:	0003      	movs	r3, r0
 8000e32:	001a      	movs	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d002      	beq.n	8000e42 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	e008      	b.n	8000e54 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	3301      	adds	r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1e7      	bne.n	8000e20 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	781b      	ldrb	r3, [r3, #0]
}
 8000e54:	0018      	movs	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b004      	add	sp, #16
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <ssd1306_I2C_Init+0x24>)
 8000e64:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e66:	e002      	b.n	8000e6e <ssd1306_I2C_Init+0x12>
		p--;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f9      	bne.n	8000e68 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b002      	add	sp, #8
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	0003d090 	.word	0x0003d090

08000e84 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000e84:	b5b0      	push	{r4, r5, r7, lr}
 8000e86:	b0c6      	sub	sp, #280	; 0x118
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	0004      	movs	r4, r0
 8000e8c:	0008      	movs	r0, r1
 8000e8e:	603a      	str	r2, [r7, #0]
 8000e90:	0019      	movs	r1, r3
 8000e92:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <ssd1306_I2C_WriteMulti+0xc4>)
 8000e94:	2588      	movs	r5, #136	; 0x88
 8000e96:	006d      	lsls	r5, r5, #1
 8000e98:	195b      	adds	r3, r3, r5
 8000e9a:	19db      	adds	r3, r3, r7
 8000e9c:	1c22      	adds	r2, r4, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <ssd1306_I2C_WriteMulti+0xc8>)
 8000ea2:	002c      	movs	r4, r5
 8000ea4:	191b      	adds	r3, r3, r4
 8000ea6:	19db      	adds	r3, r3, r7
 8000ea8:	1c02      	adds	r2, r0, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <ssd1306_I2C_WriteMulti+0xcc>)
 8000eae:	0020      	movs	r0, r4
 8000eb0:	181b      	adds	r3, r3, r0
 8000eb2:	19db      	adds	r3, r3, r7
 8000eb4:	1c0a      	adds	r2, r1, #0
 8000eb6:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <ssd1306_I2C_WriteMulti+0xd0>)
 8000eba:	181b      	adds	r3, r3, r0
 8000ebc:	19db      	adds	r3, r3, r7
 8000ebe:	4a23      	ldr	r2, [pc, #140]	; (8000f4c <ssd1306_I2C_WriteMulti+0xc8>)
 8000ec0:	1812      	adds	r2, r2, r0
 8000ec2:	19d2      	adds	r2, r2, r7
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000ec8:	2310      	movs	r3, #16
 8000eca:	33ff      	adds	r3, #255	; 0xff
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	e014      	b.n	8000efe <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8000ed4:	2010      	movs	r0, #16
 8000ed6:	30ff      	adds	r0, #255	; 0xff
 8000ed8:	183b      	adds	r3, r7, r0
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	18d2      	adds	r2, r2, r3
 8000ee0:	183b      	adds	r3, r7, r0
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	7811      	ldrb	r1, [r2, #0]
 8000ee8:	4a1a      	ldr	r2, [pc, #104]	; (8000f54 <ssd1306_I2C_WriteMulti+0xd0>)
 8000eea:	2488      	movs	r4, #136	; 0x88
 8000eec:	0064      	lsls	r4, r4, #1
 8000eee:	1912      	adds	r2, r2, r4
 8000ef0:	19d2      	adds	r2, r2, r7
 8000ef2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000ef4:	183b      	adds	r3, r7, r0
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	183b      	adds	r3, r7, r0
 8000efa:	3201      	adds	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	2310      	movs	r3, #16
 8000f00:	33ff      	adds	r3, #255	; 0xff
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4a11      	ldr	r2, [pc, #68]	; (8000f50 <ssd1306_I2C_WriteMulti+0xcc>)
 8000f0a:	2188      	movs	r1, #136	; 0x88
 8000f0c:	0049      	lsls	r1, r1, #1
 8000f0e:	1852      	adds	r2, r2, r1
 8000f10:	19d2      	adds	r2, r2, r7
 8000f12:	8812      	ldrh	r2, [r2, #0]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8dd      	bhi.n	8000ed4 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <ssd1306_I2C_WriteMulti+0xc4>)
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	189b      	adds	r3, r3, r2
 8000f1e:	19db      	adds	r3, r3, r7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b299      	uxth	r1, r3
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <ssd1306_I2C_WriteMulti+0xcc>)
 8000f26:	189b      	adds	r3, r3, r2
 8000f28:	19db      	adds	r3, r3, r7
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	220c      	movs	r2, #12
 8000f32:	18ba      	adds	r2, r7, r2
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <ssd1306_I2C_WriteMulti+0xd4>)
 8000f36:	240a      	movs	r4, #10
 8000f38:	9400      	str	r4, [sp, #0]
 8000f3a:	f000 fcfb 	bl	8001934 <HAL_I2C_Master_Transmit>
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b044      	add	sp, #272	; 0x110
 8000f44:	bdb0      	pop	{r4, r5, r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	fffffef7 	.word	0xfffffef7
 8000f4c:	fffffef6 	.word	0xfffffef6
 8000f50:	fffffef4 	.word	0xfffffef4
 8000f54:	fffffefc 	.word	0xfffffefc
 8000f58:	20000030 	.word	0x20000030

08000f5c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b087      	sub	sp, #28
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	0004      	movs	r4, r0
 8000f64:	0008      	movs	r0, r1
 8000f66:	0011      	movs	r1, r2
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	1c22      	adds	r2, r4, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	1dbb      	adds	r3, r7, #6
 8000f70:	1c02      	adds	r2, r0, #0
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	1d7b      	adds	r3, r7, #5
 8000f76:	1c0a      	adds	r2, r1, #0
 8000f78:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8000f7a:	200c      	movs	r0, #12
 8000f7c:	183b      	adds	r3, r7, r0
 8000f7e:	1dba      	adds	r2, r7, #6
 8000f80:	7812      	ldrb	r2, [r2, #0]
 8000f82:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8000f84:	183b      	adds	r3, r7, r0
 8000f86:	1d7a      	adds	r2, r7, #5
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b299      	uxth	r1, r3
 8000f92:	183a      	adds	r2, r7, r0
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <ssd1306_I2C_Write+0x4c>)
 8000f96:	230a      	movs	r3, #10
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f000 fcca 	bl	8001934 <HAL_I2C_Master_Transmit>
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b005      	add	sp, #20
 8000fa6:	bd90      	pop	{r4, r7, pc}
 8000fa8:	20000030 	.word	0x20000030

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fb8:	2101      	movs	r1, #1
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	0549      	lsls	r1, r1, #21
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	055b      	lsls	r3, r3, #21
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000fe6:	23c0      	movs	r3, #192	; 0xc0
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 f9b8 	bl	8001360 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b002      	add	sp, #8
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b09d      	sub	sp, #116	; 0x74
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	235c      	movs	r3, #92	; 0x5c
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	0018      	movs	r0, r3
 800100a:	2314      	movs	r3, #20
 800100c:	001a      	movs	r2, r3
 800100e:	2100      	movs	r1, #0
 8001010:	f002 ff82 	bl	8003f18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001014:	2410      	movs	r4, #16
 8001016:	193b      	adds	r3, r7, r4
 8001018:	0018      	movs	r0, r3
 800101a:	234c      	movs	r3, #76	; 0x4c
 800101c:	001a      	movs	r2, r3
 800101e:	2100      	movs	r1, #0
 8001020:	f002 ff7a 	bl	8003f18 <memset>
  if(hi2c->Instance==I2C1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <HAL_I2C_MspInit+0xbc>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d13f      	bne.n	80010ae <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800102e:	193b      	adds	r3, r7, r4
 8001030:	2220      	movs	r2, #32
 8001032:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001034:	193b      	adds	r3, r7, r4
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103a:	193b      	adds	r3, r7, r4
 800103c:	0018      	movs	r0, r3
 800103e:	f001 fe9f 	bl	8002d80 <HAL_RCCEx_PeriphCLKConfig>
 8001042:	1e03      	subs	r3, r0, #0
 8001044:	d001      	beq.n	800104a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001046:	f7ff fc47 	bl	80008d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_I2C_MspInit+0xc0>)
 800104c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_I2C_MspInit+0xc0>)
 8001050:	2101      	movs	r1, #1
 8001052:	430a      	orrs	r2, r1
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_I2C_MspInit+0xc0>)
 8001058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800105a:	2201      	movs	r2, #1
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001062:	215c      	movs	r1, #92	; 0x5c
 8001064:	187b      	adds	r3, r7, r1
 8001066:	22c0      	movs	r2, #192	; 0xc0
 8001068:	00d2      	lsls	r2, r2, #3
 800106a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2212      	movs	r2, #18
 8001070:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2206      	movs	r2, #6
 8001082:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	187a      	adds	r2, r7, r1
 8001086:	23a0      	movs	r3, #160	; 0xa0
 8001088:	05db      	lsls	r3, r3, #23
 800108a:	0011      	movs	r1, r2
 800108c:	0018      	movs	r0, r3
 800108e:	f000 fa31 	bl	80014f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_I2C_MspInit+0xc0>)
 8001094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_I2C_MspInit+0xc0>)
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	0389      	lsls	r1, r1, #14
 800109c:	430a      	orrs	r2, r1
 800109e:	63da      	str	r2, [r3, #60]	; 0x3c
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_I2C_MspInit+0xc0>)
 80010a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	039b      	lsls	r3, r3, #14
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b01d      	add	sp, #116	; 0x74
 80010b4:	bd90      	pop	{r4, r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	40005400 	.word	0x40005400
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b09d      	sub	sp, #116	; 0x74
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	235c      	movs	r3, #92	; 0x5c
 80010ca:	18fb      	adds	r3, r7, r3
 80010cc:	0018      	movs	r0, r3
 80010ce:	2314      	movs	r3, #20
 80010d0:	001a      	movs	r2, r3
 80010d2:	2100      	movs	r1, #0
 80010d4:	f002 ff20 	bl	8003f18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d8:	2410      	movs	r4, #16
 80010da:	193b      	adds	r3, r7, r4
 80010dc:	0018      	movs	r0, r3
 80010de:	234c      	movs	r3, #76	; 0x4c
 80010e0:	001a      	movs	r2, r3
 80010e2:	2100      	movs	r1, #0
 80010e4:	f002 ff18 	bl	8003f18 <memset>
  if(huart->Instance==USART2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a22      	ldr	r2, [pc, #136]	; (8001178 <HAL_UART_MspInit+0xb8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d13e      	bne.n	8001170 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	2202      	movs	r2, #2
 80010f6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010f8:	193b      	adds	r3, r7, r4
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	0018      	movs	r0, r3
 8001102:	f001 fe3d 	bl	8002d80 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d001      	beq.n	800110e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800110a:	f7ff fbe5 	bl	80008d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_UART_MspInit+0xbc>)
 8001110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <HAL_UART_MspInit+0xbc>)
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	0289      	lsls	r1, r1, #10
 8001118:	430a      	orrs	r2, r1
 800111a:	63da      	str	r2, [r3, #60]	; 0x3c
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_UART_MspInit+0xbc>)
 800111e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	029b      	lsls	r3, r3, #10
 8001124:	4013      	ands	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_UART_MspInit+0xbc>)
 800112c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_UART_MspInit+0xbc>)
 8001130:	2101      	movs	r1, #1
 8001132:	430a      	orrs	r2, r1
 8001134:	635a      	str	r2, [r3, #52]	; 0x34
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_UART_MspInit+0xbc>)
 8001138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113a:	2201      	movs	r2, #1
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001142:	215c      	movs	r1, #92	; 0x5c
 8001144:	187b      	adds	r3, r7, r1
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2202      	movs	r2, #2
 800114e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2201      	movs	r2, #1
 8001160:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	187a      	adds	r2, r7, r1
 8001164:	23a0      	movs	r3, #160	; 0xa0
 8001166:	05db      	lsls	r3, r3, #23
 8001168:	0011      	movs	r1, r2
 800116a:	0018      	movs	r0, r3
 800116c:	f000 f9c2 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b01d      	add	sp, #116	; 0x74
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	40004400 	.word	0x40004400
 800117c:	40021000 	.word	0x40021000

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler+0x4>

08001186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f89c 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011bc:	f7ff fff7 	bl	80011ae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011c2:	490d      	ldr	r1, [pc, #52]	; (80011f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <LoopForever+0xe>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d8:	4c0a      	ldr	r4, [pc, #40]	; (8001204 <LoopForever+0x16>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011e6:	f002 fe9f 	bl	8003f28 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011ea:	f7ff fa17 	bl	800061c <main>

080011ee <LoopForever>:

LoopForever:
  b LoopForever
 80011ee:	e7fe      	b.n	80011ee <LoopForever>
  ldr   r0, =_estack
 80011f0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80011fc:	08004d88 	.word	0x08004d88
  ldr r2, =_sbss
 8001200:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001204:	20000324 	.word	0x20000324

08001208 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC1_COMP_IRQHandler>
	...

0800120c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_Init+0x3c>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_Init+0x3c>)
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	0049      	lsls	r1, r1, #1
 8001222:	430a      	orrs	r2, r1
 8001224:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001226:	2000      	movs	r0, #0
 8001228:	f000 f810 	bl	800124c <HAL_InitTick>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d003      	beq.n	8001238 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e001      	b.n	800123c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001238:	f7ff feb8 	bl	8000fac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800123c:	1dfb      	adds	r3, r7, #7
 800123e:	781b      	ldrb	r3, [r3, #0]
}
 8001240:	0018      	movs	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	b002      	add	sp, #8
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40022000 	.word	0x40022000

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001254:	230f      	movs	r3, #15
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800125c:	4b1d      	ldr	r3, [pc, #116]	; (80012d4 <HAL_InitTick+0x88>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d02b      	beq.n	80012bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <HAL_InitTick+0x8c>)
 8001266:	681c      	ldr	r4, [r3, #0]
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_InitTick+0x88>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	0019      	movs	r1, r3
 800126e:	23fa      	movs	r3, #250	; 0xfa
 8001270:	0098      	lsls	r0, r3, #2
 8001272:	f7fe ff47 	bl	8000104 <__udivsi3>
 8001276:	0003      	movs	r3, r0
 8001278:	0019      	movs	r1, r3
 800127a:	0020      	movs	r0, r4
 800127c:	f7fe ff42 	bl	8000104 <__udivsi3>
 8001280:	0003      	movs	r3, r0
 8001282:	0018      	movs	r0, r3
 8001284:	f000 f929 	bl	80014da <HAL_SYSTICK_Config>
 8001288:	1e03      	subs	r3, r0, #0
 800128a:	d112      	bne.n	80012b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d80a      	bhi.n	80012a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	2301      	movs	r3, #1
 8001296:	425b      	negs	r3, r3
 8001298:	2200      	movs	r2, #0
 800129a:	0018      	movs	r0, r3
 800129c:	f000 f908 	bl	80014b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_InitTick+0x90>)
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e00d      	b.n	80012c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80012a8:	230f      	movs	r3, #15
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e008      	b.n	80012c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012b2:	230f      	movs	r3, #15
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e003      	b.n	80012c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012bc:	230f      	movs	r3, #15
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80012c4:	230f      	movs	r3, #15
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	781b      	ldrb	r3, [r3, #0]
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b005      	add	sp, #20
 80012d0:	bd90      	pop	{r4, r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	20000010 	.word	0x20000010
 80012d8:	20000008 	.word	0x20000008
 80012dc:	2000000c 	.word	0x2000000c

080012e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_IncTick+0x1c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	001a      	movs	r2, r3
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_IncTick+0x20>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	18d2      	adds	r2, r2, r3
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_IncTick+0x20>)
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	20000010 	.word	0x20000010
 8001300:	20000320 	.word	0x20000320

08001304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <HAL_GetTick+0x10>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	20000320 	.word	0x20000320

08001318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff fff0 	bl	8001304 <HAL_GetTick>
 8001324:	0003      	movs	r3, r0
 8001326:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3301      	adds	r3, #1
 8001330:	d005      	beq.n	800133e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_Delay+0x44>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	001a      	movs	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	189b      	adds	r3, r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	f7ff ffe0 	bl	8001304 <HAL_GetTick>
 8001344:	0002      	movs	r2, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d8f7      	bhi.n	8001340 <HAL_Delay+0x28>
  {
  }
}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b004      	add	sp, #16
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	20000010 	.word	0x20000010

08001360 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a06      	ldr	r2, [pc, #24]	; (8001388 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800136e:	4013      	ands	r3, r2
 8001370:	0019      	movs	r1, r3
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	430a      	orrs	r2, r1
 8001378:	601a      	str	r2, [r3, #0]
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	40010000 	.word	0x40010000
 8001388:	fffff9ff 	.word	0xfffff9ff

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	0002      	movs	r2, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b7f      	cmp	r3, #127	; 0x7f
 80013a0:	d828      	bhi.n	80013f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a2:	4a2f      	ldr	r2, [pc, #188]	; (8001460 <__NVIC_SetPriority+0xd4>)
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	33c0      	adds	r3, #192	; 0xc0
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	589b      	ldr	r3, [r3, r2]
 80013b2:	1dfa      	adds	r2, r7, #7
 80013b4:	7812      	ldrb	r2, [r2, #0]
 80013b6:	0011      	movs	r1, r2
 80013b8:	2203      	movs	r2, #3
 80013ba:	400a      	ands	r2, r1
 80013bc:	00d2      	lsls	r2, r2, #3
 80013be:	21ff      	movs	r1, #255	; 0xff
 80013c0:	4091      	lsls	r1, r2
 80013c2:	000a      	movs	r2, r1
 80013c4:	43d2      	mvns	r2, r2
 80013c6:	401a      	ands	r2, r3
 80013c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	019b      	lsls	r3, r3, #6
 80013ce:	22ff      	movs	r2, #255	; 0xff
 80013d0:	401a      	ands	r2, r3
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	0018      	movs	r0, r3
 80013d8:	2303      	movs	r3, #3
 80013da:	4003      	ands	r3, r0
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e0:	481f      	ldr	r0, [pc, #124]	; (8001460 <__NVIC_SetPriority+0xd4>)
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	089b      	lsrs	r3, r3, #2
 80013ea:	430a      	orrs	r2, r1
 80013ec:	33c0      	adds	r3, #192	; 0xc0
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013f2:	e031      	b.n	8001458 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f4:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <__NVIC_SetPriority+0xd8>)
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	0019      	movs	r1, r3
 80013fc:	230f      	movs	r3, #15
 80013fe:	400b      	ands	r3, r1
 8001400:	3b08      	subs	r3, #8
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	3306      	adds	r3, #6
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	18d3      	adds	r3, r2, r3
 800140a:	3304      	adds	r3, #4
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	1dfa      	adds	r2, r7, #7
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	0011      	movs	r1, r2
 8001414:	2203      	movs	r2, #3
 8001416:	400a      	ands	r2, r1
 8001418:	00d2      	lsls	r2, r2, #3
 800141a:	21ff      	movs	r1, #255	; 0xff
 800141c:	4091      	lsls	r1, r2
 800141e:	000a      	movs	r2, r1
 8001420:	43d2      	mvns	r2, r2
 8001422:	401a      	ands	r2, r3
 8001424:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	019b      	lsls	r3, r3, #6
 800142a:	22ff      	movs	r2, #255	; 0xff
 800142c:	401a      	ands	r2, r3
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	0018      	movs	r0, r3
 8001434:	2303      	movs	r3, #3
 8001436:	4003      	ands	r3, r0
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <__NVIC_SetPriority+0xd8>)
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	001c      	movs	r4, r3
 8001444:	230f      	movs	r3, #15
 8001446:	4023      	ands	r3, r4
 8001448:	3b08      	subs	r3, #8
 800144a:	089b      	lsrs	r3, r3, #2
 800144c:	430a      	orrs	r2, r1
 800144e:	3306      	adds	r3, #6
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	18c3      	adds	r3, r0, r3
 8001454:	3304      	adds	r3, #4
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b003      	add	sp, #12
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	1e5a      	subs	r2, r3, #1
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	045b      	lsls	r3, r3, #17
 8001478:	429a      	cmp	r2, r3
 800147a:	d301      	bcc.n	8001480 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147c:	2301      	movs	r3, #1
 800147e:	e010      	b.n	80014a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <SysTick_Config+0x44>)
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	3a01      	subs	r2, #1
 8001486:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001488:	2301      	movs	r3, #1
 800148a:	425b      	negs	r3, r3
 800148c:	2103      	movs	r1, #3
 800148e:	0018      	movs	r0, r3
 8001490:	f7ff ff7c 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <SysTick_Config+0x44>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SysTick_Config+0x44>)
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	210f      	movs	r1, #15
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	1c02      	adds	r2, r0, #0
 80014c0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	0011      	movs	r1, r2
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff ff5d 	bl	800138c <__NVIC_SetPriority>
}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b004      	add	sp, #16
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff ffbf 	bl	8001468 <SysTick_Config>
 80014ea:	0003      	movs	r3, r0
}
 80014ec:	0018      	movs	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b002      	add	sp, #8
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	e14d      	b.n	80017a0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	4091      	lsls	r1, r2
 800150e:	000a      	movs	r2, r1
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d100      	bne.n	800151c <HAL_GPIO_Init+0x28>
 800151a:	e13e      	b.n	800179a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2203      	movs	r2, #3
 8001522:	4013      	ands	r3, r2
 8001524:	2b01      	cmp	r3, #1
 8001526:	d005      	beq.n	8001534 <HAL_GPIO_Init+0x40>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2203      	movs	r2, #3
 800152e:	4013      	ands	r3, r2
 8001530:	2b02      	cmp	r3, #2
 8001532:	d130      	bne.n	8001596 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	409a      	lsls	r2, r3
 8001542:	0013      	movs	r3, r2
 8001544:	43da      	mvns	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	409a      	lsls	r2, r3
 8001556:	0013      	movs	r3, r2
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800156a:	2201      	movs	r2, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
 8001570:	0013      	movs	r3, r2
 8001572:	43da      	mvns	r2, r3
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	2201      	movs	r2, #1
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2203      	movs	r2, #3
 800159c:	4013      	ands	r3, r2
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d017      	beq.n	80015d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	43da      	mvns	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	409a      	lsls	r2, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2203      	movs	r2, #3
 80015d8:	4013      	ands	r3, r2
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d123      	bne.n	8001626 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	08da      	lsrs	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	58d3      	ldr	r3, [r2, r3]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2207      	movs	r2, #7
 80015f0:	4013      	ands	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	220f      	movs	r2, #15
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2107      	movs	r1, #7
 800160a:	400b      	ands	r3, r1
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	08da      	lsrs	r2, r3, #3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3208      	adds	r2, #8
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	6939      	ldr	r1, [r7, #16]
 8001624:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	43da      	mvns	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2203      	movs	r2, #3
 8001644:	401a      	ands	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	23c0      	movs	r3, #192	; 0xc0
 8001660:	029b      	lsls	r3, r3, #10
 8001662:	4013      	ands	r3, r2
 8001664:	d100      	bne.n	8001668 <HAL_GPIO_Init+0x174>
 8001666:	e098      	b.n	800179a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001668:	4a53      	ldr	r2, [pc, #332]	; (80017b8 <HAL_GPIO_Init+0x2c4>)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3318      	adds	r3, #24
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	589b      	ldr	r3, [r3, r2]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2203      	movs	r2, #3
 800167a:	4013      	ands	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	220f      	movs	r2, #15
 8001680:	409a      	lsls	r2, r3
 8001682:	0013      	movs	r3, r2
 8001684:	43da      	mvns	r2, r3
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	23a0      	movs	r3, #160	; 0xa0
 8001690:	05db      	lsls	r3, r3, #23
 8001692:	429a      	cmp	r2, r3
 8001694:	d019      	beq.n	80016ca <HAL_GPIO_Init+0x1d6>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a48      	ldr	r2, [pc, #288]	; (80017bc <HAL_GPIO_Init+0x2c8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0x1d2>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a47      	ldr	r2, [pc, #284]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00d      	beq.n	80016c2 <HAL_GPIO_Init+0x1ce>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a46      	ldr	r2, [pc, #280]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <HAL_GPIO_Init+0x1ca>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a45      	ldr	r2, [pc, #276]	; (80017c8 <HAL_GPIO_Init+0x2d4>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_GPIO_Init+0x1c6>
 80016b6:	2304      	movs	r3, #4
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x1d8>
 80016ba:	2305      	movs	r3, #5
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x1d8>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x1d8>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x1d8>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x1d8>
 80016ca:	2300      	movs	r3, #0
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	2103      	movs	r1, #3
 80016d0:	400a      	ands	r2, r1
 80016d2:	00d2      	lsls	r2, r2, #3
 80016d4:	4093      	lsls	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80016dc:	4936      	ldr	r1, [pc, #216]	; (80017b8 <HAL_GPIO_Init+0x2c4>)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3318      	adds	r3, #24
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_GPIO_Init+0x2c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43da      	mvns	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	035b      	lsls	r3, r3, #13
 8001702:	4013      	ands	r3, r2
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <HAL_GPIO_Init+0x2c4>)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001714:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <HAL_GPIO_Init+0x2c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43da      	mvns	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	039b      	lsls	r3, r3, #14
 800172c:	4013      	ands	r3, r2
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001738:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <HAL_GPIO_Init+0x2c4>)
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800173e:	4a1e      	ldr	r2, [pc, #120]	; (80017b8 <HAL_GPIO_Init+0x2c4>)
 8001740:	2384      	movs	r3, #132	; 0x84
 8001742:	58d3      	ldr	r3, [r2, r3]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	43da      	mvns	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	029b      	lsls	r3, r3, #10
 8001758:	4013      	ands	r3, r2
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001764:	4914      	ldr	r1, [pc, #80]	; (80017b8 <HAL_GPIO_Init+0x2c4>)
 8001766:	2284      	movs	r2, #132	; 0x84
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800176c:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <HAL_GPIO_Init+0x2c4>)
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	58d3      	ldr	r3, [r2, r3]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	43da      	mvns	r2, r3
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	025b      	lsls	r3, r3, #9
 8001786:	4013      	ands	r3, r2
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001792:	4909      	ldr	r1, [pc, #36]	; (80017b8 <HAL_GPIO_Init+0x2c4>)
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	40da      	lsrs	r2, r3
 80017a8:	1e13      	subs	r3, r2, #0
 80017aa:	d000      	beq.n	80017ae <HAL_GPIO_Init+0x2ba>
 80017ac:	e6aa      	b.n	8001504 <HAL_GPIO_Init+0x10>
  }
}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b006      	add	sp, #24
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021800 	.word	0x40021800
 80017bc:	50000400 	.word	0x50000400
 80017c0:	50000800 	.word	0x50000800
 80017c4:	50000c00 	.word	0x50000c00
 80017c8:	50001000 	.word	0x50001000

080017cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	0008      	movs	r0, r1
 80017d6:	0011      	movs	r1, r2
 80017d8:	1cbb      	adds	r3, r7, #2
 80017da:	1c02      	adds	r2, r0, #0
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	1c7b      	adds	r3, r7, #1
 80017e0:	1c0a      	adds	r2, r1, #0
 80017e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e4:	1c7b      	adds	r3, r7, #1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ec:	1cbb      	adds	r3, r7, #2
 80017ee:	881a      	ldrh	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017f6:	1cbb      	adds	r3, r7, #2
 80017f8:	881a      	ldrh	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	b002      	add	sp, #8
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e082      	b.n	8001920 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2241      	movs	r2, #65	; 0x41
 800181e:	5c9b      	ldrb	r3, [r3, r2]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d107      	bne.n	8001836 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2240      	movs	r2, #64	; 0x40
 800182a:	2100      	movs	r1, #0
 800182c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff fbe3 	bl	8000ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2241      	movs	r2, #65	; 0x41
 800183a:	2124      	movs	r1, #36	; 0x24
 800183c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2101      	movs	r1, #1
 800184a:	438a      	bics	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4934      	ldr	r1, [pc, #208]	; (8001928 <HAL_I2C_Init+0x120>)
 8001858:	400a      	ands	r2, r1
 800185a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4931      	ldr	r1, [pc, #196]	; (800192c <HAL_I2C_Init+0x124>)
 8001868:	400a      	ands	r2, r1
 800186a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d108      	bne.n	8001886 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0209      	lsls	r1, r1, #8
 8001880:	430a      	orrs	r2, r1
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	e007      	b.n	8001896 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2184      	movs	r1, #132	; 0x84
 8001890:	0209      	lsls	r1, r1, #8
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d104      	bne.n	80018a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	491f      	ldr	r1, [pc, #124]	; (8001930 <HAL_I2C_Init+0x128>)
 80018b4:	430a      	orrs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	491a      	ldr	r1, [pc, #104]	; (800192c <HAL_I2C_Init+0x124>)
 80018c4:	400a      	ands	r2, r1
 80018c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69d9      	ldr	r1, [r3, #28]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1a      	ldr	r2, [r3, #32]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2241      	movs	r2, #65	; 0x41
 800190c:	2120      	movs	r1, #32
 800190e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2242      	movs	r2, #66	; 0x42
 800191a:	2100      	movs	r1, #0
 800191c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	b002      	add	sp, #8
 8001926:	bd80      	pop	{r7, pc}
 8001928:	f0ffffff 	.word	0xf0ffffff
 800192c:	ffff7fff 	.word	0xffff7fff
 8001930:	02008000 	.word	0x02008000

08001934 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af02      	add	r7, sp, #8
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	0008      	movs	r0, r1
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	0019      	movs	r1, r3
 8001942:	230a      	movs	r3, #10
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	1c02      	adds	r2, r0, #0
 8001948:	801a      	strh	r2, [r3, #0]
 800194a:	2308      	movs	r3, #8
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	1c0a      	adds	r2, r1, #0
 8001950:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2241      	movs	r2, #65	; 0x41
 8001956:	5c9b      	ldrb	r3, [r3, r2]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b20      	cmp	r3, #32
 800195c:	d000      	beq.n	8001960 <HAL_I2C_Master_Transmit+0x2c>
 800195e:	e0e7      	b.n	8001b30 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2240      	movs	r2, #64	; 0x40
 8001964:	5c9b      	ldrb	r3, [r3, r2]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_I2C_Master_Transmit+0x3a>
 800196a:	2302      	movs	r3, #2
 800196c:	e0e1      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1fe>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2240      	movs	r2, #64	; 0x40
 8001972:	2101      	movs	r1, #1
 8001974:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001976:	f7ff fcc5 	bl	8001304 <HAL_GetTick>
 800197a:	0003      	movs	r3, r0
 800197c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	0219      	lsls	r1, r3, #8
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2319      	movs	r3, #25
 800198a:	2201      	movs	r2, #1
 800198c:	f000 fa16 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001990:	1e03      	subs	r3, r0, #0
 8001992:	d001      	beq.n	8001998 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0cc      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2241      	movs	r2, #65	; 0x41
 800199c:	2121      	movs	r1, #33	; 0x21
 800199e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2242      	movs	r2, #66	; 0x42
 80019a4:	2110      	movs	r1, #16
 80019a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2208      	movs	r2, #8
 80019b8:	18ba      	adds	r2, r7, r2
 80019ba:	8812      	ldrh	r2, [r2, #0]
 80019bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	2bff      	cmp	r3, #255	; 0xff
 80019cc:	d911      	bls.n	80019f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	22ff      	movs	r2, #255	; 0xff
 80019d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	045c      	lsls	r4, r3, #17
 80019de:	230a      	movs	r3, #10
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	8819      	ldrh	r1, [r3, #0]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	4b55      	ldr	r3, [pc, #340]	; (8001b3c <HAL_I2C_Master_Transmit+0x208>)
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	0023      	movs	r3, r4
 80019ec:	f000 fba0 	bl	8002130 <I2C_TransferConfig>
 80019f0:	e075      	b.n	8001ade <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	049c      	lsls	r4, r3, #18
 8001a06:	230a      	movs	r3, #10
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	8819      	ldrh	r1, [r3, #0]
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	4b4b      	ldr	r3, [pc, #300]	; (8001b3c <HAL_I2C_Master_Transmit+0x208>)
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	0023      	movs	r3, r4
 8001a14:	f000 fb8c 	bl	8002130 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a18:	e061      	b.n	8001ade <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f000 fa0a 	bl	8001e3a <I2C_WaitOnTXISFlagUntilTimeout>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e081      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	781a      	ldrb	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d03a      	beq.n	8001ade <HAL_I2C_Master_Transmit+0x1aa>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d136      	bne.n	8001ade <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	0013      	movs	r3, r2
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2180      	movs	r1, #128	; 0x80
 8001a7e:	f000 f99d 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001a82:	1e03      	subs	r3, r0, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e053      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	2bff      	cmp	r3, #255	; 0xff
 8001a92:	d911      	bls.n	8001ab8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	22ff      	movs	r2, #255	; 0xff
 8001a98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	045c      	lsls	r4, r3, #17
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	8819      	ldrh	r1, [r3, #0]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	2300      	movs	r3, #0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	0023      	movs	r3, r4
 8001ab2:	f000 fb3d 	bl	8002130 <I2C_TransferConfig>
 8001ab6:	e012      	b.n	8001ade <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	049c      	lsls	r4, r3, #18
 8001acc:	230a      	movs	r3, #10
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	8819      	ldrh	r1, [r3, #0]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	0023      	movs	r3, r4
 8001ada:	f000 fb29 	bl	8002130 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d198      	bne.n	8001a1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	0018      	movs	r0, r3
 8001af0:	f000 f9e2 	bl	8001eb8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001af4:	1e03      	subs	r3, r0, #0
 8001af6:	d001      	beq.n	8001afc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e01a      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2220      	movs	r2, #32
 8001b02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	490c      	ldr	r1, [pc, #48]	; (8001b40 <HAL_I2C_Master_Transmit+0x20c>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2241      	movs	r2, #65	; 0x41
 8001b18:	2120      	movs	r1, #32
 8001b1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2242      	movs	r2, #66	; 0x42
 8001b20:	2100      	movs	r1, #0
 8001b22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2240      	movs	r2, #64	; 0x40
 8001b28:	2100      	movs	r1, #0
 8001b2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e000      	b.n	8001b32 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001b30:	2302      	movs	r3, #2
  }
}
 8001b32:	0018      	movs	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b007      	add	sp, #28
 8001b38:	bd90      	pop	{r4, r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	80002000 	.word	0x80002000
 8001b40:	fe00e800 	.word	0xfe00e800

08001b44 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	230a      	movs	r3, #10
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	1c0a      	adds	r2, r1, #0
 8001b56:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2241      	movs	r2, #65	; 0x41
 8001b60:	5c9b      	ldrb	r3, [r3, r2]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b20      	cmp	r3, #32
 8001b66:	d000      	beq.n	8001b6a <HAL_I2C_IsDeviceReady+0x26>
 8001b68:	e0fe      	b.n	8001d68 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699a      	ldr	r2, [r3, #24]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	401a      	ands	r2, r3
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d101      	bne.n	8001b82 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e0f3      	b.n	8001d6a <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2240      	movs	r2, #64	; 0x40
 8001b86:	5c9b      	ldrb	r3, [r3, r2]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_I2C_IsDeviceReady+0x4c>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e0ec      	b.n	8001d6a <HAL_I2C_IsDeviceReady+0x226>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2240      	movs	r2, #64	; 0x40
 8001b94:	2101      	movs	r1, #1
 8001b96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2241      	movs	r2, #65	; 0x41
 8001b9c:	2124      	movs	r1, #36	; 0x24
 8001b9e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d107      	bne.n	8001bbe <HAL_I2C_IsDeviceReady+0x7a>
 8001bae:	230a      	movs	r3, #10
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	059b      	lsls	r3, r3, #22
 8001bb6:	0d9b      	lsrs	r3, r3, #22
 8001bb8:	4a6e      	ldr	r2, [pc, #440]	; (8001d74 <HAL_I2C_IsDeviceReady+0x230>)
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	e007      	b.n	8001bce <HAL_I2C_IsDeviceReady+0x8a>
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	059b      	lsls	r3, r3, #22
 8001bc6:	0d9b      	lsrs	r3, r3, #22
 8001bc8:	22a0      	movs	r2, #160	; 0xa0
 8001bca:	0192      	lsls	r2, r2, #6
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fb96 	bl	8001304 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2220      	movs	r2, #32
 8001be4:	4013      	ands	r3, r2
 8001be6:	3b20      	subs	r3, #32
 8001be8:	425a      	negs	r2, r3
 8001bea:	4153      	adcs	r3, r2
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	231f      	movs	r3, #31
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	3b10      	subs	r3, #16
 8001c00:	425a      	negs	r2, r3
 8001c02:	4153      	adcs	r3, r2
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	231e      	movs	r3, #30
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001c0c:	e035      	b.n	8001c7a <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	d01a      	beq.n	8001c4a <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c14:	f7ff fb76 	bl	8001304 <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d302      	bcc.n	8001c2a <HAL_I2C_IsDeviceReady+0xe6>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2241      	movs	r2, #65	; 0x41
 8001c2e:	2120      	movs	r1, #32
 8001c30:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c36:	2220      	movs	r2, #32
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2240      	movs	r2, #64	; 0x40
 8001c42:	2100      	movs	r1, #0
 8001c44:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e08f      	b.n	8001d6a <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2220      	movs	r2, #32
 8001c52:	4013      	ands	r3, r2
 8001c54:	3b20      	subs	r3, #32
 8001c56:	425a      	negs	r2, r3
 8001c58:	4153      	adcs	r3, r2
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	231f      	movs	r3, #31
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2210      	movs	r2, #16
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	3b10      	subs	r3, #16
 8001c6e:	425a      	negs	r2, r3
 8001c70:	4153      	adcs	r3, r2
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	231e      	movs	r3, #30
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001c7a:	231f      	movs	r3, #31
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d104      	bne.n	8001c8e <HAL_I2C_IsDeviceReady+0x14a>
 8001c84:	231e      	movs	r3, #30
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0bf      	beq.n	8001c0e <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2210      	movs	r2, #16
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b10      	cmp	r3, #16
 8001c9a:	d01a      	beq.n	8001cd2 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2120      	movs	r1, #32
 8001caa:	f000 f887 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001cae:	1e03      	subs	r3, r0, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e059      	b.n	8001d6a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2241      	movs	r2, #65	; 0x41
 8001cc2:	2120      	movs	r1, #32
 8001cc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2240      	movs	r2, #64	; 0x40
 8001cca:	2100      	movs	r1, #0
 8001ccc:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e04b      	b.n	8001d6a <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	0013      	movs	r3, r2
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2120      	movs	r1, #32
 8001ce0:	f000 f86c 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001ce4:	1e03      	subs	r3, r0, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e03e      	b.n	8001d6a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d119      	bne.n	8001d38 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2180      	movs	r1, #128	; 0x80
 8001d10:	01c9      	lsls	r1, r1, #7
 8001d12:	430a      	orrs	r2, r1
 8001d14:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	0013      	movs	r3, r2
 8001d20:	2200      	movs	r2, #0
 8001d22:	2120      	movs	r1, #32
 8001d24:	f000 f84a 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001d28:	1e03      	subs	r3, r0, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e01c      	b.n	8001d6a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2220      	movs	r2, #32
 8001d36:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d900      	bls.n	8001d48 <HAL_I2C_IsDeviceReady+0x204>
 8001d46:	e72e      	b.n	8001ba6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2241      	movs	r2, #65	; 0x41
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	2220      	movs	r2, #32
 8001d56:	431a      	orrs	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2240      	movs	r2, #64	; 0x40
 8001d60:	2100      	movs	r1, #0
 8001d62:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
  }
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b008      	add	sp, #32
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	02002000 	.word	0x02002000

08001d78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2202      	movs	r2, #2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d103      	bne.n	8001d96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d007      	beq.n	8001db4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699a      	ldr	r2, [r3, #24]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2101      	movs	r1, #1
 8001db0:	430a      	orrs	r2, r1
 8001db2:	619a      	str	r2, [r3, #24]
  }
}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	1dfb      	adds	r3, r7, #7
 8001dca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dcc:	e021      	b.n	8001e12 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	d01e      	beq.n	8001e12 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd4:	f7ff fa96 	bl	8001304 <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d302      	bcc.n	8001dea <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d113      	bne.n	8001e12 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	2220      	movs	r2, #32
 8001df0:	431a      	orrs	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2241      	movs	r2, #65	; 0x41
 8001dfa:	2120      	movs	r1, #32
 8001dfc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2242      	movs	r2, #66	; 0x42
 8001e02:	2100      	movs	r1, #0
 8001e04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2240      	movs	r2, #64	; 0x40
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00f      	b.n	8001e32 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	425a      	negs	r2, r3
 8001e22:	4153      	adcs	r3, r2
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	001a      	movs	r2, r3
 8001e28:	1dfb      	adds	r3, r7, #7
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d0ce      	beq.n	8001dce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	0018      	movs	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b004      	add	sp, #16
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e46:	e02b      	b.n	8001ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f000 f86e 	bl	8001f30 <I2C_IsErrorOccurred>
 8001e54:	1e03      	subs	r3, r0, #0
 8001e56:	d001      	beq.n	8001e5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e029      	b.n	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	d01e      	beq.n	8001ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e62:	f7ff fa4f 	bl	8001304 <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d302      	bcc.n	8001e78 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d113      	bne.n	8001ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2241      	movs	r2, #65	; 0x41
 8001e88:	2120      	movs	r1, #32
 8001e8a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2242      	movs	r2, #66	; 0x42
 8001e90:	2100      	movs	r1, #0
 8001e92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2240      	movs	r2, #64	; 0x40
 8001e98:	2100      	movs	r1, #0
 8001e9a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e007      	b.n	8001eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d1cc      	bne.n	8001e48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b004      	add	sp, #16
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ec4:	e028      	b.n	8001f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f000 f82f 	bl	8001f30 <I2C_IsErrorOccurred>
 8001ed2:	1e03      	subs	r3, r0, #0
 8001ed4:	d001      	beq.n	8001eda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e026      	b.n	8001f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eda:	f7ff fa13 	bl	8001304 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d302      	bcc.n	8001ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d113      	bne.n	8001f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2241      	movs	r2, #65	; 0x41
 8001f00:	2120      	movs	r1, #32
 8001f02:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2242      	movs	r2, #66	; 0x42
 8001f08:	2100      	movs	r1, #0
 8001f0a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2240      	movs	r2, #64	; 0x40
 8001f10:	2100      	movs	r1, #0
 8001f12:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e007      	b.n	8001f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d1cf      	bne.n	8001ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b08b      	sub	sp, #44	; 0x2c
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3c:	2327      	movs	r3, #39	; 0x27
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2210      	movs	r2, #16
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d100      	bne.n	8001f5e <I2C_IsErrorOccurred+0x2e>
 8001f5c:	e082      	b.n	8002064 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2210      	movs	r2, #16
 8001f64:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f66:	e060      	b.n	800202a <I2C_IsErrorOccurred+0xfa>
 8001f68:	2427      	movs	r4, #39	; 0x27
 8001f6a:	193b      	adds	r3, r7, r4
 8001f6c:	193a      	adds	r2, r7, r4
 8001f6e:	7812      	ldrb	r2, [r2, #0]
 8001f70:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	3301      	adds	r3, #1
 8001f76:	d058      	beq.n	800202a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f78:	f7ff f9c4 	bl	8001304 <HAL_GetTick>
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d306      	bcc.n	8001f96 <I2C_IsErrorOccurred+0x66>
 8001f88:	193b      	adds	r3, r7, r4
 8001f8a:	193a      	adds	r2, r7, r4
 8001f8c:	7812      	ldrb	r2, [r2, #0]
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d149      	bne.n	800202a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	01db      	lsls	r3, r3, #7
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001fa4:	2013      	movs	r0, #19
 8001fa6:	183b      	adds	r3, r7, r0
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	2142      	movs	r1, #66	; 0x42
 8001fac:	5c52      	ldrb	r2, [r2, r1]
 8001fae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	401a      	ands	r2, r3
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d126      	bne.n	8002012 <I2C_IsErrorOccurred+0xe2>
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	01db      	lsls	r3, r3, #7
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d021      	beq.n	8002012 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001fce:	183b      	adds	r3, r7, r0
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	d01d      	beq.n	8002012 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2180      	movs	r1, #128	; 0x80
 8001fe2:	01c9      	lsls	r1, r1, #7
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001fe8:	f7ff f98c 	bl	8001304 <HAL_GetTick>
 8001fec:	0003      	movs	r3, r0
 8001fee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ff0:	e00f      	b.n	8002012 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ff2:	f7ff f987 	bl	8001304 <HAL_GetTick>
 8001ff6:	0002      	movs	r2, r0
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b19      	cmp	r3, #25
 8001ffe:	d908      	bls.n	8002012 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	2220      	movs	r2, #32
 8002004:	4313      	orrs	r3, r2
 8002006:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002008:	2327      	movs	r3, #39	; 0x27
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]

              break;
 8002010:	e00b      	b.n	800202a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2220      	movs	r2, #32
 800201a:	4013      	ands	r3, r2
 800201c:	2127      	movs	r1, #39	; 0x27
 800201e:	187a      	adds	r2, r7, r1
 8002020:	1879      	adds	r1, r7, r1
 8002022:	7809      	ldrb	r1, [r1, #0]
 8002024:	7011      	strb	r1, [r2, #0]
 8002026:	2b20      	cmp	r3, #32
 8002028:	d1e3      	bne.n	8001ff2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2220      	movs	r2, #32
 8002032:	4013      	ands	r3, r2
 8002034:	2b20      	cmp	r3, #32
 8002036:	d004      	beq.n	8002042 <I2C_IsErrorOccurred+0x112>
 8002038:	2327      	movs	r3, #39	; 0x27
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d092      	beq.n	8001f68 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002042:	2327      	movs	r3, #39	; 0x27
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2220      	movs	r2, #32
 8002052:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	2204      	movs	r2, #4
 8002058:	4313      	orrs	r3, r2
 800205a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800205c:	2327      	movs	r3, #39	; 0x27
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4013      	ands	r3, r2
 8002074:	d00c      	beq.n	8002090 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	2201      	movs	r2, #1
 800207a:	4313      	orrs	r3, r2
 800207c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	0052      	lsls	r2, r2, #1
 8002086:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002088:	2327      	movs	r3, #39	; 0x27
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4013      	ands	r3, r2
 8002098:	d00c      	beq.n	80020b4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	2208      	movs	r2, #8
 800209e:	4313      	orrs	r3, r2
 80020a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	00d2      	lsls	r2, r2, #3
 80020aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020ac:	2327      	movs	r3, #39	; 0x27
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4013      	ands	r3, r2
 80020bc:	d00c      	beq.n	80020d8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	2202      	movs	r2, #2
 80020c2:	4313      	orrs	r3, r2
 80020c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2280      	movs	r2, #128	; 0x80
 80020cc:	0092      	lsls	r2, r2, #2
 80020ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020d0:	2327      	movs	r3, #39	; 0x27
 80020d2:	18fb      	adds	r3, r7, r3
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80020d8:	2327      	movs	r3, #39	; 0x27
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d01d      	beq.n	800211e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7ff fe47 	bl	8001d78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	490d      	ldr	r1, [pc, #52]	; (800212c <I2C_IsErrorOccurred+0x1fc>)
 80020f6:	400a      	ands	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	431a      	orrs	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2241      	movs	r2, #65	; 0x41
 800210a:	2120      	movs	r1, #32
 800210c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2242      	movs	r2, #66	; 0x42
 8002112:	2100      	movs	r1, #0
 8002114:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2240      	movs	r2, #64	; 0x40
 800211a:	2100      	movs	r1, #0
 800211c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800211e:	2327      	movs	r3, #39	; 0x27
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	781b      	ldrb	r3, [r3, #0]
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	b00b      	add	sp, #44	; 0x2c
 800212a:	bd90      	pop	{r4, r7, pc}
 800212c:	fe00e800 	.word	0xfe00e800

08002130 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	0008      	movs	r0, r1
 800213a:	0011      	movs	r1, r2
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	240a      	movs	r4, #10
 8002140:	193b      	adds	r3, r7, r4
 8002142:	1c02      	adds	r2, r0, #0
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	2009      	movs	r0, #9
 8002148:	183b      	adds	r3, r7, r0
 800214a:	1c0a      	adds	r2, r1, #0
 800214c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800214e:	193b      	adds	r3, r7, r4
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	059b      	lsls	r3, r3, #22
 8002154:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002156:	183b      	adds	r3, r7, r0
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	0419      	lsls	r1, r3, #16
 800215c:	23ff      	movs	r3, #255	; 0xff
 800215e:	041b      	lsls	r3, r3, #16
 8002160:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002162:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216a:	4313      	orrs	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	085b      	lsrs	r3, r3, #1
 8002170:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800217a:	0d51      	lsrs	r1, r2, #21
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	00d2      	lsls	r2, r2, #3
 8002180:	400a      	ands	r2, r1
 8002182:	4907      	ldr	r1, [pc, #28]	; (80021a0 <I2C_TransferConfig+0x70>)
 8002184:	430a      	orrs	r2, r1
 8002186:	43d2      	mvns	r2, r2
 8002188:	401a      	ands	r2, r3
 800218a:	0011      	movs	r1, r2
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	430a      	orrs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b007      	add	sp, #28
 800219c:	bd90      	pop	{r4, r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	03ff63ff 	.word	0x03ff63ff

080021a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2241      	movs	r2, #65	; 0x41
 80021b2:	5c9b      	ldrb	r3, [r3, r2]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	d138      	bne.n	800222c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2240      	movs	r2, #64	; 0x40
 80021be:	5c9b      	ldrb	r3, [r3, r2]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e032      	b.n	800222e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2240      	movs	r2, #64	; 0x40
 80021cc:	2101      	movs	r1, #1
 80021ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2241      	movs	r2, #65	; 0x41
 80021d4:	2124      	movs	r1, #36	; 0x24
 80021d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2101      	movs	r1, #1
 80021e4:	438a      	bics	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4911      	ldr	r1, [pc, #68]	; (8002238 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80021f4:	400a      	ands	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6819      	ldr	r1, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2101      	movs	r1, #1
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2241      	movs	r2, #65	; 0x41
 800221c:	2120      	movs	r1, #32
 800221e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2240      	movs	r2, #64	; 0x40
 8002224:	2100      	movs	r1, #0
 8002226:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e000      	b.n	800222e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800222c:	2302      	movs	r3, #2
  }
}
 800222e:	0018      	movs	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	ffffefff 	.word	0xffffefff

0800223c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2241      	movs	r2, #65	; 0x41
 800224a:	5c9b      	ldrb	r3, [r3, r2]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b20      	cmp	r3, #32
 8002250:	d139      	bne.n	80022c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2240      	movs	r2, #64	; 0x40
 8002256:	5c9b      	ldrb	r3, [r3, r2]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800225c:	2302      	movs	r3, #2
 800225e:	e033      	b.n	80022c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2240      	movs	r2, #64	; 0x40
 8002264:	2101      	movs	r1, #1
 8002266:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2241      	movs	r2, #65	; 0x41
 800226c:	2124      	movs	r1, #36	; 0x24
 800226e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2101      	movs	r1, #1
 800227c:	438a      	bics	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800228c:	4013      	ands	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	021b      	lsls	r3, r3, #8
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2101      	movs	r1, #1
 80022ae:	430a      	orrs	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2241      	movs	r2, #65	; 0x41
 80022b6:	2120      	movs	r1, #32
 80022b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2240      	movs	r2, #64	; 0x40
 80022be:	2100      	movs	r1, #0
 80022c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022c6:	2302      	movs	r3, #2
  }
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b004      	add	sp, #16
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	fffff0ff 	.word	0xfffff0ff

080022d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a19      	ldr	r2, [pc, #100]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	0019      	movs	r1, r3
 80022e6:	4b17      	ldr	r3, [pc, #92]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d11f      	bne.n	8002338 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	0013      	movs	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	189b      	adds	r3, r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4912      	ldr	r1, [pc, #72]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002306:	0018      	movs	r0, r3
 8002308:	f7fd fefc 	bl	8000104 <__udivsi3>
 800230c:	0003      	movs	r3, r0
 800230e:	3301      	adds	r3, #1
 8002310:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002312:	e008      	b.n	8002326 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3b01      	subs	r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e001      	b.n	8002326 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e009      	b.n	800233a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	401a      	ands	r2, r3
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	429a      	cmp	r2, r3
 8002336:	d0ed      	beq.n	8002314 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b004      	add	sp, #16
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	40007000 	.word	0x40007000
 8002348:	fffff9ff 	.word	0xfffff9ff
 800234c:	20000008 	.word	0x20000008
 8002350:	000f4240 	.word	0x000f4240

08002354 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <LL_RCC_GetAPB1Prescaler+0x14>)
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	23e0      	movs	r3, #224	; 0xe0
 800235e:	01db      	lsls	r3, r3, #7
 8002360:	4013      	ands	r3, r2
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000

0800236c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	f000 fb50 	bl	8002a20 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	4013      	ands	r3, r2
 8002388:	d100      	bne.n	800238c <HAL_RCC_OscConfig+0x20>
 800238a:	e07c      	b.n	8002486 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238c:	4bc3      	ldr	r3, [pc, #780]	; (800269c <HAL_RCC_OscConfig+0x330>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2238      	movs	r2, #56	; 0x38
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002396:	4bc1      	ldr	r3, [pc, #772]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2203      	movs	r2, #3
 800239c:	4013      	ands	r3, r2
 800239e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b10      	cmp	r3, #16
 80023a4:	d102      	bne.n	80023ac <HAL_RCC_OscConfig+0x40>
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d002      	beq.n	80023b2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d10b      	bne.n	80023ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b2:	4bba      	ldr	r3, [pc, #744]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	029b      	lsls	r3, r3, #10
 80023ba:	4013      	ands	r3, r2
 80023bc:	d062      	beq.n	8002484 <HAL_RCC_OscConfig+0x118>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d15e      	bne.n	8002484 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e32a      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	025b      	lsls	r3, r3, #9
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_OscConfig+0x7a>
 80023d6:	4bb1      	ldr	r3, [pc, #708]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4bb0      	ldr	r3, [pc, #704]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80023dc:	2180      	movs	r1, #128	; 0x80
 80023de:	0249      	lsls	r1, r1, #9
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e020      	b.n	8002428 <HAL_RCC_OscConfig+0xbc>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	23a0      	movs	r3, #160	; 0xa0
 80023ec:	02db      	lsls	r3, r3, #11
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d10e      	bne.n	8002410 <HAL_RCC_OscConfig+0xa4>
 80023f2:	4baa      	ldr	r3, [pc, #680]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4ba9      	ldr	r3, [pc, #676]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80023f8:	2180      	movs	r1, #128	; 0x80
 80023fa:	02c9      	lsls	r1, r1, #11
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	4ba6      	ldr	r3, [pc, #664]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4ba5      	ldr	r3, [pc, #660]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	0249      	lsls	r1, r1, #9
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0xbc>
 8002410:	4ba2      	ldr	r3, [pc, #648]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4ba1      	ldr	r3, [pc, #644]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002416:	49a2      	ldr	r1, [pc, #648]	; (80026a0 <HAL_RCC_OscConfig+0x334>)
 8002418:	400a      	ands	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	4b9f      	ldr	r3, [pc, #636]	; (800269c <HAL_RCC_OscConfig+0x330>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b9e      	ldr	r3, [pc, #632]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002422:	49a0      	ldr	r1, [pc, #640]	; (80026a4 <HAL_RCC_OscConfig+0x338>)
 8002424:	400a      	ands	r2, r1
 8002426:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d014      	beq.n	800245a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe ff68 	bl	8001304 <HAL_GetTick>
 8002434:	0003      	movs	r3, r0
 8002436:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243a:	f7fe ff63 	bl	8001304 <HAL_GetTick>
 800243e:	0002      	movs	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e2e9      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244c:	4b93      	ldr	r3, [pc, #588]	; (800269c <HAL_RCC_OscConfig+0x330>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	029b      	lsls	r3, r3, #10
 8002454:	4013      	ands	r3, r2
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0xce>
 8002458:	e015      	b.n	8002486 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe ff53 	bl	8001304 <HAL_GetTick>
 800245e:	0003      	movs	r3, r0
 8002460:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002464:	f7fe ff4e 	bl	8001304 <HAL_GetTick>
 8002468:	0002      	movs	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e2d4      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002476:	4b89      	ldr	r3, [pc, #548]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	029b      	lsls	r3, r3, #10
 800247e:	4013      	ands	r3, r2
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0xf8>
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2202      	movs	r2, #2
 800248c:	4013      	ands	r3, r2
 800248e:	d100      	bne.n	8002492 <HAL_RCC_OscConfig+0x126>
 8002490:	e099      	b.n	80025c6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002492:	4b82      	ldr	r3, [pc, #520]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2238      	movs	r2, #56	; 0x38
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800249c:	4b7f      	ldr	r3, [pc, #508]	; (800269c <HAL_RCC_OscConfig+0x330>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2203      	movs	r2, #3
 80024a2:	4013      	ands	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d102      	bne.n	80024b2 <HAL_RCC_OscConfig+0x146>
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d002      	beq.n	80024b8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d135      	bne.n	8002524 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b8:	4b78      	ldr	r3, [pc, #480]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4013      	ands	r3, r2
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_OscConfig+0x164>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e2a7      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b72      	ldr	r3, [pc, #456]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4a74      	ldr	r2, [pc, #464]	; (80026a8 <HAL_RCC_OscConfig+0x33c>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	0019      	movs	r1, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	021a      	lsls	r2, r3, #8
 80024e0:	4b6e      	ldr	r3, [pc, #440]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80024e2:	430a      	orrs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d112      	bne.n	8002512 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024ec:	4b6b      	ldr	r3, [pc, #428]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a6e      	ldr	r2, [pc, #440]	; (80026ac <HAL_RCC_OscConfig+0x340>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	0019      	movs	r1, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691a      	ldr	r2, [r3, #16]
 80024fa:	4b68      	ldr	r3, [pc, #416]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002500:	4b66      	ldr	r3, [pc, #408]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	0adb      	lsrs	r3, r3, #11
 8002506:	2207      	movs	r2, #7
 8002508:	4013      	ands	r3, r2
 800250a:	4a69      	ldr	r2, [pc, #420]	; (80026b0 <HAL_RCC_OscConfig+0x344>)
 800250c:	40da      	lsrs	r2, r3
 800250e:	4b69      	ldr	r3, [pc, #420]	; (80026b4 <HAL_RCC_OscConfig+0x348>)
 8002510:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002512:	4b69      	ldr	r3, [pc, #420]	; (80026b8 <HAL_RCC_OscConfig+0x34c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	0018      	movs	r0, r3
 8002518:	f7fe fe98 	bl	800124c <HAL_InitTick>
 800251c:	1e03      	subs	r3, r0, #0
 800251e:	d051      	beq.n	80025c4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e27d      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d030      	beq.n	800258e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800252c:	4b5b      	ldr	r3, [pc, #364]	; (800269c <HAL_RCC_OscConfig+0x330>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a5e      	ldr	r2, [pc, #376]	; (80026ac <HAL_RCC_OscConfig+0x340>)
 8002532:	4013      	ands	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	4b58      	ldr	r3, [pc, #352]	; (800269c <HAL_RCC_OscConfig+0x330>)
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002540:	4b56      	ldr	r3, [pc, #344]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b55      	ldr	r3, [pc, #340]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002546:	2180      	movs	r1, #128	; 0x80
 8002548:	0049      	lsls	r1, r1, #1
 800254a:	430a      	orrs	r2, r1
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe fed9 	bl	8001304 <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002558:	f7fe fed4 	bl	8001304 <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e25a      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256a:	4b4c      	ldr	r3, [pc, #304]	; (800269c <HAL_RCC_OscConfig+0x330>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4013      	ands	r3, r2
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002576:	4b49      	ldr	r3, [pc, #292]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a4b      	ldr	r2, [pc, #300]	; (80026a8 <HAL_RCC_OscConfig+0x33c>)
 800257c:	4013      	ands	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	021a      	lsls	r2, r3, #8
 8002586:	4b45      	ldr	r3, [pc, #276]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002588:	430a      	orrs	r2, r1
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	e01b      	b.n	80025c6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800258e:	4b43      	ldr	r3, [pc, #268]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4b42      	ldr	r3, [pc, #264]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002594:	4949      	ldr	r1, [pc, #292]	; (80026bc <HAL_RCC_OscConfig+0x350>)
 8002596:	400a      	ands	r2, r1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe feb3 	bl	8001304 <HAL_GetTick>
 800259e:	0003      	movs	r3, r0
 80025a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a4:	f7fe feae 	bl	8001304 <HAL_GetTick>
 80025a8:	0002      	movs	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e234      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b6:	4b39      	ldr	r3, [pc, #228]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4013      	ands	r3, r2
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x238>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2208      	movs	r2, #8
 80025cc:	4013      	ands	r3, r2
 80025ce:	d047      	beq.n	8002660 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2238      	movs	r2, #56	; 0x38
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b18      	cmp	r3, #24
 80025da:	d10a      	bne.n	80025f2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80025dc:	4b2f      	ldr	r3, [pc, #188]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80025de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e0:	2202      	movs	r2, #2
 80025e2:	4013      	ands	r3, r2
 80025e4:	d03c      	beq.n	8002660 <HAL_RCC_OscConfig+0x2f4>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d138      	bne.n	8002660 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e216      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d019      	beq.n	800262e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80025fa:	4b28      	ldr	r3, [pc, #160]	; (800269c <HAL_RCC_OscConfig+0x330>)
 80025fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025fe:	4b27      	ldr	r3, [pc, #156]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002600:	2101      	movs	r1, #1
 8002602:	430a      	orrs	r2, r1
 8002604:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7fe fe7d 	bl	8001304 <HAL_GetTick>
 800260a:	0003      	movs	r3, r0
 800260c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002610:	f7fe fe78 	bl	8001304 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e1fe      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002622:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002626:	2202      	movs	r2, #2
 8002628:	4013      	ands	r3, r2
 800262a:	d0f1      	beq.n	8002610 <HAL_RCC_OscConfig+0x2a4>
 800262c:	e018      	b.n	8002660 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800262e:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002630:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002634:	2101      	movs	r1, #1
 8002636:	438a      	bics	r2, r1
 8002638:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263a:	f7fe fe63 	bl	8001304 <HAL_GetTick>
 800263e:	0003      	movs	r3, r0
 8002640:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002644:	f7fe fe5e 	bl	8001304 <HAL_GetTick>
 8002648:	0002      	movs	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1e4      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265a:	2202      	movs	r2, #2
 800265c:	4013      	ands	r3, r2
 800265e:	d1f1      	bne.n	8002644 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2204      	movs	r2, #4
 8002666:	4013      	ands	r3, r2
 8002668:	d100      	bne.n	800266c <HAL_RCC_OscConfig+0x300>
 800266a:	e0c7      	b.n	80027fc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266c:	231f      	movs	r3, #31
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2238      	movs	r2, #56	; 0x38
 800267a:	4013      	ands	r3, r2
 800267c:	2b20      	cmp	r3, #32
 800267e:	d11f      	bne.n	80026c0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_OscConfig+0x330>)
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	2202      	movs	r2, #2
 8002686:	4013      	ands	r3, r2
 8002688:	d100      	bne.n	800268c <HAL_RCC_OscConfig+0x320>
 800268a:	e0b7      	b.n	80027fc <HAL_RCC_OscConfig+0x490>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d000      	beq.n	8002696 <HAL_RCC_OscConfig+0x32a>
 8002694:	e0b2      	b.n	80027fc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e1c2      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	40021000 	.word	0x40021000
 80026a0:	fffeffff 	.word	0xfffeffff
 80026a4:	fffbffff 	.word	0xfffbffff
 80026a8:	ffff80ff 	.word	0xffff80ff
 80026ac:	ffffc7ff 	.word	0xffffc7ff
 80026b0:	00f42400 	.word	0x00f42400
 80026b4:	20000008 	.word	0x20000008
 80026b8:	2000000c 	.word	0x2000000c
 80026bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026c0:	4bb5      	ldr	r3, [pc, #724]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 80026c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	055b      	lsls	r3, r3, #21
 80026c8:	4013      	ands	r3, r2
 80026ca:	d101      	bne.n	80026d0 <HAL_RCC_OscConfig+0x364>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x366>
 80026d0:	2300      	movs	r3, #0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d011      	beq.n	80026fa <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	4bb0      	ldr	r3, [pc, #704]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 80026d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026da:	4baf      	ldr	r3, [pc, #700]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	0549      	lsls	r1, r1, #21
 80026e0:	430a      	orrs	r2, r1
 80026e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80026e4:	4bac      	ldr	r3, [pc, #688]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 80026e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	055b      	lsls	r3, r3, #21
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80026f2:	231f      	movs	r3, #31
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fa:	4ba8      	ldr	r3, [pc, #672]	; (800299c <HAL_RCC_OscConfig+0x630>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4013      	ands	r3, r2
 8002704:	d11a      	bne.n	800273c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002706:	4ba5      	ldr	r3, [pc, #660]	; (800299c <HAL_RCC_OscConfig+0x630>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4ba4      	ldr	r3, [pc, #656]	; (800299c <HAL_RCC_OscConfig+0x630>)
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	0049      	lsls	r1, r1, #1
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002714:	f7fe fdf6 	bl	8001304 <HAL_GetTick>
 8002718:	0003      	movs	r3, r0
 800271a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7fe fdf1 	bl	8001304 <HAL_GetTick>
 8002722:	0002      	movs	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e177      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002730:	4b9a      	ldr	r3, [pc, #616]	; (800299c <HAL_RCC_OscConfig+0x630>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4013      	ands	r3, r2
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x3e6>
 8002744:	4b94      	ldr	r3, [pc, #592]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002746:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002748:	4b93      	ldr	r3, [pc, #588]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 800274a:	2101      	movs	r1, #1
 800274c:	430a      	orrs	r2, r1
 800274e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002750:	e01c      	b.n	800278c <HAL_RCC_OscConfig+0x420>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x408>
 800275a:	4b8f      	ldr	r3, [pc, #572]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 800275c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800275e:	4b8e      	ldr	r3, [pc, #568]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002760:	2104      	movs	r1, #4
 8002762:	430a      	orrs	r2, r1
 8002764:	65da      	str	r2, [r3, #92]	; 0x5c
 8002766:	4b8c      	ldr	r3, [pc, #560]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002768:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800276a:	4b8b      	ldr	r3, [pc, #556]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 800276c:	2101      	movs	r1, #1
 800276e:	430a      	orrs	r2, r1
 8002770:	65da      	str	r2, [r3, #92]	; 0x5c
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0x420>
 8002774:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002776:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002778:	4b87      	ldr	r3, [pc, #540]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 800277a:	2101      	movs	r1, #1
 800277c:	438a      	bics	r2, r1
 800277e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002780:	4b85      	ldr	r3, [pc, #532]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002782:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002784:	4b84      	ldr	r3, [pc, #528]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002786:	2104      	movs	r1, #4
 8002788:	438a      	bics	r2, r1
 800278a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d014      	beq.n	80027be <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fdb6 	bl	8001304 <HAL_GetTick>
 8002798:	0003      	movs	r3, r0
 800279a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279c:	e009      	b.n	80027b2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe fdb1 	bl	8001304 <HAL_GetTick>
 80027a2:	0002      	movs	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	4a7d      	ldr	r2, [pc, #500]	; (80029a0 <HAL_RCC_OscConfig+0x634>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e136      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b2:	4b79      	ldr	r3, [pc, #484]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	2202      	movs	r2, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x432>
 80027bc:	e013      	b.n	80027e6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7fe fda1 	bl	8001304 <HAL_GetTick>
 80027c2:	0003      	movs	r3, r0
 80027c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027c6:	e009      	b.n	80027dc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe fd9c 	bl	8001304 <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	4a73      	ldr	r2, [pc, #460]	; (80029a0 <HAL_RCC_OscConfig+0x634>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e121      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027dc:	4b6e      	ldr	r3, [pc, #440]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	2202      	movs	r2, #2
 80027e2:	4013      	ands	r3, r2
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027e6:	231f      	movs	r3, #31
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027f0:	4b69      	ldr	r3, [pc, #420]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 80027f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027f4:	4b68      	ldr	r3, [pc, #416]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 80027f6:	496b      	ldr	r1, [pc, #428]	; (80029a4 <HAL_RCC_OscConfig+0x638>)
 80027f8:	400a      	ands	r2, r1
 80027fa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2220      	movs	r2, #32
 8002802:	4013      	ands	r3, r2
 8002804:	d039      	beq.n	800287a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d01b      	beq.n	8002846 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800280e:	4b62      	ldr	r3, [pc, #392]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b61      	ldr	r3, [pc, #388]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	03c9      	lsls	r1, r1, #15
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7fe fd72 	bl	8001304 <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002826:	f7fe fd6d 	bl	8001304 <HAL_GetTick>
 800282a:	0002      	movs	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e0f3      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002838:	4b57      	ldr	r3, [pc, #348]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	041b      	lsls	r3, r3, #16
 8002840:	4013      	ands	r3, r2
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x4ba>
 8002844:	e019      	b.n	800287a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002846:	4b54      	ldr	r3, [pc, #336]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4b53      	ldr	r3, [pc, #332]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 800284c:	4956      	ldr	r1, [pc, #344]	; (80029a8 <HAL_RCC_OscConfig+0x63c>)
 800284e:	400a      	ands	r2, r1
 8002850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002852:	f7fe fd57 	bl	8001304 <HAL_GetTick>
 8002856:	0003      	movs	r3, r0
 8002858:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800285c:	f7fe fd52 	bl	8001304 <HAL_GetTick>
 8002860:	0002      	movs	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0d8      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800286e:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	041b      	lsls	r3, r3, #16
 8002876:	4013      	ands	r3, r2
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d100      	bne.n	8002884 <HAL_RCC_OscConfig+0x518>
 8002882:	e0cc      	b.n	8002a1e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002884:	4b44      	ldr	r3, [pc, #272]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2238      	movs	r2, #56	; 0x38
 800288a:	4013      	ands	r3, r2
 800288c:	2b10      	cmp	r3, #16
 800288e:	d100      	bne.n	8002892 <HAL_RCC_OscConfig+0x526>
 8002890:	e07b      	b.n	800298a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d156      	bne.n	8002948 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 80028a0:	4942      	ldr	r1, [pc, #264]	; (80029ac <HAL_RCC_OscConfig+0x640>)
 80028a2:	400a      	ands	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe fd2d 	bl	8001304 <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7fe fd28 	bl	8001304 <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0ae      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c2:	4b35      	ldr	r3, [pc, #212]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	049b      	lsls	r3, r3, #18
 80028ca:	4013      	ands	r3, r2
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ce:	4b32      	ldr	r3, [pc, #200]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	4a37      	ldr	r2, [pc, #220]	; (80029b0 <HAL_RCC_OscConfig+0x644>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	0019      	movs	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	431a      	orrs	r2, r3
 80028fc:	4b26      	ldr	r3, [pc, #152]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 80028fe:	430a      	orrs	r2, r1
 8002900:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002902:	4b25      	ldr	r3, [pc, #148]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002908:	2180      	movs	r1, #128	; 0x80
 800290a:	0449      	lsls	r1, r1, #17
 800290c:	430a      	orrs	r2, r1
 800290e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	0549      	lsls	r1, r1, #21
 800291a:	430a      	orrs	r2, r1
 800291c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe fcf1 	bl	8001304 <HAL_GetTick>
 8002922:	0003      	movs	r3, r0
 8002924:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fcec 	bl	8001304 <HAL_GetTick>
 800292c:	0002      	movs	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e072      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293a:	4b17      	ldr	r3, [pc, #92]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	2380      	movs	r3, #128	; 0x80
 8002940:	049b      	lsls	r3, r3, #18
 8002942:	4013      	ands	r3, r2
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x5bc>
 8002946:	e06a      	b.n	8002a1e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002948:	4b13      	ldr	r3, [pc, #76]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 800294e:	4917      	ldr	r1, [pc, #92]	; (80029ac <HAL_RCC_OscConfig+0x640>)
 8002950:	400a      	ands	r2, r1
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7fe fcd6 	bl	8001304 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295e:	f7fe fcd1 	bl	8001304 <HAL_GetTick>
 8002962:	0002      	movs	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e057      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	049b      	lsls	r3, r3, #18
 8002978:	4013      	ands	r3, r2
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_OscConfig+0x62c>)
 8002982:	490c      	ldr	r1, [pc, #48]	; (80029b4 <HAL_RCC_OscConfig+0x648>)
 8002984:	400a      	ands	r2, r1
 8002986:	60da      	str	r2, [r3, #12]
 8002988:	e049      	b.n	8002a1e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d112      	bne.n	80029b8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e044      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	40021000 	.word	0x40021000
 800299c:	40007000 	.word	0x40007000
 80029a0:	00001388 	.word	0x00001388
 80029a4:	efffffff 	.word	0xefffffff
 80029a8:	ffbfffff 	.word	0xffbfffff
 80029ac:	feffffff 	.word	0xfeffffff
 80029b0:	11c1808c 	.word	0x11c1808c
 80029b4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80029b8:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_RCC_OscConfig+0x6bc>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2203      	movs	r2, #3
 80029c2:	401a      	ands	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d126      	bne.n	8002a1a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2270      	movs	r2, #112	; 0x70
 80029d0:	401a      	ands	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d11f      	bne.n	8002a1a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	23fe      	movs	r3, #254	; 0xfe
 80029de:	01db      	lsls	r3, r3, #7
 80029e0:	401a      	ands	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d116      	bne.n	8002a1a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	23f8      	movs	r3, #248	; 0xf8
 80029f0:	039b      	lsls	r3, r3, #14
 80029f2:	401a      	ands	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d10e      	bne.n	8002a1a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	23e0      	movs	r3, #224	; 0xe0
 8002a00:	051b      	lsls	r3, r3, #20
 8002a02:	401a      	ands	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	0f5b      	lsrs	r3, r3, #29
 8002a10:	075a      	lsls	r2, r3, #29
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b008      	add	sp, #32
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000

08002a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0e9      	b.n	8002c14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a40:	4b76      	ldr	r3, [pc, #472]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2207      	movs	r2, #7
 8002a46:	4013      	ands	r3, r2
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d91e      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b73      	ldr	r3, [pc, #460]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2207      	movs	r2, #7
 8002a54:	4393      	bics	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	4b70      	ldr	r3, [pc, #448]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a60:	f7fe fc50 	bl	8001304 <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a68:	e009      	b.n	8002a7e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6a:	f7fe fc4b 	bl	8001304 <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	4a6a      	ldr	r2, [pc, #424]	; (8002c20 <HAL_RCC_ClockConfig+0x1f4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0ca      	b.n	8002c14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a7e:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2207      	movs	r2, #7
 8002a84:	4013      	ands	r3, r2
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d1ee      	bne.n	8002a6a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2202      	movs	r2, #2
 8002a92:	4013      	ands	r3, r2
 8002a94:	d015      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d006      	beq.n	8002aae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002aa0:	4b60      	ldr	r3, [pc, #384]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	4b5f      	ldr	r3, [pc, #380]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002aa6:	21e0      	movs	r1, #224	; 0xe0
 8002aa8:	01c9      	lsls	r1, r1, #7
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aae:	4b5d      	ldr	r3, [pc, #372]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	4a5d      	ldr	r2, [pc, #372]	; (8002c28 <HAL_RCC_ClockConfig+0x1fc>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d057      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ad4:	4b53      	ldr	r3, [pc, #332]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	029b      	lsls	r3, r3, #10
 8002adc:	4013      	ands	r3, r2
 8002ade:	d12b      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e097      	b.n	8002c14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aec:	4b4d      	ldr	r3, [pc, #308]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	049b      	lsls	r3, r3, #18
 8002af4:	4013      	ands	r3, r2
 8002af6:	d11f      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e08b      	b.n	8002c14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b04:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d113      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e07f      	b.n	8002c14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b20:	2202      	movs	r2, #2
 8002b22:	4013      	ands	r3, r2
 8002b24:	d108      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e074      	b.n	8002c14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2e:	2202      	movs	r2, #2
 8002b30:	4013      	ands	r3, r2
 8002b32:	d101      	bne.n	8002b38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e06d      	b.n	8002c14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b38:	4b3a      	ldr	r3, [pc, #232]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2207      	movs	r2, #7
 8002b3e:	4393      	bics	r3, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4b37      	ldr	r3, [pc, #220]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fbda 	bl	8001304 <HAL_GetTick>
 8002b50:	0003      	movs	r3, r0
 8002b52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b54:	e009      	b.n	8002b6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b56:	f7fe fbd5 	bl	8001304 <HAL_GetTick>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	4a2f      	ldr	r2, [pc, #188]	; (8002c20 <HAL_RCC_ClockConfig+0x1f4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e054      	b.n	8002c14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	4b2e      	ldr	r3, [pc, #184]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2238      	movs	r2, #56	; 0x38
 8002b70:	401a      	ands	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d1ec      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2207      	movs	r2, #7
 8002b82:	4013      	ands	r3, r2
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d21e      	bcs.n	8002bc8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2207      	movs	r2, #7
 8002b90:	4393      	bics	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b9c:	f7fe fbb2 	bl	8001304 <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ba4:	e009      	b.n	8002bba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba6:	f7fe fbad 	bl	8001304 <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <HAL_RCC_ClockConfig+0x1f4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e02c      	b.n	8002c14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_RCC_ClockConfig+0x1f0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d1ee      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d009      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd2:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <HAL_RCC_ClockConfig+0x200>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	0019      	movs	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002be2:	430a      	orrs	r2, r1
 8002be4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002be6:	f000 f829 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8002bea:	0001      	movs	r1, r0
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_RCC_ClockConfig+0x1f8>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <HAL_RCC_ClockConfig+0x204>)
 8002bf8:	0092      	lsls	r2, r2, #2
 8002bfa:	58d3      	ldr	r3, [r2, r3]
 8002bfc:	221f      	movs	r2, #31
 8002bfe:	4013      	ands	r3, r2
 8002c00:	000a      	movs	r2, r1
 8002c02:	40da      	lsrs	r2, r3
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_ClockConfig+0x208>)
 8002c06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_ClockConfig+0x20c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f7fe fb1d 	bl	800124c <HAL_InitTick>
 8002c12:	0003      	movs	r3, r0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b004      	add	sp, #16
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40022000 	.word	0x40022000
 8002c20:	00001388 	.word	0x00001388
 8002c24:	40021000 	.word	0x40021000
 8002c28:	fffff0ff 	.word	0xfffff0ff
 8002c2c:	ffff8fff 	.word	0xffff8fff
 8002c30:	08004cf0 	.word	0x08004cf0
 8002c34:	20000008 	.word	0x20000008
 8002c38:	2000000c 	.word	0x2000000c

08002c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c42:	4b3c      	ldr	r3, [pc, #240]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2238      	movs	r2, #56	; 0x38
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d10f      	bne.n	8002c6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c4c:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0adb      	lsrs	r3, r3, #11
 8002c52:	2207      	movs	r2, #7
 8002c54:	4013      	ands	r3, r2
 8002c56:	2201      	movs	r2, #1
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	0013      	movs	r3, r2
 8002c5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c5e:	6839      	ldr	r1, [r7, #0]
 8002c60:	4835      	ldr	r0, [pc, #212]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c62:	f7fd fa4f 	bl	8000104 <__udivsi3>
 8002c66:	0003      	movs	r3, r0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	e05d      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c6c:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2238      	movs	r2, #56	; 0x38
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c78:	4b30      	ldr	r3, [pc, #192]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x100>)
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	e054      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c7e:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2238      	movs	r2, #56	; 0x38
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	d138      	bne.n	8002cfc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c8a:	4b2a      	ldr	r3, [pc, #168]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2203      	movs	r2, #3
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c94:	4b27      	ldr	r3, [pc, #156]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	2207      	movs	r2, #7
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d10d      	bne.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	4824      	ldr	r0, [pc, #144]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x100>)
 8002cac:	f7fd fa2a 	bl	8000104 <__udivsi3>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	0a1b      	lsrs	r3, r3, #8
 8002cba:	227f      	movs	r2, #127	; 0x7f
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	434b      	muls	r3, r1
 8002cc0:	617b      	str	r3, [r7, #20]
        break;
 8002cc2:	e00d      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	481c      	ldr	r0, [pc, #112]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cc8:	f7fd fa1c 	bl	8000104 <__udivsi3>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	0019      	movs	r1, r3
 8002cd0:	4b18      	ldr	r3, [pc, #96]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	227f      	movs	r2, #127	; 0x7f
 8002cd8:	4013      	ands	r3, r2
 8002cda:	434b      	muls	r3, r1
 8002cdc:	617b      	str	r3, [r7, #20]
        break;
 8002cde:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	0f5b      	lsrs	r3, r3, #29
 8002ce6:	2207      	movs	r2, #7
 8002ce8:	4013      	ands	r3, r2
 8002cea:	3301      	adds	r3, #1
 8002cec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	6978      	ldr	r0, [r7, #20]
 8002cf2:	f7fd fa07 	bl	8000104 <__udivsi3>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	e015      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2238      	movs	r2, #56	; 0x38
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d103      	bne.n	8002d10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d10:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2238      	movs	r2, #56	; 0x38
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b18      	cmp	r3, #24
 8002d1a:	d103      	bne.n	8002d24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d1c:	23fa      	movs	r3, #250	; 0xfa
 8002d1e:	01db      	lsls	r3, r3, #7
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	e001      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d28:	693b      	ldr	r3, [r7, #16]
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b006      	add	sp, #24
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	40021000 	.word	0x40021000
 8002d38:	00f42400 	.word	0x00f42400
 8002d3c:	007a1200 	.word	0x007a1200

08002d40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d44:	4b02      	ldr	r3, [pc, #8]	; (8002d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	20000008 	.word	0x20000008

08002d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d54:	b5b0      	push	{r4, r5, r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d58:	f7ff fff2 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d5c:	0004      	movs	r4, r0
 8002d5e:	f7ff faf9 	bl	8002354 <LL_RCC_GetAPB1Prescaler>
 8002d62:	0003      	movs	r3, r0
 8002d64:	0b1a      	lsrs	r2, r3, #12
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d68:	0092      	lsls	r2, r2, #2
 8002d6a:	58d3      	ldr	r3, [r2, r3]
 8002d6c:	221f      	movs	r2, #31
 8002d6e:	4013      	ands	r3, r2
 8002d70:	40dc      	lsrs	r4, r3
 8002d72:	0023      	movs	r3, r4
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	08004d30 	.word	0x08004d30

08002d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d88:	2313      	movs	r3, #19
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d90:	2312      	movs	r3, #18
 8002d92:	18fb      	adds	r3, r7, r3
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	029b      	lsls	r3, r3, #10
 8002da0:	4013      	ands	r3, r2
 8002da2:	d100      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002da4:	e0ad      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da6:	2011      	movs	r0, #17
 8002da8:	183b      	adds	r3, r7, r0
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b47      	ldr	r3, [pc, #284]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	055b      	lsls	r3, r3, #21
 8002db6:	4013      	ands	r3, r2
 8002db8:	d110      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4b44      	ldr	r3, [pc, #272]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dbe:	4b43      	ldr	r3, [pc, #268]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	0549      	lsls	r1, r1, #21
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dc8:	4b40      	ldr	r3, [pc, #256]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	055b      	lsls	r3, r3, #21
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd6:	183b      	adds	r3, r7, r0
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ddc:	4b3c      	ldr	r3, [pc, #240]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b3b      	ldr	r3, [pc, #236]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002de2:	2180      	movs	r1, #128	; 0x80
 8002de4:	0049      	lsls	r1, r1, #1
 8002de6:	430a      	orrs	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dea:	f7fe fa8b 	bl	8001304 <HAL_GetTick>
 8002dee:	0003      	movs	r3, r0
 8002df0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002df2:	e00b      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df4:	f7fe fa86 	bl	8001304 <HAL_GetTick>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d904      	bls.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e02:	2313      	movs	r3, #19
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	2203      	movs	r2, #3
 8002e08:	701a      	strb	r2, [r3, #0]
        break;
 8002e0a:	e005      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e0c:	4b30      	ldr	r3, [pc, #192]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4013      	ands	r3, r2
 8002e16:	d0ed      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e18:	2313      	movs	r3, #19
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d15e      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e26:	23c0      	movs	r3, #192	; 0xc0
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d019      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d014      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e3e:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e42:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e48:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	0249      	lsls	r1, r1, #9
 8002e52:	430a      	orrs	r2, r1
 8002e54:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e5c:	491e      	ldr	r1, [pc, #120]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002e5e:	400a      	ands	r2, r1
 8002e60:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e62:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d016      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7fe fa48 	bl	8001304 <HAL_GetTick>
 8002e74:	0003      	movs	r3, r0
 8002e76:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e78:	e00c      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe fa43 	bl	8001304 <HAL_GetTick>
 8002e7e:	0002      	movs	r2, r0
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	4a15      	ldr	r2, [pc, #84]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d904      	bls.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002e8a:	2313      	movs	r3, #19
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2203      	movs	r2, #3
 8002e90:	701a      	strb	r2, [r3, #0]
            break;
 8002e92:	e004      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e98:	2202      	movs	r2, #2
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d0ed      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002e9e:	2313      	movs	r3, #19
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ebc:	e016      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ebe:	2312      	movs	r3, #18
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	2213      	movs	r2, #19
 8002ec4:	18ba      	adds	r2, r7, r2
 8002ec6:	7812      	ldrb	r2, [r2, #0]
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e00f      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	fffffcff 	.word	0xfffffcff
 8002ed8:	fffeffff 	.word	0xfffeffff
 8002edc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	2312      	movs	r3, #18
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2213      	movs	r2, #19
 8002ee6:	18ba      	adds	r2, r7, r2
 8002ee8:	7812      	ldrb	r2, [r2, #0]
 8002eea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eec:	2311      	movs	r3, #17
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef6:	4bb6      	ldr	r3, [pc, #728]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002efa:	4bb5      	ldr	r3, [pc, #724]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002efc:	49b5      	ldr	r1, [pc, #724]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002efe:	400a      	ands	r2, r1
 8002f00:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2201      	movs	r2, #1
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f0c:	4bb0      	ldr	r3, [pc, #704]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f10:	2203      	movs	r2, #3
 8002f12:	4393      	bics	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	4bad      	ldr	r3, [pc, #692]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2202      	movs	r2, #2
 8002f26:	4013      	ands	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f2a:	4ba9      	ldr	r3, [pc, #676]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	220c      	movs	r2, #12
 8002f30:	4393      	bics	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	4ba5      	ldr	r3, [pc, #660]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2204      	movs	r2, #4
 8002f44:	4013      	ands	r3, r2
 8002f46:	d009      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f48:	4ba1      	ldr	r3, [pc, #644]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4c:	2230      	movs	r2, #48	; 0x30
 8002f4e:	4393      	bics	r3, r2
 8002f50:	0019      	movs	r1, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	4b9e      	ldr	r3, [pc, #632]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2210      	movs	r2, #16
 8002f62:	4013      	ands	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f66:	4b9a      	ldr	r3, [pc, #616]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	4a9b      	ldr	r2, [pc, #620]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	4b96      	ldr	r3, [pc, #600]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f76:	430a      	orrs	r2, r1
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	015b      	lsls	r3, r3, #5
 8002f82:	4013      	ands	r3, r2
 8002f84:	d009      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002f86:	4b92      	ldr	r3, [pc, #584]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	4a94      	ldr	r2, [pc, #592]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	4b8e      	ldr	r3, [pc, #568]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f96:	430a      	orrs	r2, r1
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d009      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fa6:	4b8a      	ldr	r3, [pc, #552]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	4a8d      	ldr	r2, [pc, #564]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	0019      	movs	r1, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb4:	4b86      	ldr	r3, [pc, #536]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fc6:	4b82      	ldr	r3, [pc, #520]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	4a86      	ldr	r2, [pc, #536]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	4b7e      	ldr	r3, [pc, #504]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fe4:	4b7a      	ldr	r3, [pc, #488]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe8:	4a7f      	ldr	r2, [pc, #508]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	4b77      	ldr	r3, [pc, #476]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2240      	movs	r2, #64	; 0x40
 8002ffe:	4013      	ands	r3, r2
 8003000:	d009      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003002:	4b73      	ldr	r3, [pc, #460]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	4a79      	ldr	r2, [pc, #484]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003008:	4013      	ands	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003012:	430a      	orrs	r2, r1
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	01db      	lsls	r3, r3, #7
 800301e:	4013      	ands	r3, r2
 8003020:	d015      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003022:	4b6b      	ldr	r3, [pc, #428]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	0899      	lsrs	r1, r3, #2
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800302e:	4b68      	ldr	r3, [pc, #416]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003030:	430a      	orrs	r2, r1
 8003032:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	05db      	lsls	r3, r3, #23
 800303c:	429a      	cmp	r2, r3
 800303e:	d106      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003040:	4b63      	ldr	r3, [pc, #396]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	4b62      	ldr	r3, [pc, #392]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	0249      	lsls	r1, r1, #9
 800304a:	430a      	orrs	r2, r1
 800304c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	031b      	lsls	r3, r3, #12
 8003056:	4013      	ands	r3, r2
 8003058:	d009      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800305a:	4b5d      	ldr	r3, [pc, #372]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	2240      	movs	r2, #64	; 0x40
 8003060:	4393      	bics	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003068:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800306a:	430a      	orrs	r2, r1
 800306c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	039b      	lsls	r3, r3, #14
 8003076:	4013      	ands	r3, r2
 8003078:	d016      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800307a:	4b55      	ldr	r3, [pc, #340]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	4a5c      	ldr	r2, [pc, #368]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003080:	4013      	ands	r3, r2
 8003082:	0019      	movs	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003088:	4b51      	ldr	r3, [pc, #324]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800308a:	430a      	orrs	r2, r1
 800308c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	03db      	lsls	r3, r3, #15
 8003096:	429a      	cmp	r2, r3
 8003098:	d106      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800309a:	4b4d      	ldr	r3, [pc, #308]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	4b4c      	ldr	r3, [pc, #304]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030a0:	2180      	movs	r1, #128	; 0x80
 80030a2:	0449      	lsls	r1, r1, #17
 80030a4:	430a      	orrs	r2, r1
 80030a6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	03db      	lsls	r3, r3, #15
 80030b0:	4013      	ands	r3, r2
 80030b2:	d016      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030b4:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	4a4e      	ldr	r2, [pc, #312]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	0019      	movs	r1, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c2:	4b43      	ldr	r3, [pc, #268]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030c4:	430a      	orrs	r2, r1
 80030c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	045b      	lsls	r3, r3, #17
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d106      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030d4:	4b3e      	ldr	r3, [pc, #248]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030da:	2180      	movs	r1, #128	; 0x80
 80030dc:	0449      	lsls	r1, r1, #17
 80030de:	430a      	orrs	r2, r1
 80030e0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	4013      	ands	r3, r2
 80030ec:	d014      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80030ee:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	2203      	movs	r2, #3
 80030f4:	4393      	bics	r3, r2
 80030f6:	0019      	movs	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1a      	ldr	r2, [r3, #32]
 80030fc:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030fe:	430a      	orrs	r2, r1
 8003100:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d106      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800310a:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	0249      	lsls	r1, r1, #9
 8003114:	430a      	orrs	r2, r1
 8003116:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	019b      	lsls	r3, r3, #6
 8003120:	4013      	ands	r3, r2
 8003122:	d014      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003124:	4b2a      	ldr	r3, [pc, #168]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	220c      	movs	r2, #12
 800312a:	4393      	bics	r3, r2
 800312c:	0019      	movs	r1, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003132:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003134:	430a      	orrs	r2, r1
 8003136:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2b04      	cmp	r3, #4
 800313e:	d106      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003140:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003146:	2180      	movs	r1, #128	; 0x80
 8003148:	0249      	lsls	r1, r1, #9
 800314a:	430a      	orrs	r2, r1
 800314c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	045b      	lsls	r3, r3, #17
 8003156:	4013      	ands	r3, r2
 8003158:	d016      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800315a:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	4a22      	ldr	r2, [pc, #136]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003160:	4013      	ands	r3, r2
 8003162:	0019      	movs	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800316a:	430a      	orrs	r2, r1
 800316c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	019b      	lsls	r3, r3, #6
 8003176:	429a      	cmp	r2, r3
 8003178:	d106      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003180:	2180      	movs	r1, #128	; 0x80
 8003182:	0449      	lsls	r1, r1, #17
 8003184:	430a      	orrs	r2, r1
 8003186:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	049b      	lsls	r3, r3, #18
 8003190:	4013      	ands	r3, r2
 8003192:	d016      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003198:	4a10      	ldr	r2, [pc, #64]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800319a:	4013      	ands	r3, r2
 800319c:	0019      	movs	r1, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031a4:	430a      	orrs	r2, r1
 80031a6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d106      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031b4:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ba:	2180      	movs	r1, #128	; 0x80
 80031bc:	0449      	lsls	r1, r1, #17
 80031be:	430a      	orrs	r2, r1
 80031c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80031c2:	2312      	movs	r3, #18
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	781b      	ldrb	r3, [r3, #0]
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b006      	add	sp, #24
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000
 80031d4:	efffffff 	.word	0xefffffff
 80031d8:	fffff3ff 	.word	0xfffff3ff
 80031dc:	fffffcff 	.word	0xfffffcff
 80031e0:	fff3ffff 	.word	0xfff3ffff
 80031e4:	ffcfffff 	.word	0xffcfffff
 80031e8:	ffffcfff 	.word	0xffffcfff
 80031ec:	ffff3fff 	.word	0xffff3fff
 80031f0:	ffbfffff 	.word	0xffbfffff
 80031f4:	feffffff 	.word	0xfeffffff

080031f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e046      	b.n	8003298 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2288      	movs	r2, #136	; 0x88
 800320e:	589b      	ldr	r3, [r3, r2]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d107      	bne.n	8003224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2284      	movs	r2, #132	; 0x84
 8003218:	2100      	movs	r1, #0
 800321a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	0018      	movs	r0, r3
 8003220:	f7fd ff4e 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2288      	movs	r2, #136	; 0x88
 8003228:	2124      	movs	r1, #36	; 0x24
 800322a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2101      	movs	r1, #1
 8003238:	438a      	bics	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	0018      	movs	r0, r3
 8003240:	f000 f830 	bl	80032a4 <UART_SetConfig>
 8003244:	0003      	movs	r3, r0
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e024      	b.n	8003298 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	0018      	movs	r0, r3
 800325a:	f000 fb79 	bl	8003950 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	490d      	ldr	r1, [pc, #52]	; (80032a0 <HAL_UART_Init+0xa8>)
 800326a:	400a      	ands	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	212a      	movs	r1, #42	; 0x2a
 800327a:	438a      	bics	r2, r1
 800327c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2101      	movs	r1, #1
 800328a:	430a      	orrs	r2, r1
 800328c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0018      	movs	r0, r3
 8003292:	f000 fc11 	bl	8003ab8 <UART_CheckIdleState>
 8003296:	0003      	movs	r3, r0
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	ffffb7ff 	.word	0xffffb7ff

080032a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a4:	b5b0      	push	{r4, r5, r7, lr}
 80032a6:	b090      	sub	sp, #64	; 0x40
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032ac:	231a      	movs	r3, #26
 80032ae:	2220      	movs	r2, #32
 80032b0:	189b      	adds	r3, r3, r2
 80032b2:	19db      	adds	r3, r3, r7
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4ac1      	ldr	r2, [pc, #772]	; (80035dc <UART_SetConfig+0x338>)
 80032d8:	4013      	ands	r3, r2
 80032da:	0019      	movs	r1, r3
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e2:	430b      	orrs	r3, r1
 80032e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4abc      	ldr	r2, [pc, #752]	; (80035e0 <UART_SetConfig+0x33c>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	0018      	movs	r0, r3
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	68d9      	ldr	r1, [r3, #12]
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	0003      	movs	r3, r0
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4ab6      	ldr	r2, [pc, #728]	; (80035e4 <UART_SetConfig+0x340>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d009      	beq.n	8003324 <UART_SetConfig+0x80>
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4ab4      	ldr	r2, [pc, #720]	; (80035e8 <UART_SetConfig+0x344>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003320:	4313      	orrs	r3, r2
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	4ab0      	ldr	r2, [pc, #704]	; (80035ec <UART_SetConfig+0x348>)
 800332c:	4013      	ands	r3, r2
 800332e:	0019      	movs	r1, r3
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003336:	430b      	orrs	r3, r1
 8003338:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	220f      	movs	r2, #15
 8003342:	4393      	bics	r3, r2
 8003344:	0018      	movs	r0, r3
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	0003      	movs	r3, r0
 8003350:	430b      	orrs	r3, r1
 8003352:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4aa5      	ldr	r2, [pc, #660]	; (80035f0 <UART_SetConfig+0x34c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d131      	bne.n	80033c2 <UART_SetConfig+0x11e>
 800335e:	4ba5      	ldr	r3, [pc, #660]	; (80035f4 <UART_SetConfig+0x350>)
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	2203      	movs	r2, #3
 8003364:	4013      	ands	r3, r2
 8003366:	2b03      	cmp	r3, #3
 8003368:	d01d      	beq.n	80033a6 <UART_SetConfig+0x102>
 800336a:	d823      	bhi.n	80033b4 <UART_SetConfig+0x110>
 800336c:	2b02      	cmp	r3, #2
 800336e:	d00c      	beq.n	800338a <UART_SetConfig+0xe6>
 8003370:	d820      	bhi.n	80033b4 <UART_SetConfig+0x110>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <UART_SetConfig+0xd8>
 8003376:	2b01      	cmp	r3, #1
 8003378:	d00e      	beq.n	8003398 <UART_SetConfig+0xf4>
 800337a:	e01b      	b.n	80033b4 <UART_SetConfig+0x110>
 800337c:	231b      	movs	r3, #27
 800337e:	2220      	movs	r2, #32
 8003380:	189b      	adds	r3, r3, r2
 8003382:	19db      	adds	r3, r3, r7
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	e154      	b.n	8003634 <UART_SetConfig+0x390>
 800338a:	231b      	movs	r3, #27
 800338c:	2220      	movs	r2, #32
 800338e:	189b      	adds	r3, r3, r2
 8003390:	19db      	adds	r3, r3, r7
 8003392:	2202      	movs	r2, #2
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	e14d      	b.n	8003634 <UART_SetConfig+0x390>
 8003398:	231b      	movs	r3, #27
 800339a:	2220      	movs	r2, #32
 800339c:	189b      	adds	r3, r3, r2
 800339e:	19db      	adds	r3, r3, r7
 80033a0:	2204      	movs	r2, #4
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	e146      	b.n	8003634 <UART_SetConfig+0x390>
 80033a6:	231b      	movs	r3, #27
 80033a8:	2220      	movs	r2, #32
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	19db      	adds	r3, r3, r7
 80033ae:	2208      	movs	r2, #8
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e13f      	b.n	8003634 <UART_SetConfig+0x390>
 80033b4:	231b      	movs	r3, #27
 80033b6:	2220      	movs	r2, #32
 80033b8:	189b      	adds	r3, r3, r2
 80033ba:	19db      	adds	r3, r3, r7
 80033bc:	2210      	movs	r2, #16
 80033be:	701a      	strb	r2, [r3, #0]
 80033c0:	e138      	b.n	8003634 <UART_SetConfig+0x390>
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a8c      	ldr	r2, [pc, #560]	; (80035f8 <UART_SetConfig+0x354>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d131      	bne.n	8003430 <UART_SetConfig+0x18c>
 80033cc:	4b89      	ldr	r3, [pc, #548]	; (80035f4 <UART_SetConfig+0x350>)
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	220c      	movs	r2, #12
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b0c      	cmp	r3, #12
 80033d6:	d01d      	beq.n	8003414 <UART_SetConfig+0x170>
 80033d8:	d823      	bhi.n	8003422 <UART_SetConfig+0x17e>
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d00c      	beq.n	80033f8 <UART_SetConfig+0x154>
 80033de:	d820      	bhi.n	8003422 <UART_SetConfig+0x17e>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <UART_SetConfig+0x146>
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d00e      	beq.n	8003406 <UART_SetConfig+0x162>
 80033e8:	e01b      	b.n	8003422 <UART_SetConfig+0x17e>
 80033ea:	231b      	movs	r3, #27
 80033ec:	2220      	movs	r2, #32
 80033ee:	189b      	adds	r3, r3, r2
 80033f0:	19db      	adds	r3, r3, r7
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e11d      	b.n	8003634 <UART_SetConfig+0x390>
 80033f8:	231b      	movs	r3, #27
 80033fa:	2220      	movs	r2, #32
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	19db      	adds	r3, r3, r7
 8003400:	2202      	movs	r2, #2
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e116      	b.n	8003634 <UART_SetConfig+0x390>
 8003406:	231b      	movs	r3, #27
 8003408:	2220      	movs	r2, #32
 800340a:	189b      	adds	r3, r3, r2
 800340c:	19db      	adds	r3, r3, r7
 800340e:	2204      	movs	r2, #4
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e10f      	b.n	8003634 <UART_SetConfig+0x390>
 8003414:	231b      	movs	r3, #27
 8003416:	2220      	movs	r2, #32
 8003418:	189b      	adds	r3, r3, r2
 800341a:	19db      	adds	r3, r3, r7
 800341c:	2208      	movs	r2, #8
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	e108      	b.n	8003634 <UART_SetConfig+0x390>
 8003422:	231b      	movs	r3, #27
 8003424:	2220      	movs	r2, #32
 8003426:	189b      	adds	r3, r3, r2
 8003428:	19db      	adds	r3, r3, r7
 800342a:	2210      	movs	r2, #16
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	e101      	b.n	8003634 <UART_SetConfig+0x390>
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a71      	ldr	r2, [pc, #452]	; (80035fc <UART_SetConfig+0x358>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d131      	bne.n	800349e <UART_SetConfig+0x1fa>
 800343a:	4b6e      	ldr	r3, [pc, #440]	; (80035f4 <UART_SetConfig+0x350>)
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	2230      	movs	r2, #48	; 0x30
 8003440:	4013      	ands	r3, r2
 8003442:	2b30      	cmp	r3, #48	; 0x30
 8003444:	d01d      	beq.n	8003482 <UART_SetConfig+0x1de>
 8003446:	d823      	bhi.n	8003490 <UART_SetConfig+0x1ec>
 8003448:	2b20      	cmp	r3, #32
 800344a:	d00c      	beq.n	8003466 <UART_SetConfig+0x1c2>
 800344c:	d820      	bhi.n	8003490 <UART_SetConfig+0x1ec>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <UART_SetConfig+0x1b4>
 8003452:	2b10      	cmp	r3, #16
 8003454:	d00e      	beq.n	8003474 <UART_SetConfig+0x1d0>
 8003456:	e01b      	b.n	8003490 <UART_SetConfig+0x1ec>
 8003458:	231b      	movs	r3, #27
 800345a:	2220      	movs	r2, #32
 800345c:	189b      	adds	r3, r3, r2
 800345e:	19db      	adds	r3, r3, r7
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	e0e6      	b.n	8003634 <UART_SetConfig+0x390>
 8003466:	231b      	movs	r3, #27
 8003468:	2220      	movs	r2, #32
 800346a:	189b      	adds	r3, r3, r2
 800346c:	19db      	adds	r3, r3, r7
 800346e:	2202      	movs	r2, #2
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e0df      	b.n	8003634 <UART_SetConfig+0x390>
 8003474:	231b      	movs	r3, #27
 8003476:	2220      	movs	r2, #32
 8003478:	189b      	adds	r3, r3, r2
 800347a:	19db      	adds	r3, r3, r7
 800347c:	2204      	movs	r2, #4
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	e0d8      	b.n	8003634 <UART_SetConfig+0x390>
 8003482:	231b      	movs	r3, #27
 8003484:	2220      	movs	r2, #32
 8003486:	189b      	adds	r3, r3, r2
 8003488:	19db      	adds	r3, r3, r7
 800348a:	2208      	movs	r2, #8
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e0d1      	b.n	8003634 <UART_SetConfig+0x390>
 8003490:	231b      	movs	r3, #27
 8003492:	2220      	movs	r2, #32
 8003494:	189b      	adds	r3, r3, r2
 8003496:	19db      	adds	r3, r3, r7
 8003498:	2210      	movs	r2, #16
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e0ca      	b.n	8003634 <UART_SetConfig+0x390>
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a57      	ldr	r2, [pc, #348]	; (8003600 <UART_SetConfig+0x35c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d106      	bne.n	80034b6 <UART_SetConfig+0x212>
 80034a8:	231b      	movs	r3, #27
 80034aa:	2220      	movs	r2, #32
 80034ac:	189b      	adds	r3, r3, r2
 80034ae:	19db      	adds	r3, r3, r7
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e0be      	b.n	8003634 <UART_SetConfig+0x390>
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a52      	ldr	r2, [pc, #328]	; (8003604 <UART_SetConfig+0x360>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d106      	bne.n	80034ce <UART_SetConfig+0x22a>
 80034c0:	231b      	movs	r3, #27
 80034c2:	2220      	movs	r2, #32
 80034c4:	189b      	adds	r3, r3, r2
 80034c6:	19db      	adds	r3, r3, r7
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e0b2      	b.n	8003634 <UART_SetConfig+0x390>
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a4d      	ldr	r2, [pc, #308]	; (8003608 <UART_SetConfig+0x364>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d106      	bne.n	80034e6 <UART_SetConfig+0x242>
 80034d8:	231b      	movs	r3, #27
 80034da:	2220      	movs	r2, #32
 80034dc:	189b      	adds	r3, r3, r2
 80034de:	19db      	adds	r3, r3, r7
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	e0a6      	b.n	8003634 <UART_SetConfig+0x390>
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a3e      	ldr	r2, [pc, #248]	; (80035e4 <UART_SetConfig+0x340>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d13e      	bne.n	800356e <UART_SetConfig+0x2ca>
 80034f0:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <UART_SetConfig+0x350>)
 80034f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034f4:	23c0      	movs	r3, #192	; 0xc0
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	4013      	ands	r3, r2
 80034fa:	22c0      	movs	r2, #192	; 0xc0
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	4293      	cmp	r3, r2
 8003500:	d027      	beq.n	8003552 <UART_SetConfig+0x2ae>
 8003502:	22c0      	movs	r2, #192	; 0xc0
 8003504:	0112      	lsls	r2, r2, #4
 8003506:	4293      	cmp	r3, r2
 8003508:	d82a      	bhi.n	8003560 <UART_SetConfig+0x2bc>
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	4293      	cmp	r3, r2
 8003510:	d011      	beq.n	8003536 <UART_SetConfig+0x292>
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	0112      	lsls	r2, r2, #4
 8003516:	4293      	cmp	r3, r2
 8003518:	d822      	bhi.n	8003560 <UART_SetConfig+0x2bc>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <UART_SetConfig+0x284>
 800351e:	2280      	movs	r2, #128	; 0x80
 8003520:	00d2      	lsls	r2, r2, #3
 8003522:	4293      	cmp	r3, r2
 8003524:	d00e      	beq.n	8003544 <UART_SetConfig+0x2a0>
 8003526:	e01b      	b.n	8003560 <UART_SetConfig+0x2bc>
 8003528:	231b      	movs	r3, #27
 800352a:	2220      	movs	r2, #32
 800352c:	189b      	adds	r3, r3, r2
 800352e:	19db      	adds	r3, r3, r7
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	e07e      	b.n	8003634 <UART_SetConfig+0x390>
 8003536:	231b      	movs	r3, #27
 8003538:	2220      	movs	r2, #32
 800353a:	189b      	adds	r3, r3, r2
 800353c:	19db      	adds	r3, r3, r7
 800353e:	2202      	movs	r2, #2
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e077      	b.n	8003634 <UART_SetConfig+0x390>
 8003544:	231b      	movs	r3, #27
 8003546:	2220      	movs	r2, #32
 8003548:	189b      	adds	r3, r3, r2
 800354a:	19db      	adds	r3, r3, r7
 800354c:	2204      	movs	r2, #4
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	e070      	b.n	8003634 <UART_SetConfig+0x390>
 8003552:	231b      	movs	r3, #27
 8003554:	2220      	movs	r2, #32
 8003556:	189b      	adds	r3, r3, r2
 8003558:	19db      	adds	r3, r3, r7
 800355a:	2208      	movs	r2, #8
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e069      	b.n	8003634 <UART_SetConfig+0x390>
 8003560:	231b      	movs	r3, #27
 8003562:	2220      	movs	r2, #32
 8003564:	189b      	adds	r3, r3, r2
 8003566:	19db      	adds	r3, r3, r7
 8003568:	2210      	movs	r2, #16
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e062      	b.n	8003634 <UART_SetConfig+0x390>
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1d      	ldr	r2, [pc, #116]	; (80035e8 <UART_SetConfig+0x344>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d157      	bne.n	8003628 <UART_SetConfig+0x384>
 8003578:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <UART_SetConfig+0x350>)
 800357a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800357c:	23c0      	movs	r3, #192	; 0xc0
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4013      	ands	r3, r2
 8003582:	22c0      	movs	r2, #192	; 0xc0
 8003584:	0092      	lsls	r2, r2, #2
 8003586:	4293      	cmp	r3, r2
 8003588:	d040      	beq.n	800360c <UART_SetConfig+0x368>
 800358a:	22c0      	movs	r2, #192	; 0xc0
 800358c:	0092      	lsls	r2, r2, #2
 800358e:	4293      	cmp	r3, r2
 8003590:	d843      	bhi.n	800361a <UART_SetConfig+0x376>
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	0092      	lsls	r2, r2, #2
 8003596:	4293      	cmp	r3, r2
 8003598:	d011      	beq.n	80035be <UART_SetConfig+0x31a>
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	0092      	lsls	r2, r2, #2
 800359e:	4293      	cmp	r3, r2
 80035a0:	d83b      	bhi.n	800361a <UART_SetConfig+0x376>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <UART_SetConfig+0x30c>
 80035a6:	2280      	movs	r2, #128	; 0x80
 80035a8:	0052      	lsls	r2, r2, #1
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00e      	beq.n	80035cc <UART_SetConfig+0x328>
 80035ae:	e034      	b.n	800361a <UART_SetConfig+0x376>
 80035b0:	231b      	movs	r3, #27
 80035b2:	2220      	movs	r2, #32
 80035b4:	189b      	adds	r3, r3, r2
 80035b6:	19db      	adds	r3, r3, r7
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	e03a      	b.n	8003634 <UART_SetConfig+0x390>
 80035be:	231b      	movs	r3, #27
 80035c0:	2220      	movs	r2, #32
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	19db      	adds	r3, r3, r7
 80035c6:	2202      	movs	r2, #2
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	e033      	b.n	8003634 <UART_SetConfig+0x390>
 80035cc:	231b      	movs	r3, #27
 80035ce:	2220      	movs	r2, #32
 80035d0:	189b      	adds	r3, r3, r2
 80035d2:	19db      	adds	r3, r3, r7
 80035d4:	2204      	movs	r2, #4
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	e02c      	b.n	8003634 <UART_SetConfig+0x390>
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	cfff69f3 	.word	0xcfff69f3
 80035e0:	ffffcfff 	.word	0xffffcfff
 80035e4:	40008000 	.word	0x40008000
 80035e8:	40008400 	.word	0x40008400
 80035ec:	11fff4ff 	.word	0x11fff4ff
 80035f0:	40013800 	.word	0x40013800
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40004400 	.word	0x40004400
 80035fc:	40004800 	.word	0x40004800
 8003600:	40004c00 	.word	0x40004c00
 8003604:	40005000 	.word	0x40005000
 8003608:	40013c00 	.word	0x40013c00
 800360c:	231b      	movs	r3, #27
 800360e:	2220      	movs	r2, #32
 8003610:	189b      	adds	r3, r3, r2
 8003612:	19db      	adds	r3, r3, r7
 8003614:	2208      	movs	r2, #8
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	e00c      	b.n	8003634 <UART_SetConfig+0x390>
 800361a:	231b      	movs	r3, #27
 800361c:	2220      	movs	r2, #32
 800361e:	189b      	adds	r3, r3, r2
 8003620:	19db      	adds	r3, r3, r7
 8003622:	2210      	movs	r2, #16
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e005      	b.n	8003634 <UART_SetConfig+0x390>
 8003628:	231b      	movs	r3, #27
 800362a:	2220      	movs	r2, #32
 800362c:	189b      	adds	r3, r3, r2
 800362e:	19db      	adds	r3, r3, r7
 8003630:	2210      	movs	r2, #16
 8003632:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4ac1      	ldr	r2, [pc, #772]	; (8003940 <UART_SetConfig+0x69c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d005      	beq.n	800364a <UART_SetConfig+0x3a6>
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4ac0      	ldr	r2, [pc, #768]	; (8003944 <UART_SetConfig+0x6a0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d000      	beq.n	800364a <UART_SetConfig+0x3a6>
 8003648:	e093      	b.n	8003772 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800364a:	231b      	movs	r3, #27
 800364c:	2220      	movs	r2, #32
 800364e:	189b      	adds	r3, r3, r2
 8003650:	19db      	adds	r3, r3, r7
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b08      	cmp	r3, #8
 8003656:	d015      	beq.n	8003684 <UART_SetConfig+0x3e0>
 8003658:	dc18      	bgt.n	800368c <UART_SetConfig+0x3e8>
 800365a:	2b04      	cmp	r3, #4
 800365c:	d00d      	beq.n	800367a <UART_SetConfig+0x3d6>
 800365e:	dc15      	bgt.n	800368c <UART_SetConfig+0x3e8>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <UART_SetConfig+0x3c6>
 8003664:	2b02      	cmp	r3, #2
 8003666:	d005      	beq.n	8003674 <UART_SetConfig+0x3d0>
 8003668:	e010      	b.n	800368c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800366a:	f7ff fb73 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 800366e:	0003      	movs	r3, r0
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003672:	e014      	b.n	800369e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003674:	4bb4      	ldr	r3, [pc, #720]	; (8003948 <UART_SetConfig+0x6a4>)
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003678:	e011      	b.n	800369e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367a:	f7ff fadf 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 800367e:	0003      	movs	r3, r0
 8003680:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003682:	e00c      	b.n	800369e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	021b      	lsls	r3, r3, #8
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800368a:	e008      	b.n	800369e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003690:	231a      	movs	r3, #26
 8003692:	2220      	movs	r2, #32
 8003694:	189b      	adds	r3, r3, r2
 8003696:	19db      	adds	r3, r3, r7
 8003698:	2201      	movs	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]
        break;
 800369c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800369e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d100      	bne.n	80036a6 <UART_SetConfig+0x402>
 80036a4:	e135      	b.n	8003912 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036aa:	4ba8      	ldr	r3, [pc, #672]	; (800394c <UART_SetConfig+0x6a8>)
 80036ac:	0052      	lsls	r2, r2, #1
 80036ae:	5ad3      	ldrh	r3, [r2, r3]
 80036b0:	0019      	movs	r1, r3
 80036b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036b4:	f7fc fd26 	bl	8000104 <__udivsi3>
 80036b8:	0003      	movs	r3, r0
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	0013      	movs	r3, r2
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	189b      	adds	r3, r3, r2
 80036c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d305      	bcc.n	80036d8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d906      	bls.n	80036e6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80036d8:	231a      	movs	r3, #26
 80036da:	2220      	movs	r2, #32
 80036dc:	189b      	adds	r3, r3, r2
 80036de:	19db      	adds	r3, r3, r7
 80036e0:	2201      	movs	r2, #1
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	e044      	b.n	8003770 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f2:	4b96      	ldr	r3, [pc, #600]	; (800394c <UART_SetConfig+0x6a8>)
 80036f4:	0052      	lsls	r2, r2, #1
 80036f6:	5ad3      	ldrh	r3, [r2, r3]
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	69b8      	ldr	r0, [r7, #24]
 8003704:	69f9      	ldr	r1, [r7, #28]
 8003706:	f7fc fe73 	bl	80003f0 <__aeabi_uldivmod>
 800370a:	0002      	movs	r2, r0
 800370c:	000b      	movs	r3, r1
 800370e:	0e11      	lsrs	r1, r2, #24
 8003710:	021d      	lsls	r5, r3, #8
 8003712:	430d      	orrs	r5, r1
 8003714:	0214      	lsls	r4, r2, #8
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68b8      	ldr	r0, [r7, #8]
 8003724:	68f9      	ldr	r1, [r7, #12]
 8003726:	1900      	adds	r0, r0, r4
 8003728:	4169      	adcs	r1, r5
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	2300      	movs	r3, #0
 8003732:	607b      	str	r3, [r7, #4]
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f7fc fe5a 	bl	80003f0 <__aeabi_uldivmod>
 800373c:	0002      	movs	r2, r0
 800373e:	000b      	movs	r3, r1
 8003740:	0013      	movs	r3, r2
 8003742:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003746:	23c0      	movs	r3, #192	; 0xc0
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	429a      	cmp	r2, r3
 800374c:	d309      	bcc.n	8003762 <UART_SetConfig+0x4be>
 800374e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	035b      	lsls	r3, r3, #13
 8003754:	429a      	cmp	r2, r3
 8003756:	d204      	bcs.n	8003762 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800375e:	60da      	str	r2, [r3, #12]
 8003760:	e006      	b.n	8003770 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003762:	231a      	movs	r3, #26
 8003764:	2220      	movs	r2, #32
 8003766:	189b      	adds	r3, r3, r2
 8003768:	19db      	adds	r3, r3, r7
 800376a:	2201      	movs	r2, #1
 800376c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800376e:	e0d0      	b.n	8003912 <UART_SetConfig+0x66e>
 8003770:	e0cf      	b.n	8003912 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	69da      	ldr	r2, [r3, #28]
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	429a      	cmp	r2, r3
 800377c:	d000      	beq.n	8003780 <UART_SetConfig+0x4dc>
 800377e:	e070      	b.n	8003862 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003780:	231b      	movs	r3, #27
 8003782:	2220      	movs	r2, #32
 8003784:	189b      	adds	r3, r3, r2
 8003786:	19db      	adds	r3, r3, r7
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b08      	cmp	r3, #8
 800378c:	d015      	beq.n	80037ba <UART_SetConfig+0x516>
 800378e:	dc18      	bgt.n	80037c2 <UART_SetConfig+0x51e>
 8003790:	2b04      	cmp	r3, #4
 8003792:	d00d      	beq.n	80037b0 <UART_SetConfig+0x50c>
 8003794:	dc15      	bgt.n	80037c2 <UART_SetConfig+0x51e>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <UART_SetConfig+0x4fc>
 800379a:	2b02      	cmp	r3, #2
 800379c:	d005      	beq.n	80037aa <UART_SetConfig+0x506>
 800379e:	e010      	b.n	80037c2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a0:	f7ff fad8 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 80037a4:	0003      	movs	r3, r0
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037a8:	e014      	b.n	80037d4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037aa:	4b67      	ldr	r3, [pc, #412]	; (8003948 <UART_SetConfig+0x6a4>)
 80037ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037ae:	e011      	b.n	80037d4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b0:	f7ff fa44 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 80037b4:	0003      	movs	r3, r0
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037b8:	e00c      	b.n	80037d4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037c0:	e008      	b.n	80037d4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80037c6:	231a      	movs	r3, #26
 80037c8:	2220      	movs	r2, #32
 80037ca:	189b      	adds	r3, r3, r2
 80037cc:	19db      	adds	r3, r3, r7
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
        break;
 80037d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d100      	bne.n	80037dc <UART_SetConfig+0x538>
 80037da:	e09a      	b.n	8003912 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037e0:	4b5a      	ldr	r3, [pc, #360]	; (800394c <UART_SetConfig+0x6a8>)
 80037e2:	0052      	lsls	r2, r2, #1
 80037e4:	5ad3      	ldrh	r3, [r2, r3]
 80037e6:	0019      	movs	r1, r3
 80037e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037ea:	f7fc fc8b 	bl	8000104 <__udivsi3>
 80037ee:	0003      	movs	r3, r0
 80037f0:	005a      	lsls	r2, r3, #1
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	18d2      	adds	r2, r2, r3
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	0019      	movs	r1, r3
 8003800:	0010      	movs	r0, r2
 8003802:	f7fc fc7f 	bl	8000104 <__udivsi3>
 8003806:	0003      	movs	r3, r0
 8003808:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	2b0f      	cmp	r3, #15
 800380e:	d921      	bls.n	8003854 <UART_SetConfig+0x5b0>
 8003810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003812:	2380      	movs	r3, #128	; 0x80
 8003814:	025b      	lsls	r3, r3, #9
 8003816:	429a      	cmp	r2, r3
 8003818:	d21c      	bcs.n	8003854 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	b29a      	uxth	r2, r3
 800381e:	200e      	movs	r0, #14
 8003820:	2420      	movs	r4, #32
 8003822:	1903      	adds	r3, r0, r4
 8003824:	19db      	adds	r3, r3, r7
 8003826:	210f      	movs	r1, #15
 8003828:	438a      	bics	r2, r1
 800382a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	b29b      	uxth	r3, r3
 8003832:	2207      	movs	r2, #7
 8003834:	4013      	ands	r3, r2
 8003836:	b299      	uxth	r1, r3
 8003838:	1903      	adds	r3, r0, r4
 800383a:	19db      	adds	r3, r3, r7
 800383c:	1902      	adds	r2, r0, r4
 800383e:	19d2      	adds	r2, r2, r7
 8003840:	8812      	ldrh	r2, [r2, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	1902      	adds	r2, r0, r4
 800384c:	19d2      	adds	r2, r2, r7
 800384e:	8812      	ldrh	r2, [r2, #0]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	e05e      	b.n	8003912 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003854:	231a      	movs	r3, #26
 8003856:	2220      	movs	r2, #32
 8003858:	189b      	adds	r3, r3, r2
 800385a:	19db      	adds	r3, r3, r7
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	e057      	b.n	8003912 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003862:	231b      	movs	r3, #27
 8003864:	2220      	movs	r2, #32
 8003866:	189b      	adds	r3, r3, r2
 8003868:	19db      	adds	r3, r3, r7
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d015      	beq.n	800389c <UART_SetConfig+0x5f8>
 8003870:	dc18      	bgt.n	80038a4 <UART_SetConfig+0x600>
 8003872:	2b04      	cmp	r3, #4
 8003874:	d00d      	beq.n	8003892 <UART_SetConfig+0x5ee>
 8003876:	dc15      	bgt.n	80038a4 <UART_SetConfig+0x600>
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <UART_SetConfig+0x5de>
 800387c:	2b02      	cmp	r3, #2
 800387e:	d005      	beq.n	800388c <UART_SetConfig+0x5e8>
 8003880:	e010      	b.n	80038a4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003882:	f7ff fa67 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8003886:	0003      	movs	r3, r0
 8003888:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800388a:	e014      	b.n	80038b6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800388c:	4b2e      	ldr	r3, [pc, #184]	; (8003948 <UART_SetConfig+0x6a4>)
 800388e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003890:	e011      	b.n	80038b6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003892:	f7ff f9d3 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8003896:	0003      	movs	r3, r0
 8003898:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800389a:	e00c      	b.n	80038b6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038a2:	e008      	b.n	80038b6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80038a8:	231a      	movs	r3, #26
 80038aa:	2220      	movs	r2, #32
 80038ac:	189b      	adds	r3, r3, r2
 80038ae:	19db      	adds	r3, r3, r7
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
        break;
 80038b4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80038b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d02a      	beq.n	8003912 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038c0:	4b22      	ldr	r3, [pc, #136]	; (800394c <UART_SetConfig+0x6a8>)
 80038c2:	0052      	lsls	r2, r2, #1
 80038c4:	5ad3      	ldrh	r3, [r2, r3]
 80038c6:	0019      	movs	r1, r3
 80038c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038ca:	f7fc fc1b 	bl	8000104 <__udivsi3>
 80038ce:	0003      	movs	r3, r0
 80038d0:	001a      	movs	r2, r3
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	085b      	lsrs	r3, r3, #1
 80038d8:	18d2      	adds	r2, r2, r3
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	0019      	movs	r1, r3
 80038e0:	0010      	movs	r0, r2
 80038e2:	f7fc fc0f 	bl	8000104 <__udivsi3>
 80038e6:	0003      	movs	r3, r0
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	2b0f      	cmp	r3, #15
 80038ee:	d90a      	bls.n	8003906 <UART_SetConfig+0x662>
 80038f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	025b      	lsls	r3, r3, #9
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d205      	bcs.n	8003906 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60da      	str	r2, [r3, #12]
 8003904:	e005      	b.n	8003912 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003906:	231a      	movs	r3, #26
 8003908:	2220      	movs	r2, #32
 800390a:	189b      	adds	r3, r3, r2
 800390c:	19db      	adds	r3, r3, r7
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	226a      	movs	r2, #106	; 0x6a
 8003916:	2101      	movs	r1, #1
 8003918:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	2268      	movs	r2, #104	; 0x68
 800391e:	2101      	movs	r1, #1
 8003920:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	2200      	movs	r2, #0
 8003926:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	2200      	movs	r2, #0
 800392c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800392e:	231a      	movs	r3, #26
 8003930:	2220      	movs	r2, #32
 8003932:	189b      	adds	r3, r3, r2
 8003934:	19db      	adds	r3, r3, r7
 8003936:	781b      	ldrb	r3, [r3, #0]
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b010      	add	sp, #64	; 0x40
 800393e:	bdb0      	pop	{r4, r5, r7, pc}
 8003940:	40008000 	.word	0x40008000
 8003944:	40008400 	.word	0x40008400
 8003948:	00f42400 	.word	0x00f42400
 800394c:	08004d50 	.word	0x08004d50

08003950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	2201      	movs	r2, #1
 800395e:	4013      	ands	r3, r2
 8003960:	d00b      	beq.n	800397a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4a4a      	ldr	r2, [pc, #296]	; (8003a94 <UART_AdvFeatureConfig+0x144>)
 800396a:	4013      	ands	r3, r2
 800396c:	0019      	movs	r1, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	2202      	movs	r2, #2
 8003980:	4013      	ands	r3, r2
 8003982:	d00b      	beq.n	800399c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4a43      	ldr	r2, [pc, #268]	; (8003a98 <UART_AdvFeatureConfig+0x148>)
 800398c:	4013      	ands	r3, r2
 800398e:	0019      	movs	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	2204      	movs	r2, #4
 80039a2:	4013      	ands	r3, r2
 80039a4:	d00b      	beq.n	80039be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4a3b      	ldr	r2, [pc, #236]	; (8003a9c <UART_AdvFeatureConfig+0x14c>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	2208      	movs	r2, #8
 80039c4:	4013      	ands	r3, r2
 80039c6:	d00b      	beq.n	80039e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a34      	ldr	r2, [pc, #208]	; (8003aa0 <UART_AdvFeatureConfig+0x150>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	0019      	movs	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	2210      	movs	r2, #16
 80039e6:	4013      	ands	r3, r2
 80039e8:	d00b      	beq.n	8003a02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4a2c      	ldr	r2, [pc, #176]	; (8003aa4 <UART_AdvFeatureConfig+0x154>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	2220      	movs	r2, #32
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d00b      	beq.n	8003a24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	4a25      	ldr	r2, [pc, #148]	; (8003aa8 <UART_AdvFeatureConfig+0x158>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	0019      	movs	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	2240      	movs	r2, #64	; 0x40
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d01d      	beq.n	8003a6a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4a1d      	ldr	r2, [pc, #116]	; (8003aac <UART_AdvFeatureConfig+0x15c>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	0019      	movs	r1, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	035b      	lsls	r3, r3, #13
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d10b      	bne.n	8003a6a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <UART_AdvFeatureConfig+0x160>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	2280      	movs	r2, #128	; 0x80
 8003a70:	4013      	ands	r3, r2
 8003a72:	d00b      	beq.n	8003a8c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4a0e      	ldr	r2, [pc, #56]	; (8003ab4 <UART_AdvFeatureConfig+0x164>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	0019      	movs	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  }
}
 8003a8c:	46c0      	nop			; (mov r8, r8)
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b002      	add	sp, #8
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	fffdffff 	.word	0xfffdffff
 8003a98:	fffeffff 	.word	0xfffeffff
 8003a9c:	fffbffff 	.word	0xfffbffff
 8003aa0:	ffff7fff 	.word	0xffff7fff
 8003aa4:	ffffefff 	.word	0xffffefff
 8003aa8:	ffffdfff 	.word	0xffffdfff
 8003aac:	ffefffff 	.word	0xffefffff
 8003ab0:	ff9fffff 	.word	0xff9fffff
 8003ab4:	fff7ffff 	.word	0xfff7ffff

08003ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2290      	movs	r2, #144	; 0x90
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ac8:	f7fd fc1c 	bl	8001304 <HAL_GetTick>
 8003acc:	0003      	movs	r3, r0
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2208      	movs	r2, #8
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d10c      	bne.n	8003af8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2280      	movs	r2, #128	; 0x80
 8003ae2:	0391      	lsls	r1, r2, #14
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4a1a      	ldr	r2, [pc, #104]	; (8003b50 <UART_CheckIdleState+0x98>)
 8003ae8:	9200      	str	r2, [sp, #0]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f000 f832 	bl	8003b54 <UART_WaitOnFlagUntilTimeout>
 8003af0:	1e03      	subs	r3, r0, #0
 8003af2:	d001      	beq.n	8003af8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e026      	b.n	8003b46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2204      	movs	r2, #4
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d10c      	bne.n	8003b20 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2280      	movs	r2, #128	; 0x80
 8003b0a:	03d1      	lsls	r1, r2, #15
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	4a10      	ldr	r2, [pc, #64]	; (8003b50 <UART_CheckIdleState+0x98>)
 8003b10:	9200      	str	r2, [sp, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f000 f81e 	bl	8003b54 <UART_WaitOnFlagUntilTimeout>
 8003b18:	1e03      	subs	r3, r0, #0
 8003b1a:	d001      	beq.n	8003b20 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e012      	b.n	8003b46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2288      	movs	r2, #136	; 0x88
 8003b24:	2120      	movs	r1, #32
 8003b26:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	228c      	movs	r2, #140	; 0x8c
 8003b2c:	2120      	movs	r1, #32
 8003b2e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2284      	movs	r2, #132	; 0x84
 8003b40:	2100      	movs	r1, #0
 8003b42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	0018      	movs	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b004      	add	sp, #16
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	01ffffff 	.word	0x01ffffff

08003b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b094      	sub	sp, #80	; 0x50
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	1dfb      	adds	r3, r7, #7
 8003b62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b64:	e0a7      	b.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b68:	3301      	adds	r3, #1
 8003b6a:	d100      	bne.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x1a>
 8003b6c:	e0a3      	b.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6e:	f7fd fbc9 	bl	8001304 <HAL_GetTick>
 8003b72:	0002      	movs	r2, r0
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d13f      	bne.n	8003c04 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b84:	f3ef 8310 	mrs	r3, PRIMASK
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b8e:	2301      	movs	r3, #1
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b94:	f383 8810 	msr	PRIMASK, r3
}
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	494e      	ldr	r1, [pc, #312]	; (8003ce0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ba6:	400a      	ands	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bac:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	f383 8810 	msr	PRIMASK, r3
}
 8003bb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bba:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbe:	643b      	str	r3, [r7, #64]	; 0x40
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc6:	f383 8810 	msr	PRIMASK, r3
}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	438a      	bics	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be2:	f383 8810 	msr	PRIMASK, r3
}
 8003be6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2288      	movs	r2, #136	; 0x88
 8003bec:	2120      	movs	r1, #32
 8003bee:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	228c      	movs	r2, #140	; 0x8c
 8003bf4:	2120      	movs	r1, #32
 8003bf6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2284      	movs	r2, #132	; 0x84
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e069      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d052      	beq.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d148      	bne.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2280      	movs	r2, #128	; 0x80
 8003c2a:	0112      	lsls	r2, r2, #4
 8003c2c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c32:	613b      	str	r3, [r7, #16]
  return(result);
 8003c34:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c38:	2301      	movs	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f383 8810 	msr	PRIMASK, r3
}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4924      	ldr	r1, [pc, #144]	; (8003ce0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003c50:	400a      	ands	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f383 8810 	msr	PRIMASK, r3
}
 8003c5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c60:	f3ef 8310 	mrs	r3, PRIMASK
 8003c64:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c66:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f383 8810 	msr	PRIMASK, r3
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2101      	movs	r1, #1
 8003c82:	438a      	bics	r2, r1
 8003c84:	609a      	str	r2, [r3, #8]
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	f383 8810 	msr	PRIMASK, r3
}
 8003c90:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2288      	movs	r2, #136	; 0x88
 8003c96:	2120      	movs	r1, #32
 8003c98:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	228c      	movs	r2, #140	; 0x8c
 8003c9e:	2120      	movs	r1, #32
 8003ca0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2290      	movs	r2, #144	; 0x90
 8003ca6:	2120      	movs	r1, #32
 8003ca8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2284      	movs	r2, #132	; 0x84
 8003cae:	2100      	movs	r1, #0
 8003cb0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e010      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	425a      	negs	r2, r3
 8003cc6:	4153      	adcs	r3, r2
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	001a      	movs	r2, r3
 8003ccc:	1dfb      	adds	r3, r7, #7
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d100      	bne.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x182>
 8003cd4:	e747      	b.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	0018      	movs	r0, r3
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b014      	add	sp, #80	; 0x50
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	fffffe5f 	.word	0xfffffe5f

08003ce4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2284      	movs	r2, #132	; 0x84
 8003cf0:	5c9b      	ldrb	r3, [r3, r2]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_UARTEx_DisableFifoMode+0x16>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e027      	b.n	8003d4a <HAL_UARTEx_DisableFifoMode+0x66>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2284      	movs	r2, #132	; 0x84
 8003cfe:	2101      	movs	r1, #1
 8003d00:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2288      	movs	r2, #136	; 0x88
 8003d06:	2124      	movs	r1, #36	; 0x24
 8003d08:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	438a      	bics	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2288      	movs	r2, #136	; 0x88
 8003d3c:	2120      	movs	r1, #32
 8003d3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2284      	movs	r2, #132	; 0x84
 8003d44:	2100      	movs	r1, #0
 8003d46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b004      	add	sp, #16
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	dfffffff 	.word	0xdfffffff

08003d58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2284      	movs	r2, #132	; 0x84
 8003d66:	5c9b      	ldrb	r3, [r3, r2]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e02e      	b.n	8003dce <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2284      	movs	r2, #132	; 0x84
 8003d74:	2101      	movs	r1, #1
 8003d76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2288      	movs	r2, #136	; 0x88
 8003d7c:	2124      	movs	r1, #36	; 0x24
 8003d7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2101      	movs	r1, #1
 8003d94:	438a      	bics	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	08d9      	lsrs	r1, r3, #3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 f854 	bl	8003e5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2288      	movs	r2, #136	; 0x88
 8003dc0:	2120      	movs	r1, #32
 8003dc2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2284      	movs	r2, #132	; 0x84
 8003dc8:	2100      	movs	r1, #0
 8003dca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b004      	add	sp, #16
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2284      	movs	r2, #132	; 0x84
 8003de6:	5c9b      	ldrb	r3, [r3, r2]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e02f      	b.n	8003e50 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2284      	movs	r2, #132	; 0x84
 8003df4:	2101      	movs	r1, #1
 8003df6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2288      	movs	r2, #136	; 0x88
 8003dfc:	2124      	movs	r1, #36	; 0x24
 8003dfe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2101      	movs	r1, #1
 8003e14:	438a      	bics	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	4a0e      	ldr	r2, [pc, #56]	; (8003e58 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	0019      	movs	r1, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f000 f813 	bl	8003e5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2288      	movs	r2, #136	; 0x88
 8003e42:	2120      	movs	r1, #32
 8003e44:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2284      	movs	r2, #132	; 0x84
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	0018      	movs	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b004      	add	sp, #16
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	f1ffffff 	.word	0xf1ffffff

08003e5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d108      	bne.n	8003e7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	226a      	movs	r2, #106	; 0x6a
 8003e70:	2101      	movs	r1, #1
 8003e72:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2268      	movs	r2, #104	; 0x68
 8003e78:	2101      	movs	r1, #1
 8003e7a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e7c:	e043      	b.n	8003f06 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e7e:	260f      	movs	r6, #15
 8003e80:	19bb      	adds	r3, r7, r6
 8003e82:	2208      	movs	r2, #8
 8003e84:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e86:	200e      	movs	r0, #14
 8003e88:	183b      	adds	r3, r7, r0
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	0e5b      	lsrs	r3, r3, #25
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	240d      	movs	r4, #13
 8003e9a:	193b      	adds	r3, r7, r4
 8003e9c:	2107      	movs	r1, #7
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	0f5b      	lsrs	r3, r3, #29
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	250c      	movs	r5, #12
 8003eae:	197b      	adds	r3, r7, r5
 8003eb0:	2107      	movs	r1, #7
 8003eb2:	400a      	ands	r2, r1
 8003eb4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003eb6:	183b      	adds	r3, r7, r0
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	197a      	adds	r2, r7, r5
 8003ebc:	7812      	ldrb	r2, [r2, #0]
 8003ebe:	4914      	ldr	r1, [pc, #80]	; (8003f10 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ec0:	5c8a      	ldrb	r2, [r1, r2]
 8003ec2:	435a      	muls	r2, r3
 8003ec4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ec6:	197b      	adds	r3, r7, r5
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	4a12      	ldr	r2, [pc, #72]	; (8003f14 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ecc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ece:	0019      	movs	r1, r3
 8003ed0:	f7fc f9a2 	bl	8000218 <__divsi3>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	b299      	uxth	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	226a      	movs	r2, #106	; 0x6a
 8003edc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ede:	19bb      	adds	r3, r7, r6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	193a      	adds	r2, r7, r4
 8003ee4:	7812      	ldrb	r2, [r2, #0]
 8003ee6:	490a      	ldr	r1, [pc, #40]	; (8003f10 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ee8:	5c8a      	ldrb	r2, [r1, r2]
 8003eea:	435a      	muls	r2, r3
 8003eec:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003eee:	193b      	adds	r3, r7, r4
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	4a08      	ldr	r2, [pc, #32]	; (8003f14 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ef4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	f7fc f98e 	bl	8000218 <__divsi3>
 8003efc:	0003      	movs	r3, r0
 8003efe:	b299      	uxth	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2268      	movs	r2, #104	; 0x68
 8003f04:	5299      	strh	r1, [r3, r2]
}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b005      	add	sp, #20
 8003f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	08004d68 	.word	0x08004d68
 8003f14:	08004d70 	.word	0x08004d70

08003f18 <memset>:
 8003f18:	0003      	movs	r3, r0
 8003f1a:	1882      	adds	r2, r0, r2
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d100      	bne.n	8003f22 <memset+0xa>
 8003f20:	4770      	bx	lr
 8003f22:	7019      	strb	r1, [r3, #0]
 8003f24:	3301      	adds	r3, #1
 8003f26:	e7f9      	b.n	8003f1c <memset+0x4>

08003f28 <__libc_init_array>:
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	2600      	movs	r6, #0
 8003f2c:	4c0c      	ldr	r4, [pc, #48]	; (8003f60 <__libc_init_array+0x38>)
 8003f2e:	4d0d      	ldr	r5, [pc, #52]	; (8003f64 <__libc_init_array+0x3c>)
 8003f30:	1b64      	subs	r4, r4, r5
 8003f32:	10a4      	asrs	r4, r4, #2
 8003f34:	42a6      	cmp	r6, r4
 8003f36:	d109      	bne.n	8003f4c <__libc_init_array+0x24>
 8003f38:	2600      	movs	r6, #0
 8003f3a:	f000 f819 	bl	8003f70 <_init>
 8003f3e:	4c0a      	ldr	r4, [pc, #40]	; (8003f68 <__libc_init_array+0x40>)
 8003f40:	4d0a      	ldr	r5, [pc, #40]	; (8003f6c <__libc_init_array+0x44>)
 8003f42:	1b64      	subs	r4, r4, r5
 8003f44:	10a4      	asrs	r4, r4, #2
 8003f46:	42a6      	cmp	r6, r4
 8003f48:	d105      	bne.n	8003f56 <__libc_init_array+0x2e>
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	00b3      	lsls	r3, r6, #2
 8003f4e:	58eb      	ldr	r3, [r5, r3]
 8003f50:	4798      	blx	r3
 8003f52:	3601      	adds	r6, #1
 8003f54:	e7ee      	b.n	8003f34 <__libc_init_array+0xc>
 8003f56:	00b3      	lsls	r3, r6, #2
 8003f58:	58eb      	ldr	r3, [r5, r3]
 8003f5a:	4798      	blx	r3
 8003f5c:	3601      	adds	r6, #1
 8003f5e:	e7f2      	b.n	8003f46 <__libc_init_array+0x1e>
 8003f60:	08004d80 	.word	0x08004d80
 8003f64:	08004d80 	.word	0x08004d80
 8003f68:	08004d84 	.word	0x08004d84
 8003f6c:	08004d80 	.word	0x08004d80

08003f70 <_init>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f76:	bc08      	pop	{r3}
 8003f78:	469e      	mov	lr, r3
 8003f7a:	4770      	bx	lr

08003f7c <_fini>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f82:	bc08      	pop	{r3}
 8003f84:	469e      	mov	lr, r3
 8003f86:	4770      	bx	lr
