
I2C_scanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003630  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080036ec  080036ec  000136ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003774  08003774  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800377c  0800377c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800377c  0800377c  0001377c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003780  08003780  00013780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000001c  080037a0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080037a0  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e196  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ea0  00000000  00000000  0002e21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  000300c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091f  00000000  00000000  00030c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001afcf  00000000  00000000  00031587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f713  00000000  00000000  0004c556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af727  00000000  00000000  0005bc69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000299c  00000000  00000000  0010b390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0010dd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080036d4 	.word	0x080036d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	080036d4 	.word	0x080036d4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 faa5 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f847 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f91b 	bl	8000864 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f8cb 	bl	80007c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000632:	f000 f889 	bl	8000748 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(l=0;l<128;l++){
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <main+0x8c>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	e02e      	b.n	800069c <main+0x80>
		  ret = HAL_I2C_Master_Transmit(&hi2c1,  (l << 1),(uint8_t *)dataBuffer, 11, 100);
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <main+0x8c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	b29b      	uxth	r3, r3
 8000644:	18db      	adds	r3, r3, r3
 8000646:	b299      	uxth	r1, r3
 8000648:	4a18      	ldr	r2, [pc, #96]	; (80006ac <main+0x90>)
 800064a:	4819      	ldr	r0, [pc, #100]	; (80006b0 <main+0x94>)
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	230b      	movs	r3, #11
 8000652:	f000 fe3b 	bl	80012cc <HAL_I2C_Master_Transmit>
 8000656:	0003      	movs	r3, r0
 8000658:	001a      	movs	r2, r3
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <main+0x98>)
 800065c:	601a      	str	r2, [r3, #0]
		  if ( ret != HAL_OK ) {
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <main+0x98>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d006      	beq.n	8000674 <main+0x58>
			  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8000666:	23a0      	movs	r3, #160	; 0xa0
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	2201      	movs	r2, #1
 800066c:	2120      	movs	r1, #32
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fd5e 	bl	8001130 <HAL_GPIO_WritePin>
				 }


		  if ( ret == HAL_OK ) {
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <main+0x98>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d10a      	bne.n	8000692 <main+0x76>
			  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800067c:	23a0      	movs	r3, #160	; 0xa0
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	2120      	movs	r1, #32
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fd71 	bl	800116a <HAL_GPIO_TogglePin>
			  HAL_Delay(1000);
 8000688:	23fa      	movs	r3, #250	; 0xfa
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 faf5 	bl	8000c7c <HAL_Delay>
	  for(l=0;l<128;l++){
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <main+0x8c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <main+0x8c>)
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	4b02      	ldr	r3, [pc, #8]	; (80006a8 <main+0x8c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b7f      	cmp	r3, #127	; 0x7f
 80006a2:	ddcc      	ble.n	800063e <main+0x22>
 80006a4:	e7c7      	b.n	8000636 <main+0x1a>
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000124 	.word	0x20000124
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000038 	.word	0x20000038
 80006b4:	20000120 	.word	0x20000120

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b095      	sub	sp, #84	; 0x54
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	2414      	movs	r4, #20
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	233c      	movs	r3, #60	; 0x3c
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f002 ffd7 	bl	800367c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	0018      	movs	r0, r3
 80006d2:	2310      	movs	r3, #16
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f002 ffd0 	bl	800367c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 f9a9 	bl	8001a38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2202      	movs	r2, #2
 80006ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	0052      	lsls	r2, r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2240      	movs	r2, #64	; 0x40
 80006fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	193b      	adds	r3, r7, r4
 8000708:	0018      	movs	r0, r3
 800070a:	f001 f9e1 	bl	8001ad0 <HAL_RCC_OscConfig>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000712:	f000 f8f7 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2100      	movs	r1, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fd2c 	bl	8002190 <HAL_RCC_ClockConfig>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800073c:	f000 f8e2 	bl	8000904 <Error_Handler>
  }
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b015      	add	sp, #84	; 0x54
 8000746:	bd90      	pop	{r4, r7, pc}

08000748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_I2C1_Init+0x74>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <MX_I2C1_Init+0x78>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_I2C1_Init+0x74>)
 8000754:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <MX_I2C1_Init+0x7c>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_I2C1_Init+0x74>)
 8000760:	2201      	movs	r2, #1
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_I2C1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_I2C1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_I2C1_Init+0x74>)
 8000784:	0018      	movs	r0, r3
 8000786:	f000 fd0b 	bl	80011a0 <HAL_I2C_Init>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800078e:	f000 f8b9 	bl	8000904 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_I2C1_Init+0x74>)
 8000794:	2100      	movs	r1, #0
 8000796:	0018      	movs	r0, r3
 8000798:	f001 f8b6 	bl	8001908 <HAL_I2CEx_ConfigAnalogFilter>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007a0:	f000 f8b0 	bl	8000904 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <MX_I2C1_Init+0x74>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 f8f9 	bl	80019a0 <HAL_I2CEx_ConfigDigitalFilter>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007b2:	f000 f8a7 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000038 	.word	0x20000038
 80007c0:	40005400 	.word	0x40005400
 80007c4:	00303d5b 	.word	0x00303d5b

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b23      	ldr	r3, [pc, #140]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007ce:	4a24      	ldr	r2, [pc, #144]	; (8000860 <MX_USART2_UART_Init+0x98>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b22      	ldr	r3, [pc, #136]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007d4:	22e1      	movs	r2, #225	; 0xe1
 80007d6:	0252      	lsls	r2, r2, #9
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b20      	ldr	r3, [pc, #128]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_USART2_UART_Init+0x94>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_USART2_UART_Init+0x94>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_USART2_UART_Init+0x94>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_USART2_UART_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_USART2_UART_Init+0x94>)
 8000812:	0018      	movs	r0, r3
 8000814:	f002 f8a2 	bl	800295c <HAL_UART_Init>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800081c:	f000 f872 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART2_UART_Init+0x94>)
 8000822:	2100      	movs	r1, #0
 8000824:	0018      	movs	r0, r3
 8000826:	f002 fe49 	bl	80034bc <HAL_UARTEx_SetTxFifoThreshold>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800082e:	f000 f869 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000832:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_USART2_UART_Init+0x94>)
 8000834:	2100      	movs	r1, #0
 8000836:	0018      	movs	r0, r3
 8000838:	f002 fe80 	bl	800353c <HAL_UARTEx_SetRxFifoThreshold>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000840:	f000 f860 	bl	8000904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <MX_USART2_UART_Init+0x94>)
 8000846:	0018      	movs	r0, r3
 8000848:	f002 fdfe 	bl	8003448 <HAL_UARTEx_DisableFifoMode>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000850:	f000 f858 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	2000008c 	.word	0x2000008c
 8000860:	40004400 	.word	0x40004400

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	240c      	movs	r4, #12
 800086c:	193b      	adds	r3, r7, r4
 800086e:	0018      	movs	r0, r3
 8000870:	2314      	movs	r3, #20
 8000872:	001a      	movs	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f002 ff01 	bl	800367c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_GPIO_Init+0x9c>)
 800087c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_GPIO_Init+0x9c>)
 8000880:	2104      	movs	r1, #4
 8000882:	430a      	orrs	r2, r1
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_GPIO_Init+0x9c>)
 8000888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088a:	2204      	movs	r2, #4
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_GPIO_Init+0x9c>)
 8000894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_GPIO_Init+0x9c>)
 8000898:	2120      	movs	r1, #32
 800089a:	430a      	orrs	r2, r1
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_GPIO_Init+0x9c>)
 80008a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a2:	2220      	movs	r2, #32
 80008a4:	4013      	ands	r3, r2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_GPIO_Init+0x9c>)
 80008ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_GPIO_Init+0x9c>)
 80008b0:	2101      	movs	r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_GPIO_Init+0x9c>)
 80008b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ba:	2201      	movs	r2, #1
 80008bc:	4013      	ands	r3, r2
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008c2:	23a0      	movs	r3, #160	; 0xa0
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	2200      	movs	r2, #0
 80008c8:	2120      	movs	r1, #32
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 fc30 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008d0:	0021      	movs	r1, r4
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2220      	movs	r2, #32
 80008d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2201      	movs	r2, #1
 80008dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2202      	movs	r2, #2
 80008e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008ea:	187a      	adds	r2, r7, r1
 80008ec:	23a0      	movs	r3, #160	; 0xa0
 80008ee:	05db      	lsls	r3, r3, #23
 80008f0:	0011      	movs	r1, r2
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 fab0 	bl	8000e58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b009      	add	sp, #36	; 0x24
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	40021000 	.word	0x40021000

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_MspInit+0x4c>)
 8000918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <HAL_MspInit+0x4c>)
 800091c:	2101      	movs	r1, #1
 800091e:	430a      	orrs	r2, r1
 8000920:	641a      	str	r2, [r3, #64]	; 0x40
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	2201      	movs	r2, #1
 8000928:	4013      	ands	r3, r2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_MspInit+0x4c>)
 8000930:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_MspInit+0x4c>)
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	0549      	lsls	r1, r1, #21
 8000938:	430a      	orrs	r2, r1
 800093a:	63da      	str	r2, [r3, #60]	; 0x3c
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <HAL_MspInit+0x4c>)
 800093e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	055b      	lsls	r3, r3, #21
 8000944:	4013      	ands	r3, r2
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800094a:	23c0      	movs	r3, #192	; 0xc0
 800094c:	00db      	lsls	r3, r3, #3
 800094e:	0018      	movs	r0, r3
 8000950:	f000 f9b8 	bl	8000cc4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b002      	add	sp, #8
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b09d      	sub	sp, #116	; 0x74
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	235c      	movs	r3, #92	; 0x5c
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	0018      	movs	r0, r3
 800096e:	2314      	movs	r3, #20
 8000970:	001a      	movs	r2, r3
 8000972:	2100      	movs	r1, #0
 8000974:	f002 fe82 	bl	800367c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	2410      	movs	r4, #16
 800097a:	193b      	adds	r3, r7, r4
 800097c:	0018      	movs	r0, r3
 800097e:	234c      	movs	r3, #76	; 0x4c
 8000980:	001a      	movs	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	f002 fe7a 	bl	800367c <memset>
  if(hi2c->Instance==I2C1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a23      	ldr	r2, [pc, #140]	; (8000a1c <HAL_I2C_MspInit+0xbc>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d13f      	bne.n	8000a12 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2220      	movs	r2, #32
 8000996:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fd9f 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009aa:	f7ff ffab 	bl	8000904 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <HAL_I2C_MspInit+0xc0>)
 80009b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <HAL_I2C_MspInit+0xc0>)
 80009b4:	2101      	movs	r1, #1
 80009b6:	430a      	orrs	r2, r1
 80009b8:	635a      	str	r2, [r3, #52]	; 0x34
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <HAL_I2C_MspInit+0xc0>)
 80009bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009be:	2201      	movs	r2, #1
 80009c0:	4013      	ands	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009c6:	215c      	movs	r1, #92	; 0x5c
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	22c0      	movs	r2, #192	; 0xc0
 80009cc:	00d2      	lsls	r2, r2, #3
 80009ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2212      	movs	r2, #18
 80009d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2206      	movs	r2, #6
 80009e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	187a      	adds	r2, r7, r1
 80009ea:	23a0      	movs	r3, #160	; 0xa0
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 fa31 	bl	8000e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_I2C_MspInit+0xc0>)
 80009f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_I2C_MspInit+0xc0>)
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	0389      	lsls	r1, r1, #14
 8000a00:	430a      	orrs	r2, r1
 8000a02:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_I2C_MspInit+0xc0>)
 8000a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	039b      	lsls	r3, r3, #14
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b01d      	add	sp, #116	; 0x74
 8000a18:	bd90      	pop	{r4, r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b09d      	sub	sp, #116	; 0x74
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	235c      	movs	r3, #92	; 0x5c
 8000a2e:	18fb      	adds	r3, r7, r3
 8000a30:	0018      	movs	r0, r3
 8000a32:	2314      	movs	r3, #20
 8000a34:	001a      	movs	r2, r3
 8000a36:	2100      	movs	r1, #0
 8000a38:	f002 fe20 	bl	800367c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3c:	2410      	movs	r4, #16
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	0018      	movs	r0, r3
 8000a42:	234c      	movs	r3, #76	; 0x4c
 8000a44:	001a      	movs	r2, r3
 8000a46:	2100      	movs	r1, #0
 8000a48:	f002 fe18 	bl	800367c <memset>
  if(huart->Instance==USART2)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a22      	ldr	r2, [pc, #136]	; (8000adc <HAL_UART_MspInit+0xb8>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d13e      	bne.n	8000ad4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2202      	movs	r2, #2
 8000a5a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	0018      	movs	r0, r3
 8000a66:	f001 fd3d 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a6e:	f7ff ff49 	bl	8000904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_UART_MspInit+0xbc>)
 8000a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <HAL_UART_MspInit+0xbc>)
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	0289      	lsls	r1, r1, #10
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0xbc>)
 8000a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	029b      	lsls	r3, r3, #10
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0xbc>)
 8000a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <HAL_UART_MspInit+0xbc>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	430a      	orrs	r2, r1
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0xbc>)
 8000a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000aa6:	215c      	movs	r1, #92	; 0x5c
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	187a      	adds	r2, r7, r1
 8000ac8:	23a0      	movs	r3, #160	; 0xa0
 8000aca:	05db      	lsls	r3, r3, #23
 8000acc:	0011      	movs	r1, r2
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 f9c2 	bl	8000e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b01d      	add	sp, #116	; 0x74
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b08:	f000 f89c 	bl	8000c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b20:	f7ff fff7 	bl	8000b12 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	; (8000b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	; (8000b60 <LoopForever+0xe>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	; (8000b68 <LoopForever+0x16>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b4a:	f002 fd9f 	bl	800368c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b4e:	f7ff fd65 	bl	800061c <main>

08000b52 <LoopForever>:

LoopForever:
  b LoopForever
 8000b52:	e7fe      	b.n	8000b52 <LoopForever>
  ldr   r0, =_estack
 8000b54:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b60:	08003784 	.word	0x08003784
  ldr r2, =_sbss
 8000b64:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b68:	2000012c 	.word	0x2000012c

08000b6c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC1_COMP_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_Init+0x3c>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_Init+0x3c>)
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	0049      	lsls	r1, r1, #1
 8000b86:	430a      	orrs	r2, r1
 8000b88:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 f810 	bl	8000bb0 <HAL_InitTick>
 8000b90:	1e03      	subs	r3, r0, #0
 8000b92:	d003      	beq.n	8000b9c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	e001      	b.n	8000ba0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff feb8 	bl	8000910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	781b      	ldrb	r3, [r3, #0]
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb8:	230f      	movs	r3, #15
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <HAL_InitTick+0x88>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d02b      	beq.n	8000c20 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_InitTick+0x8c>)
 8000bca:	681c      	ldr	r4, [r3, #0]
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <HAL_InitTick+0x88>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	23fa      	movs	r3, #250	; 0xfa
 8000bd4:	0098      	lsls	r0, r3, #2
 8000bd6:	f7ff fa95 	bl	8000104 <__udivsi3>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	0019      	movs	r1, r3
 8000bde:	0020      	movs	r0, r4
 8000be0:	f7ff fa90 	bl	8000104 <__udivsi3>
 8000be4:	0003      	movs	r3, r0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 f929 	bl	8000e3e <HAL_SYSTICK_Config>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d112      	bne.n	8000c16 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d80a      	bhi.n	8000c0c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	425b      	negs	r3, r3
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 f908 	bl	8000e14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_InitTick+0x90>)
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e00d      	b.n	8000c28 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
 8000c14:	e008      	b.n	8000c28 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c16:	230f      	movs	r3, #15
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	e003      	b.n	8000c28 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c20:	230f      	movs	r3, #15
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	781b      	ldrb	r3, [r3, #0]
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b005      	add	sp, #20
 8000c34:	bd90      	pop	{r4, r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	20000018 	.word	0x20000018
 8000c3c:	20000010 	.word	0x20000010
 8000c40:	20000014 	.word	0x20000014

08000c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_IncTick+0x1c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_IncTick+0x20>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	18d2      	adds	r2, r2, r3
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_IncTick+0x20>)
 8000c56:	601a      	str	r2, [r3, #0]
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	20000018 	.word	0x20000018
 8000c64:	20000128 	.word	0x20000128

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b02      	ldr	r3, [pc, #8]	; (8000c78 <HAL_GetTick+0x10>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	20000128 	.word	0x20000128

08000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff fff0 	bl	8000c68 <HAL_GetTick>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	d005      	beq.n	8000ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_Delay+0x44>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	189b      	adds	r3, r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	f7ff ffe0 	bl	8000c68 <HAL_GetTick>
 8000ca8:	0002      	movs	r2, r0
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d8f7      	bhi.n	8000ca4 <HAL_Delay+0x28>
  {
  }
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b004      	add	sp, #16
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000018 	.word	0x20000018

08000cc4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]
}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b002      	add	sp, #8
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	fffff9ff 	.word	0xfffff9ff

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	0002      	movs	r2, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b7f      	cmp	r3, #127	; 0x7f
 8000d04:	d828      	bhi.n	8000d58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d06:	4a2f      	ldr	r2, [pc, #188]	; (8000dc4 <__NVIC_SetPriority+0xd4>)
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	33c0      	adds	r3, #192	; 0xc0
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	589b      	ldr	r3, [r3, r2]
 8000d16:	1dfa      	adds	r2, r7, #7
 8000d18:	7812      	ldrb	r2, [r2, #0]
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	400a      	ands	r2, r1
 8000d20:	00d2      	lsls	r2, r2, #3
 8000d22:	21ff      	movs	r1, #255	; 0xff
 8000d24:	4091      	lsls	r1, r2
 8000d26:	000a      	movs	r2, r1
 8000d28:	43d2      	mvns	r2, r2
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	019b      	lsls	r3, r3, #6
 8000d32:	22ff      	movs	r2, #255	; 0xff
 8000d34:	401a      	ands	r2, r3
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	4003      	ands	r3, r0
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d44:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <__NVIC_SetPriority+0xd4>)
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b25b      	sxtb	r3, r3
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	33c0      	adds	r3, #192	; 0xc0
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d56:	e031      	b.n	8000dbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d58:	4a1b      	ldr	r2, [pc, #108]	; (8000dc8 <__NVIC_SetPriority+0xd8>)
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	0019      	movs	r1, r3
 8000d60:	230f      	movs	r3, #15
 8000d62:	400b      	ands	r3, r1
 8000d64:	3b08      	subs	r3, #8
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3306      	adds	r3, #6
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	18d3      	adds	r3, r2, r3
 8000d6e:	3304      	adds	r3, #4
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	1dfa      	adds	r2, r7, #7
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	0011      	movs	r1, r2
 8000d78:	2203      	movs	r2, #3
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	00d2      	lsls	r2, r2, #3
 8000d7e:	21ff      	movs	r1, #255	; 0xff
 8000d80:	4091      	lsls	r1, r2
 8000d82:	000a      	movs	r2, r1
 8000d84:	43d2      	mvns	r2, r2
 8000d86:	401a      	ands	r2, r3
 8000d88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	019b      	lsls	r3, r3, #6
 8000d8e:	22ff      	movs	r2, #255	; 0xff
 8000d90:	401a      	ands	r2, r3
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	0018      	movs	r0, r3
 8000d98:	2303      	movs	r3, #3
 8000d9a:	4003      	ands	r3, r0
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da0:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <__NVIC_SetPriority+0xd8>)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	001c      	movs	r4, r3
 8000da8:	230f      	movs	r3, #15
 8000daa:	4023      	ands	r3, r4
 8000dac:	3b08      	subs	r3, #8
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	430a      	orrs	r2, r1
 8000db2:	3306      	adds	r3, #6
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	18c3      	adds	r3, r0, r3
 8000db8:	3304      	adds	r3, #4
 8000dba:	601a      	str	r2, [r3, #0]
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b003      	add	sp, #12
 8000dc2:	bd90      	pop	{r4, r7, pc}
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	1e5a      	subs	r2, r3, #1
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	045b      	lsls	r3, r3, #17
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d301      	bcc.n	8000de4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de0:	2301      	movs	r3, #1
 8000de2:	e010      	b.n	8000e06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <SysTick_Config+0x44>)
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	3a01      	subs	r2, #1
 8000dea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dec:	2301      	movs	r3, #1
 8000dee:	425b      	negs	r3, r3
 8000df0:	2103      	movs	r1, #3
 8000df2:	0018      	movs	r0, r3
 8000df4:	f7ff ff7c 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <SysTick_Config+0x44>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <SysTick_Config+0x44>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	210f      	movs	r1, #15
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	1c02      	adds	r2, r0, #0
 8000e24:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	0011      	movs	r1, r2
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff ff5d 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b004      	add	sp, #16
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff ffbf 	bl	8000dcc <SysTick_Config>
 8000e4e:	0003      	movs	r3, r0
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b002      	add	sp, #8
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e66:	e14d      	b.n	8001104 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4091      	lsls	r1, r2
 8000e72:	000a      	movs	r2, r1
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d100      	bne.n	8000e80 <HAL_GPIO_Init+0x28>
 8000e7e:	e13e      	b.n	80010fe <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2203      	movs	r2, #3
 8000e86:	4013      	ands	r3, r2
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d005      	beq.n	8000e98 <HAL_GPIO_Init+0x40>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2203      	movs	r2, #3
 8000e92:	4013      	ands	r3, r2
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d130      	bne.n	8000efa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	409a      	lsls	r2, r3
 8000ea6:	0013      	movs	r3, r2
 8000ea8:	43da      	mvns	r2, r3
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	409a      	lsls	r2, r3
 8000eba:	0013      	movs	r3, r2
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	091b      	lsrs	r3, r3, #4
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d017      	beq.n	8000f36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	43da      	mvns	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d123      	bne.n	8000f8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	08da      	lsrs	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3208      	adds	r2, #8
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	58d3      	ldr	r3, [r2, r3]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	2207      	movs	r2, #7
 8000f54:	4013      	ands	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2107      	movs	r1, #7
 8000f6e:	400b      	ands	r3, r1
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	08da      	lsrs	r2, r3, #3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3208      	adds	r2, #8
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	6939      	ldr	r1, [r7, #16]
 8000f88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	401a      	ands	r2, r3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	23c0      	movs	r3, #192	; 0xc0
 8000fc4:	029b      	lsls	r3, r3, #10
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d100      	bne.n	8000fcc <HAL_GPIO_Init+0x174>
 8000fca:	e098      	b.n	80010fe <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000fcc:	4a53      	ldr	r2, [pc, #332]	; (800111c <HAL_GPIO_Init+0x2c4>)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3318      	adds	r3, #24
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	589b      	ldr	r3, [r3, r2]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	2203      	movs	r2, #3
 8000fde:	4013      	ands	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	43da      	mvns	r2, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	23a0      	movs	r3, #160	; 0xa0
 8000ff4:	05db      	lsls	r3, r3, #23
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x1d6>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a48      	ldr	r2, [pc, #288]	; (8001120 <HAL_GPIO_Init+0x2c8>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x1d2>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a47      	ldr	r2, [pc, #284]	; (8001124 <HAL_GPIO_Init+0x2cc>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x1ce>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a46      	ldr	r2, [pc, #280]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x1ca>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a45      	ldr	r2, [pc, #276]	; (800112c <HAL_GPIO_Init+0x2d4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x1c6>
 800101a:	2304      	movs	r3, #4
 800101c:	e008      	b.n	8001030 <HAL_GPIO_Init+0x1d8>
 800101e:	2305      	movs	r3, #5
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x1d8>
 8001022:	2303      	movs	r3, #3
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x1d8>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x1d8>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x1d8>
 800102e:	2300      	movs	r3, #0
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	2103      	movs	r1, #3
 8001034:	400a      	ands	r2, r1
 8001036:	00d2      	lsls	r2, r2, #3
 8001038:	4093      	lsls	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001040:	4936      	ldr	r1, [pc, #216]	; (800111c <HAL_GPIO_Init+0x2c4>)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3318      	adds	r3, #24
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800104e:	4b33      	ldr	r3, [pc, #204]	; (800111c <HAL_GPIO_Init+0x2c4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43da      	mvns	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	035b      	lsls	r3, r3, #13
 8001066:	4013      	ands	r3, r2
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <HAL_GPIO_Init+0x2c4>)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <HAL_GPIO_Init+0x2c4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43da      	mvns	r2, r3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	039b      	lsls	r3, r3, #14
 8001090:	4013      	ands	r3, r2
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <HAL_GPIO_Init+0x2c4>)
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010a2:	4a1e      	ldr	r2, [pc, #120]	; (800111c <HAL_GPIO_Init+0x2c4>)
 80010a4:	2384      	movs	r3, #132	; 0x84
 80010a6:	58d3      	ldr	r3, [r2, r3]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	43da      	mvns	r2, r3
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	029b      	lsls	r3, r3, #10
 80010bc:	4013      	ands	r3, r2
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010c8:	4914      	ldr	r1, [pc, #80]	; (800111c <HAL_GPIO_Init+0x2c4>)
 80010ca:	2284      	movs	r2, #132	; 0x84
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80010d0:	4a12      	ldr	r2, [pc, #72]	; (800111c <HAL_GPIO_Init+0x2c4>)
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	58d3      	ldr	r3, [r2, r3]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43da      	mvns	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	025b      	lsls	r3, r3, #9
 80010ea:	4013      	ands	r3, r2
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010f6:	4909      	ldr	r1, [pc, #36]	; (800111c <HAL_GPIO_Init+0x2c4>)
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	40da      	lsrs	r2, r3
 800110c:	1e13      	subs	r3, r2, #0
 800110e:	d000      	beq.n	8001112 <HAL_GPIO_Init+0x2ba>
 8001110:	e6aa      	b.n	8000e68 <HAL_GPIO_Init+0x10>
  }
}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b006      	add	sp, #24
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021800 	.word	0x40021800
 8001120:	50000400 	.word	0x50000400
 8001124:	50000800 	.word	0x50000800
 8001128:	50000c00 	.word	0x50000c00
 800112c:	50001000 	.word	0x50001000

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	0008      	movs	r0, r1
 800113a:	0011      	movs	r1, r2
 800113c:	1cbb      	adds	r3, r7, #2
 800113e:	1c02      	adds	r2, r0, #0
 8001140:	801a      	strh	r2, [r3, #0]
 8001142:	1c7b      	adds	r3, r7, #1
 8001144:	1c0a      	adds	r2, r1, #0
 8001146:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001148:	1c7b      	adds	r3, r7, #1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001150:	1cbb      	adds	r3, r7, #2
 8001152:	881a      	ldrh	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001158:	e003      	b.n	8001162 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800115a:	1cbb      	adds	r3, r7, #2
 800115c:	881a      	ldrh	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b002      	add	sp, #8
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	000a      	movs	r2, r1
 8001174:	1cbb      	adds	r3, r7, #2
 8001176:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800117e:	1cbb      	adds	r3, r7, #2
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	4013      	ands	r3, r2
 8001186:	041a      	lsls	r2, r3, #16
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43db      	mvns	r3, r3
 800118c:	1cb9      	adds	r1, r7, #2
 800118e:	8809      	ldrh	r1, [r1, #0]
 8001190:	400b      	ands	r3, r1
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b004      	add	sp, #16
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e082      	b.n	80012b8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2241      	movs	r2, #65	; 0x41
 80011b6:	5c9b      	ldrb	r3, [r3, r2]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d107      	bne.n	80011ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2240      	movs	r2, #64	; 0x40
 80011c2:	2100      	movs	r1, #0
 80011c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff fbc9 	bl	8000960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2241      	movs	r2, #65	; 0x41
 80011d2:	2124      	movs	r1, #36	; 0x24
 80011d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2101      	movs	r1, #1
 80011e2:	438a      	bics	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4934      	ldr	r1, [pc, #208]	; (80012c0 <HAL_I2C_Init+0x120>)
 80011f0:	400a      	ands	r2, r1
 80011f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4931      	ldr	r1, [pc, #196]	; (80012c4 <HAL_I2C_Init+0x124>)
 8001200:	400a      	ands	r2, r1
 8001202:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d108      	bne.n	800121e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	0209      	lsls	r1, r1, #8
 8001218:	430a      	orrs	r2, r1
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	e007      	b.n	800122e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2184      	movs	r1, #132	; 0x84
 8001228:	0209      	lsls	r1, r1, #8
 800122a:	430a      	orrs	r2, r1
 800122c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d104      	bne.n	8001240 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	0112      	lsls	r2, r2, #4
 800123e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	491f      	ldr	r1, [pc, #124]	; (80012c8 <HAL_I2C_Init+0x128>)
 800124c:	430a      	orrs	r2, r1
 800124e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	491a      	ldr	r1, [pc, #104]	; (80012c4 <HAL_I2C_Init+0x124>)
 800125c:	400a      	ands	r2, r1
 800125e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	431a      	orrs	r2, r3
 800126a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69d9      	ldr	r1, [r3, #28]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1a      	ldr	r2, [r3, #32]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	430a      	orrs	r2, r1
 8001298:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2241      	movs	r2, #65	; 0x41
 80012a4:	2120      	movs	r1, #32
 80012a6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2242      	movs	r2, #66	; 0x42
 80012b2:	2100      	movs	r1, #0
 80012b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b002      	add	sp, #8
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	f0ffffff 	.word	0xf0ffffff
 80012c4:	ffff7fff 	.word	0xffff7fff
 80012c8:	02008000 	.word	0x02008000

080012cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	0008      	movs	r0, r1
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	0019      	movs	r1, r3
 80012da:	230a      	movs	r3, #10
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	1c02      	adds	r2, r0, #0
 80012e0:	801a      	strh	r2, [r3, #0]
 80012e2:	2308      	movs	r3, #8
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	1c0a      	adds	r2, r1, #0
 80012e8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2241      	movs	r2, #65	; 0x41
 80012ee:	5c9b      	ldrb	r3, [r3, r2]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b20      	cmp	r3, #32
 80012f4:	d000      	beq.n	80012f8 <HAL_I2C_Master_Transmit+0x2c>
 80012f6:	e0e7      	b.n	80014c8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2240      	movs	r2, #64	; 0x40
 80012fc:	5c9b      	ldrb	r3, [r3, r2]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d101      	bne.n	8001306 <HAL_I2C_Master_Transmit+0x3a>
 8001302:	2302      	movs	r3, #2
 8001304:	e0e1      	b.n	80014ca <HAL_I2C_Master_Transmit+0x1fe>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2240      	movs	r2, #64	; 0x40
 800130a:	2101      	movs	r1, #1
 800130c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800130e:	f7ff fcab 	bl	8000c68 <HAL_GetTick>
 8001312:	0003      	movs	r3, r0
 8001314:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	0219      	lsls	r1, r3, #8
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2319      	movs	r3, #25
 8001322:	2201      	movs	r2, #1
 8001324:	f000 f8fc 	bl	8001520 <I2C_WaitOnFlagUntilTimeout>
 8001328:	1e03      	subs	r3, r0, #0
 800132a:	d001      	beq.n	8001330 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e0cc      	b.n	80014ca <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2241      	movs	r2, #65	; 0x41
 8001334:	2121      	movs	r1, #33	; 0x21
 8001336:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2242      	movs	r2, #66	; 0x42
 800133c:	2110      	movs	r1, #16
 800133e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2208      	movs	r2, #8
 8001350:	18ba      	adds	r2, r7, r2
 8001352:	8812      	ldrh	r2, [r2, #0]
 8001354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2200      	movs	r2, #0
 800135a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001360:	b29b      	uxth	r3, r3
 8001362:	2bff      	cmp	r3, #255	; 0xff
 8001364:	d911      	bls.n	800138a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	22ff      	movs	r2, #255	; 0xff
 800136a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001370:	b2da      	uxtb	r2, r3
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	045c      	lsls	r4, r3, #17
 8001376:	230a      	movs	r3, #10
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	8819      	ldrh	r1, [r3, #0]
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	4b55      	ldr	r3, [pc, #340]	; (80014d4 <HAL_I2C_Master_Transmit+0x208>)
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	0023      	movs	r3, r4
 8001384:	f000 fa86 	bl	8001894 <I2C_TransferConfig>
 8001388:	e075      	b.n	8001476 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138e:	b29a      	uxth	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001398:	b2da      	uxtb	r2, r3
 800139a:	2380      	movs	r3, #128	; 0x80
 800139c:	049c      	lsls	r4, r3, #18
 800139e:	230a      	movs	r3, #10
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	8819      	ldrh	r1, [r3, #0]
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	4b4b      	ldr	r3, [pc, #300]	; (80014d4 <HAL_I2C_Master_Transmit+0x208>)
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	0023      	movs	r3, r4
 80013ac:	f000 fa72 	bl	8001894 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80013b0:	e061      	b.n	8001476 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f000 f8f0 	bl	800159e <I2C_WaitOnTXISFlagUntilTimeout>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e081      	b.n	80014ca <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	3b01      	subs	r3, #1
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ee:	3b01      	subs	r3, #1
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d03a      	beq.n	8001476 <HAL_I2C_Master_Transmit+0x1aa>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001404:	2b00      	cmp	r3, #0
 8001406:	d136      	bne.n	8001476 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	0013      	movs	r3, r2
 8001412:	2200      	movs	r2, #0
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	f000 f883 	bl	8001520 <I2C_WaitOnFlagUntilTimeout>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d001      	beq.n	8001422 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e053      	b.n	80014ca <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001426:	b29b      	uxth	r3, r3
 8001428:	2bff      	cmp	r3, #255	; 0xff
 800142a:	d911      	bls.n	8001450 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	22ff      	movs	r2, #255	; 0xff
 8001430:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001436:	b2da      	uxtb	r2, r3
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	045c      	lsls	r4, r3, #17
 800143c:	230a      	movs	r3, #10
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	8819      	ldrh	r1, [r3, #0]
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	2300      	movs	r3, #0
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	0023      	movs	r3, r4
 800144a:	f000 fa23 	bl	8001894 <I2C_TransferConfig>
 800144e:	e012      	b.n	8001476 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001454:	b29a      	uxth	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145e:	b2da      	uxtb	r2, r3
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	049c      	lsls	r4, r3, #18
 8001464:	230a      	movs	r3, #10
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	8819      	ldrh	r1, [r3, #0]
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	2300      	movs	r3, #0
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	0023      	movs	r3, r4
 8001472:	f000 fa0f 	bl	8001894 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147a:	b29b      	uxth	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d198      	bne.n	80013b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	0018      	movs	r0, r3
 8001488:	f000 f8c8 	bl	800161c <I2C_WaitOnSTOPFlagUntilTimeout>
 800148c:	1e03      	subs	r3, r0, #0
 800148e:	d001      	beq.n	8001494 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e01a      	b.n	80014ca <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2220      	movs	r2, #32
 800149a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	490c      	ldr	r1, [pc, #48]	; (80014d8 <HAL_I2C_Master_Transmit+0x20c>)
 80014a8:	400a      	ands	r2, r1
 80014aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2241      	movs	r2, #65	; 0x41
 80014b0:	2120      	movs	r1, #32
 80014b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2242      	movs	r2, #66	; 0x42
 80014b8:	2100      	movs	r1, #0
 80014ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2240      	movs	r2, #64	; 0x40
 80014c0:	2100      	movs	r1, #0
 80014c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e000      	b.n	80014ca <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80014c8:	2302      	movs	r3, #2
  }
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b007      	add	sp, #28
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	80002000 	.word	0x80002000
 80014d8:	fe00e800 	.word	0xfe00e800

080014dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	2202      	movs	r2, #2
 80014ec:	4013      	ands	r3, r2
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d103      	bne.n	80014fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2200      	movs	r2, #0
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	2201      	movs	r2, #1
 8001502:	4013      	ands	r3, r2
 8001504:	2b01      	cmp	r3, #1
 8001506:	d007      	beq.n	8001518 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699a      	ldr	r2, [r3, #24]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2101      	movs	r1, #1
 8001514:	430a      	orrs	r2, r1
 8001516:	619a      	str	r2, [r3, #24]
  }
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b002      	add	sp, #8
 800151e:	bd80      	pop	{r7, pc}

08001520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	1dfb      	adds	r3, r7, #7
 800152e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001530:	e021      	b.n	8001576 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	d01e      	beq.n	8001576 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001538:	f7ff fb96 	bl	8000c68 <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d302      	bcc.n	800154e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d113      	bne.n	8001576 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	2220      	movs	r2, #32
 8001554:	431a      	orrs	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2241      	movs	r2, #65	; 0x41
 800155e:	2120      	movs	r1, #32
 8001560:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2242      	movs	r2, #66	; 0x42
 8001566:	2100      	movs	r1, #0
 8001568:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2240      	movs	r2, #64	; 0x40
 800156e:	2100      	movs	r1, #0
 8001570:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	4013      	ands	r3, r2
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	425a      	negs	r2, r3
 8001586:	4153      	adcs	r3, r2
 8001588:	b2db      	uxtb	r3, r3
 800158a:	001a      	movs	r2, r3
 800158c:	1dfb      	adds	r3, r7, #7
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d0ce      	beq.n	8001532 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b004      	add	sp, #16
 800159c:	bd80      	pop	{r7, pc}

0800159e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015aa:	e02b      	b.n	8001604 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	0018      	movs	r0, r3
 80015b4:	f000 f86e 	bl	8001694 <I2C_IsErrorOccurred>
 80015b8:	1e03      	subs	r3, r0, #0
 80015ba:	d001      	beq.n	80015c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e029      	b.n	8001614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3301      	adds	r3, #1
 80015c4:	d01e      	beq.n	8001604 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015c6:	f7ff fb4f 	bl	8000c68 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d302      	bcc.n	80015dc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d113      	bne.n	8001604 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	2220      	movs	r2, #32
 80015e2:	431a      	orrs	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2241      	movs	r2, #65	; 0x41
 80015ec:	2120      	movs	r1, #32
 80015ee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2242      	movs	r2, #66	; 0x42
 80015f4:	2100      	movs	r1, #0
 80015f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2240      	movs	r2, #64	; 0x40
 80015fc:	2100      	movs	r1, #0
 80015fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e007      	b.n	8001614 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2202      	movs	r2, #2
 800160c:	4013      	ands	r3, r2
 800160e:	2b02      	cmp	r3, #2
 8001610:	d1cc      	bne.n	80015ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b004      	add	sp, #16
 800161a:	bd80      	pop	{r7, pc}

0800161c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001628:	e028      	b.n	800167c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	0018      	movs	r0, r3
 8001632:	f000 f82f 	bl	8001694 <I2C_IsErrorOccurred>
 8001636:	1e03      	subs	r3, r0, #0
 8001638:	d001      	beq.n	800163e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e026      	b.n	800168c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800163e:	f7ff fb13 	bl	8000c68 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	429a      	cmp	r2, r3
 800164c:	d302      	bcc.n	8001654 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d113      	bne.n	800167c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	2220      	movs	r2, #32
 800165a:	431a      	orrs	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2241      	movs	r2, #65	; 0x41
 8001664:	2120      	movs	r1, #32
 8001666:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2242      	movs	r2, #66	; 0x42
 800166c:	2100      	movs	r1, #0
 800166e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2240      	movs	r2, #64	; 0x40
 8001674:	2100      	movs	r1, #0
 8001676:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e007      	b.n	800168c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2220      	movs	r2, #32
 8001684:	4013      	ands	r3, r2
 8001686:	2b20      	cmp	r3, #32
 8001688:	d1cf      	bne.n	800162a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b004      	add	sp, #16
 8001692:	bd80      	pop	{r7, pc}

08001694 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b08b      	sub	sp, #44	; 0x2c
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a0:	2327      	movs	r3, #39	; 0x27
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2210      	movs	r2, #16
 80016bc:	4013      	ands	r3, r2
 80016be:	d100      	bne.n	80016c2 <I2C_IsErrorOccurred+0x2e>
 80016c0:	e082      	b.n	80017c8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2210      	movs	r2, #16
 80016c8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016ca:	e060      	b.n	800178e <I2C_IsErrorOccurred+0xfa>
 80016cc:	2427      	movs	r4, #39	; 0x27
 80016ce:	193b      	adds	r3, r7, r4
 80016d0:	193a      	adds	r2, r7, r4
 80016d2:	7812      	ldrb	r2, [r2, #0]
 80016d4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	3301      	adds	r3, #1
 80016da:	d058      	beq.n	800178e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016dc:	f7ff fac4 	bl	8000c68 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d306      	bcc.n	80016fa <I2C_IsErrorOccurred+0x66>
 80016ec:	193b      	adds	r3, r7, r4
 80016ee:	193a      	adds	r2, r7, r4
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d149      	bne.n	800178e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	01db      	lsls	r3, r3, #7
 8001704:	4013      	ands	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001708:	2013      	movs	r0, #19
 800170a:	183b      	adds	r3, r7, r0
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	2142      	movs	r1, #66	; 0x42
 8001710:	5c52      	ldrb	r2, [r2, r1]
 8001712:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699a      	ldr	r2, [r3, #24]
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	401a      	ands	r2, r3
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	429a      	cmp	r2, r3
 8001726:	d126      	bne.n	8001776 <I2C_IsErrorOccurred+0xe2>
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	01db      	lsls	r3, r3, #7
 800172e:	429a      	cmp	r2, r3
 8001730:	d021      	beq.n	8001776 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001732:	183b      	adds	r3, r7, r0
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b20      	cmp	r3, #32
 8001738:	d01d      	beq.n	8001776 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	01c9      	lsls	r1, r1, #7
 8001748:	430a      	orrs	r2, r1
 800174a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800174c:	f7ff fa8c 	bl	8000c68 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001754:	e00f      	b.n	8001776 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001756:	f7ff fa87 	bl	8000c68 <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b19      	cmp	r3, #25
 8001762:	d908      	bls.n	8001776 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	2220      	movs	r2, #32
 8001768:	4313      	orrs	r3, r2
 800176a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800176c:	2327      	movs	r3, #39	; 0x27
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	2201      	movs	r2, #1
 8001772:	701a      	strb	r2, [r3, #0]

              break;
 8001774:	e00b      	b.n	800178e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	2220      	movs	r2, #32
 800177e:	4013      	ands	r3, r2
 8001780:	2127      	movs	r1, #39	; 0x27
 8001782:	187a      	adds	r2, r7, r1
 8001784:	1879      	adds	r1, r7, r1
 8001786:	7809      	ldrb	r1, [r1, #0]
 8001788:	7011      	strb	r1, [r2, #0]
 800178a:	2b20      	cmp	r3, #32
 800178c:	d1e3      	bne.n	8001756 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2220      	movs	r2, #32
 8001796:	4013      	ands	r3, r2
 8001798:	2b20      	cmp	r3, #32
 800179a:	d004      	beq.n	80017a6 <I2C_IsErrorOccurred+0x112>
 800179c:	2327      	movs	r3, #39	; 0x27
 800179e:	18fb      	adds	r3, r7, r3
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d092      	beq.n	80016cc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80017a6:	2327      	movs	r3, #39	; 0x27
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d103      	bne.n	80017b8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2220      	movs	r2, #32
 80017b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	2204      	movs	r2, #4
 80017bc:	4313      	orrs	r3, r2
 80017be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80017c0:	2327      	movs	r3, #39	; 0x27
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4013      	ands	r3, r2
 80017d8:	d00c      	beq.n	80017f4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	2201      	movs	r2, #1
 80017de:	4313      	orrs	r3, r2
 80017e0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	0052      	lsls	r2, r2, #1
 80017ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017ec:	2327      	movs	r3, #39	; 0x27
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4013      	ands	r3, r2
 80017fc:	d00c      	beq.n	8001818 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	2208      	movs	r2, #8
 8001802:	4313      	orrs	r3, r2
 8001804:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	00d2      	lsls	r2, r2, #3
 800180e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001810:	2327      	movs	r3, #39	; 0x27
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4013      	ands	r3, r2
 8001820:	d00c      	beq.n	800183c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	2202      	movs	r2, #2
 8001826:	4313      	orrs	r3, r2
 8001828:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001834:	2327      	movs	r3, #39	; 0x27
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800183c:	2327      	movs	r3, #39	; 0x27
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d01d      	beq.n	8001882 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff fe47 	bl	80014dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	490d      	ldr	r1, [pc, #52]	; (8001890 <I2C_IsErrorOccurred+0x1fc>)
 800185a:	400a      	ands	r2, r1
 800185c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	431a      	orrs	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2241      	movs	r2, #65	; 0x41
 800186e:	2120      	movs	r1, #32
 8001870:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2242      	movs	r2, #66	; 0x42
 8001876:	2100      	movs	r1, #0
 8001878:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2240      	movs	r2, #64	; 0x40
 800187e:	2100      	movs	r1, #0
 8001880:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001882:	2327      	movs	r3, #39	; 0x27
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	781b      	ldrb	r3, [r3, #0]
}
 8001888:	0018      	movs	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	b00b      	add	sp, #44	; 0x2c
 800188e:	bd90      	pop	{r4, r7, pc}
 8001890:	fe00e800 	.word	0xfe00e800

08001894 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	0008      	movs	r0, r1
 800189e:	0011      	movs	r1, r2
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	240a      	movs	r4, #10
 80018a4:	193b      	adds	r3, r7, r4
 80018a6:	1c02      	adds	r2, r0, #0
 80018a8:	801a      	strh	r2, [r3, #0]
 80018aa:	2009      	movs	r0, #9
 80018ac:	183b      	adds	r3, r7, r0
 80018ae:	1c0a      	adds	r2, r1, #0
 80018b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018b2:	193b      	adds	r3, r7, r4
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	059b      	lsls	r3, r3, #22
 80018b8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018ba:	183b      	adds	r3, r7, r0
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	0419      	lsls	r1, r3, #16
 80018c0:	23ff      	movs	r3, #255	; 0xff
 80018c2:	041b      	lsls	r3, r3, #16
 80018c4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018c6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ce:	4313      	orrs	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018de:	0d51      	lsrs	r1, r2, #21
 80018e0:	2280      	movs	r2, #128	; 0x80
 80018e2:	00d2      	lsls	r2, r2, #3
 80018e4:	400a      	ands	r2, r1
 80018e6:	4907      	ldr	r1, [pc, #28]	; (8001904 <I2C_TransferConfig+0x70>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	43d2      	mvns	r2, r2
 80018ec:	401a      	ands	r2, r3
 80018ee:	0011      	movs	r1, r2
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b007      	add	sp, #28
 8001900:	bd90      	pop	{r4, r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	03ff63ff 	.word	0x03ff63ff

08001908 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2241      	movs	r2, #65	; 0x41
 8001916:	5c9b      	ldrb	r3, [r3, r2]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b20      	cmp	r3, #32
 800191c:	d138      	bne.n	8001990 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2240      	movs	r2, #64	; 0x40
 8001922:	5c9b      	ldrb	r3, [r3, r2]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001928:	2302      	movs	r3, #2
 800192a:	e032      	b.n	8001992 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2240      	movs	r2, #64	; 0x40
 8001930:	2101      	movs	r1, #1
 8001932:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2241      	movs	r2, #65	; 0x41
 8001938:	2124      	movs	r1, #36	; 0x24
 800193a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2101      	movs	r1, #1
 8001948:	438a      	bics	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4911      	ldr	r1, [pc, #68]	; (800199c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001958:	400a      	ands	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2101      	movs	r1, #1
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2241      	movs	r2, #65	; 0x41
 8001980:	2120      	movs	r1, #32
 8001982:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2240      	movs	r2, #64	; 0x40
 8001988:	2100      	movs	r1, #0
 800198a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	e000      	b.n	8001992 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001990:	2302      	movs	r3, #2
  }
}
 8001992:	0018      	movs	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	b002      	add	sp, #8
 8001998:	bd80      	pop	{r7, pc}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	ffffefff 	.word	0xffffefff

080019a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2241      	movs	r2, #65	; 0x41
 80019ae:	5c9b      	ldrb	r3, [r3, r2]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b20      	cmp	r3, #32
 80019b4:	d139      	bne.n	8001a2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2240      	movs	r2, #64	; 0x40
 80019ba:	5c9b      	ldrb	r3, [r3, r2]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e033      	b.n	8001a2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2240      	movs	r2, #64	; 0x40
 80019c8:	2101      	movs	r1, #1
 80019ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2241      	movs	r2, #65	; 0x41
 80019d0:	2124      	movs	r1, #36	; 0x24
 80019d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2101      	movs	r1, #1
 80019e0:	438a      	bics	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a11      	ldr	r2, [pc, #68]	; (8001a34 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2101      	movs	r1, #1
 8001a12:	430a      	orrs	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2241      	movs	r2, #65	; 0x41
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2240      	movs	r2, #64	; 0x40
 8001a22:	2100      	movs	r1, #0
 8001a24:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a2a:	2302      	movs	r3, #2
  }
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	b004      	add	sp, #16
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	fffff0ff 	.word	0xfffff0ff

08001a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a19      	ldr	r2, [pc, #100]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	0019      	movs	r1, r3
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d11f      	bne.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	0013      	movs	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	189b      	adds	r3, r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4912      	ldr	r1, [pc, #72]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7fe fb4a 	bl	8000104 <__udivsi3>
 8001a70:	0003      	movs	r3, r0
 8001a72:	3301      	adds	r3, #1
 8001a74:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a76:	e008      	b.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	e001      	b.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e009      	b.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	401a      	ands	r2, r3
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d0ed      	beq.n	8001a78 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b004      	add	sp, #16
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	fffff9ff 	.word	0xfffff9ff
 8001ab0:	20000010 	.word	0x20000010
 8001ab4:	000f4240 	.word	0x000f4240

08001ab8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <LL_RCC_GetAPB1Prescaler+0x14>)
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	23e0      	movs	r3, #224	; 0xe0
 8001ac2:	01db      	lsls	r3, r3, #7
 8001ac4:	4013      	ands	r3, r2
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f000 fb50 	bl	8002184 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	d100      	bne.n	8001af0 <HAL_RCC_OscConfig+0x20>
 8001aee:	e07c      	b.n	8001bea <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af0:	4bc3      	ldr	r3, [pc, #780]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2238      	movs	r2, #56	; 0x38
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001afa:	4bc1      	ldr	r3, [pc, #772]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2203      	movs	r2, #3
 8001b00:	4013      	ands	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d102      	bne.n	8001b10 <HAL_RCC_OscConfig+0x40>
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d002      	beq.n	8001b16 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d10b      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b16:	4bba      	ldr	r3, [pc, #744]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	029b      	lsls	r3, r3, #10
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d062      	beq.n	8001be8 <HAL_RCC_OscConfig+0x118>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d15e      	bne.n	8001be8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e32a      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	025b      	lsls	r3, r3, #9
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_OscConfig+0x7a>
 8001b3a:	4bb1      	ldr	r3, [pc, #708]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4bb0      	ldr	r3, [pc, #704]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001b40:	2180      	movs	r1, #128	; 0x80
 8001b42:	0249      	lsls	r1, r1, #9
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e020      	b.n	8001b8c <HAL_RCC_OscConfig+0xbc>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	23a0      	movs	r3, #160	; 0xa0
 8001b50:	02db      	lsls	r3, r3, #11
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d10e      	bne.n	8001b74 <HAL_RCC_OscConfig+0xa4>
 8001b56:	4baa      	ldr	r3, [pc, #680]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4ba9      	ldr	r3, [pc, #676]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	02c9      	lsls	r1, r1, #11
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	4ba6      	ldr	r3, [pc, #664]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4ba5      	ldr	r3, [pc, #660]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001b6a:	2180      	movs	r1, #128	; 0x80
 8001b6c:	0249      	lsls	r1, r1, #9
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0xbc>
 8001b74:	4ba2      	ldr	r3, [pc, #648]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4ba1      	ldr	r3, [pc, #644]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001b7a:	49a2      	ldr	r1, [pc, #648]	; (8001e04 <HAL_RCC_OscConfig+0x334>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	4b9f      	ldr	r3, [pc, #636]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b9e      	ldr	r3, [pc, #632]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001b86:	49a0      	ldr	r1, [pc, #640]	; (8001e08 <HAL_RCC_OscConfig+0x338>)
 8001b88:	400a      	ands	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d014      	beq.n	8001bbe <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff f868 	bl	8000c68 <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b9e:	f7ff f863 	bl	8000c68 <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b64      	cmp	r3, #100	; 0x64
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e2e9      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb0:	4b93      	ldr	r3, [pc, #588]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	029b      	lsls	r3, r3, #10
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0xce>
 8001bbc:	e015      	b.n	8001bea <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7ff f853 	bl	8000c68 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff f84e 	bl	8000c68 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e2d4      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bda:	4b89      	ldr	r3, [pc, #548]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	029b      	lsls	r3, r3, #10
 8001be2:	4013      	ands	r3, r2
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xf8>
 8001be6:	e000      	b.n	8001bea <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d100      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x126>
 8001bf4:	e099      	b.n	8001d2a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf6:	4b82      	ldr	r3, [pc, #520]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2238      	movs	r2, #56	; 0x38
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c00:	4b7f      	ldr	r3, [pc, #508]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2203      	movs	r2, #3
 8001c06:	4013      	ands	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	2b10      	cmp	r3, #16
 8001c0e:	d102      	bne.n	8001c16 <HAL_RCC_OscConfig+0x146>
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d135      	bne.n	8001c88 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c1c:	4b78      	ldr	r3, [pc, #480]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4013      	ands	r3, r2
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_OscConfig+0x164>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e2a7      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c34:	4b72      	ldr	r3, [pc, #456]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a74      	ldr	r2, [pc, #464]	; (8001e0c <HAL_RCC_OscConfig+0x33c>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	021a      	lsls	r2, r3, #8
 8001c44:	4b6e      	ldr	r3, [pc, #440]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001c46:	430a      	orrs	r2, r1
 8001c48:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d112      	bne.n	8001c76 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c50:	4b6b      	ldr	r3, [pc, #428]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a6e      	ldr	r2, [pc, #440]	; (8001e10 <HAL_RCC_OscConfig+0x340>)
 8001c56:	4013      	ands	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c64:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	0adb      	lsrs	r3, r3, #11
 8001c6a:	2207      	movs	r2, #7
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	4a69      	ldr	r2, [pc, #420]	; (8001e14 <HAL_RCC_OscConfig+0x344>)
 8001c70:	40da      	lsrs	r2, r3
 8001c72:	4b69      	ldr	r3, [pc, #420]	; (8001e18 <HAL_RCC_OscConfig+0x348>)
 8001c74:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c76:	4b69      	ldr	r3, [pc, #420]	; (8001e1c <HAL_RCC_OscConfig+0x34c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f7fe ff98 	bl	8000bb0 <HAL_InitTick>
 8001c80:	1e03      	subs	r3, r0, #0
 8001c82:	d051      	beq.n	8001d28 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e27d      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d030      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c90:	4b5b      	ldr	r3, [pc, #364]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a5e      	ldr	r2, [pc, #376]	; (8001e10 <HAL_RCC_OscConfig+0x340>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	4b58      	ldr	r3, [pc, #352]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ca4:	4b56      	ldr	r3, [pc, #344]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	0049      	lsls	r1, r1, #1
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb2:	f7fe ffd9 	bl	8000c68 <HAL_GetTick>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7fe ffd4 	bl	8000c68 <HAL_GetTick>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e25a      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cce:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4a4b      	ldr	r2, [pc, #300]	; (8001e0c <HAL_RCC_OscConfig+0x33c>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	021a      	lsls	r2, r3, #8
 8001cea:	4b45      	ldr	r3, [pc, #276]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001cec:	430a      	orrs	r2, r1
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	e01b      	b.n	8001d2a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001cf2:	4b43      	ldr	r3, [pc, #268]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001cf8:	4949      	ldr	r1, [pc, #292]	; (8001e20 <HAL_RCC_OscConfig+0x350>)
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7fe ffb3 	bl	8000c68 <HAL_GetTick>
 8001d02:	0003      	movs	r3, r0
 8001d04:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d08:	f7fe ffae 	bl	8000c68 <HAL_GetTick>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e234      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d1a:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4013      	ands	r3, r2
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x238>
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2208      	movs	r2, #8
 8001d30:	4013      	ands	r3, r2
 8001d32:	d047      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d34:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2238      	movs	r2, #56	; 0x38
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b18      	cmp	r3, #24
 8001d3e:	d10a      	bne.n	8001d56 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001d40:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d03c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x2f4>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d138      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e216      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d019      	beq.n	8001d92 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d5e:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001d60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d62:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001d64:	2101      	movs	r1, #1
 8001d66:	430a      	orrs	r2, r1
 8001d68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7fe ff7d 	bl	8000c68 <HAL_GetTick>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d74:	f7fe ff78 	bl	8000c68 <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1fe      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d0f1      	beq.n	8001d74 <HAL_RCC_OscConfig+0x2a4>
 8001d90:	e018      	b.n	8001dc4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d92:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001d94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001d98:	2101      	movs	r1, #1
 8001d9a:	438a      	bics	r2, r1
 8001d9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ff63 	bl	8000c68 <HAL_GetTick>
 8001da2:	0003      	movs	r3, r0
 8001da4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da8:	f7fe ff5e 	bl	8000c68 <HAL_GetTick>
 8001dac:	0002      	movs	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e1e4      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d1f1      	bne.n	8001da8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d100      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x300>
 8001dce:	e0c7      	b.n	8001f60 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd0:	231f      	movs	r3, #31
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2238      	movs	r2, #56	; 0x38
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d11f      	bne.n	8001e24 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_OscConfig+0x330>)
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	2202      	movs	r2, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d100      	bne.n	8001df0 <HAL_RCC_OscConfig+0x320>
 8001dee:	e0b7      	b.n	8001f60 <HAL_RCC_OscConfig+0x490>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d000      	beq.n	8001dfa <HAL_RCC_OscConfig+0x32a>
 8001df8:	e0b2      	b.n	8001f60 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e1c2      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40021000 	.word	0x40021000
 8001e04:	fffeffff 	.word	0xfffeffff
 8001e08:	fffbffff 	.word	0xfffbffff
 8001e0c:	ffff80ff 	.word	0xffff80ff
 8001e10:	ffffc7ff 	.word	0xffffc7ff
 8001e14:	00f42400 	.word	0x00f42400
 8001e18:	20000010 	.word	0x20000010
 8001e1c:	20000014 	.word	0x20000014
 8001e20:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e24:	4bb5      	ldr	r3, [pc, #724]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	055b      	lsls	r3, r3, #21
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_OscConfig+0x364>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x366>
 8001e34:	2300      	movs	r3, #0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d011      	beq.n	8001e5e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	4bb0      	ldr	r3, [pc, #704]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e3e:	4baf      	ldr	r3, [pc, #700]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0549      	lsls	r1, r1, #21
 8001e44:	430a      	orrs	r2, r1
 8001e46:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e48:	4bac      	ldr	r3, [pc, #688]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	055b      	lsls	r3, r3, #21
 8001e50:	4013      	ands	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001e56:	231f      	movs	r3, #31
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5e:	4ba8      	ldr	r3, [pc, #672]	; (8002100 <HAL_RCC_OscConfig+0x630>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4013      	ands	r3, r2
 8001e68:	d11a      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e6a:	4ba5      	ldr	r3, [pc, #660]	; (8002100 <HAL_RCC_OscConfig+0x630>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4ba4      	ldr	r3, [pc, #656]	; (8002100 <HAL_RCC_OscConfig+0x630>)
 8001e70:	2180      	movs	r1, #128	; 0x80
 8001e72:	0049      	lsls	r1, r1, #1
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001e78:	f7fe fef6 	bl	8000c68 <HAL_GetTick>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7fe fef1 	bl	8000c68 <HAL_GetTick>
 8001e86:	0002      	movs	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e177      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e94:	4b9a      	ldr	r3, [pc, #616]	; (8002100 <HAL_RCC_OscConfig+0x630>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x3e6>
 8001ea8:	4b94      	ldr	r3, [pc, #592]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001eaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eac:	4b93      	ldr	r3, [pc, #588]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x420>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x408>
 8001ebe:	4b8f      	ldr	r3, [pc, #572]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001ec0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ec2:	4b8e      	ldr	r3, [pc, #568]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001ec4:	2104      	movs	r1, #4
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001eca:	4b8c      	ldr	r3, [pc, #560]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001ecc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ece:	4b8b      	ldr	r3, [pc, #556]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x420>
 8001ed8:	4b88      	ldr	r3, [pc, #544]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001eda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001edc:	4b87      	ldr	r3, [pc, #540]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001ede:	2101      	movs	r1, #1
 8001ee0:	438a      	bics	r2, r1
 8001ee2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ee4:	4b85      	ldr	r3, [pc, #532]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001ee6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ee8:	4b84      	ldr	r3, [pc, #528]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001eea:	2104      	movs	r1, #4
 8001eec:	438a      	bics	r2, r1
 8001eee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d014      	beq.n	8001f22 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe feb6 	bl	8000c68 <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f00:	e009      	b.n	8001f16 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7fe feb1 	bl	8000c68 <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	4a7d      	ldr	r2, [pc, #500]	; (8002104 <HAL_RCC_OscConfig+0x634>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e136      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f16:	4b79      	ldr	r3, [pc, #484]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x432>
 8001f20:	e013      	b.n	8001f4a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7fe fea1 	bl	8000c68 <HAL_GetTick>
 8001f26:	0003      	movs	r3, r0
 8001f28:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f2a:	e009      	b.n	8001f40 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2c:	f7fe fe9c 	bl	8000c68 <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	4a73      	ldr	r2, [pc, #460]	; (8002104 <HAL_RCC_OscConfig+0x634>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e121      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f40:	4b6e      	ldr	r3, [pc, #440]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	2202      	movs	r2, #2
 8001f46:	4013      	ands	r3, r2
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f4a:	231f      	movs	r3, #31
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f54:	4b69      	ldr	r3, [pc, #420]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f58:	4b68      	ldr	r3, [pc, #416]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001f5a:	496b      	ldr	r1, [pc, #428]	; (8002108 <HAL_RCC_OscConfig+0x638>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2220      	movs	r2, #32
 8001f66:	4013      	ands	r3, r2
 8001f68:	d039      	beq.n	8001fde <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01b      	beq.n	8001faa <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f72:	4b62      	ldr	r3, [pc, #392]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b61      	ldr	r3, [pc, #388]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	03c9      	lsls	r1, r1, #15
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7fe fe72 	bl	8000c68 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f8a:	f7fe fe6d 	bl	8000c68 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0f3      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001f9c:	4b57      	ldr	r3, [pc, #348]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	041b      	lsls	r3, r3, #16
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x4ba>
 8001fa8:	e019      	b.n	8001fde <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001faa:	4b54      	ldr	r3, [pc, #336]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b53      	ldr	r3, [pc, #332]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001fb0:	4956      	ldr	r1, [pc, #344]	; (800210c <HAL_RCC_OscConfig+0x63c>)
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7fe fe57 	bl	8000c68 <HAL_GetTick>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fc0:	f7fe fe52 	bl	8000c68 <HAL_GetTick>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e0d8      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	041b      	lsls	r3, r3, #16
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d100      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x518>
 8001fe6:	e0cc      	b.n	8002182 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe8:	4b44      	ldr	r3, [pc, #272]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2238      	movs	r2, #56	; 0x38
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d100      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x526>
 8001ff4:	e07b      	b.n	80020ee <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d156      	bne.n	80020ac <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffe:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8002004:	4942      	ldr	r1, [pc, #264]	; (8002110 <HAL_RCC_OscConfig+0x640>)
 8002006:	400a      	ands	r2, r1
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200a:	f7fe fe2d 	bl	8000c68 <HAL_GetTick>
 800200e:	0003      	movs	r3, r0
 8002010:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe fe28 	bl	8000c68 <HAL_GetTick>
 8002018:	0002      	movs	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e0ae      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002026:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	049b      	lsls	r3, r3, #18
 800202e:	4013      	ands	r3, r2
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002032:	4b32      	ldr	r3, [pc, #200]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	4a37      	ldr	r2, [pc, #220]	; (8002114 <HAL_RCC_OscConfig+0x644>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205e:	431a      	orrs	r2, r3
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8002062:	430a      	orrs	r2, r1
 8002064:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b24      	ldr	r3, [pc, #144]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	0449      	lsls	r1, r1, #17
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002074:	4b21      	ldr	r3, [pc, #132]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	0549      	lsls	r1, r1, #21
 800207e:	430a      	orrs	r2, r1
 8002080:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7fe fdf1 	bl	8000c68 <HAL_GetTick>
 8002086:	0003      	movs	r3, r0
 8002088:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fdec 	bl	8000c68 <HAL_GetTick>
 8002090:	0002      	movs	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e072      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	049b      	lsls	r3, r3, #18
 80020a6:	4013      	ands	r3, r2
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x5bc>
 80020aa:	e06a      	b.n	8002182 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 80020b2:	4917      	ldr	r1, [pc, #92]	; (8002110 <HAL_RCC_OscConfig+0x640>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe fdd6 	bl	8000c68 <HAL_GetTick>
 80020bc:	0003      	movs	r3, r0
 80020be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c2:	f7fe fdd1 	bl	8000c68 <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e057      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2380      	movs	r3, #128	; 0x80
 80020da:	049b      	lsls	r3, r3, #18
 80020dc:	4013      	ands	r3, r2
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_RCC_OscConfig+0x62c>)
 80020e6:	490c      	ldr	r1, [pc, #48]	; (8002118 <HAL_RCC_OscConfig+0x648>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	e049      	b.n	8002182 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d112      	bne.n	800211c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e044      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
 8002104:	00001388 	.word	0x00001388
 8002108:	efffffff 	.word	0xefffffff
 800210c:	ffbfffff 	.word	0xffbfffff
 8002110:	feffffff 	.word	0xfeffffff
 8002114:	11c1808c 	.word	0x11c1808c
 8002118:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_RCC_OscConfig+0x6bc>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2203      	movs	r2, #3
 8002126:	401a      	ands	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	429a      	cmp	r2, r3
 800212e:	d126      	bne.n	800217e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2270      	movs	r2, #112	; 0x70
 8002134:	401a      	ands	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d11f      	bne.n	800217e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	23fe      	movs	r3, #254	; 0xfe
 8002142:	01db      	lsls	r3, r3, #7
 8002144:	401a      	ands	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d116      	bne.n	800217e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	23f8      	movs	r3, #248	; 0xf8
 8002154:	039b      	lsls	r3, r3, #14
 8002156:	401a      	ands	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d10e      	bne.n	800217e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	23e0      	movs	r3, #224	; 0xe0
 8002164:	051b      	lsls	r3, r3, #20
 8002166:	401a      	ands	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	0f5b      	lsrs	r3, r3, #29
 8002174:	075a      	lsls	r2, r3, #29
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b008      	add	sp, #32
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000

08002190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0e9      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a4:	4b76      	ldr	r3, [pc, #472]	; (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2207      	movs	r2, #7
 80021aa:	4013      	ands	r3, r2
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d91e      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b73      	ldr	r3, [pc, #460]	; (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2207      	movs	r2, #7
 80021b8:	4393      	bics	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	4b70      	ldr	r3, [pc, #448]	; (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021c4:	f7fe fd50 	bl	8000c68 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021cc:	e009      	b.n	80021e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ce:	f7fe fd4b 	bl	8000c68 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	4a6a      	ldr	r2, [pc, #424]	; (8002384 <HAL_RCC_ClockConfig+0x1f4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e0ca      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021e2:	4b67      	ldr	r3, [pc, #412]	; (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2207      	movs	r2, #7
 80021e8:	4013      	ands	r3, r2
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1ee      	bne.n	80021ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2202      	movs	r2, #2
 80021f6:	4013      	ands	r3, r2
 80021f8:	d015      	beq.n	8002226 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2204      	movs	r2, #4
 8002200:	4013      	ands	r3, r2
 8002202:	d006      	beq.n	8002212 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002204:	4b60      	ldr	r3, [pc, #384]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	4b5f      	ldr	r3, [pc, #380]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 800220a:	21e0      	movs	r1, #224	; 0xe0
 800220c:	01c9      	lsls	r1, r1, #7
 800220e:	430a      	orrs	r2, r1
 8002210:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002212:	4b5d      	ldr	r3, [pc, #372]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	4a5d      	ldr	r2, [pc, #372]	; (800238c <HAL_RCC_ClockConfig+0x1fc>)
 8002218:	4013      	ands	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	4b59      	ldr	r3, [pc, #356]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 8002222:	430a      	orrs	r2, r1
 8002224:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2201      	movs	r2, #1
 800222c:	4013      	ands	r3, r2
 800222e:	d057      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002238:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	029b      	lsls	r3, r3, #10
 8002240:	4013      	ands	r3, r2
 8002242:	d12b      	bne.n	800229c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e097      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d107      	bne.n	8002260 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002250:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	049b      	lsls	r3, r3, #18
 8002258:	4013      	ands	r3, r2
 800225a:	d11f      	bne.n	800229c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e08b      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d107      	bne.n	8002278 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002268:	4b47      	ldr	r3, [pc, #284]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4013      	ands	r3, r2
 8002272:	d113      	bne.n	800229c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e07f      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b03      	cmp	r3, #3
 800227e:	d106      	bne.n	800228e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002280:	4b41      	ldr	r3, [pc, #260]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 8002282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002284:	2202      	movs	r2, #2
 8002286:	4013      	ands	r3, r2
 8002288:	d108      	bne.n	800229c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e074      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228e:	4b3e      	ldr	r3, [pc, #248]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 8002290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002292:	2202      	movs	r2, #2
 8002294:	4013      	ands	r3, r2
 8002296:	d101      	bne.n	800229c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e06d      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800229c:	4b3a      	ldr	r3, [pc, #232]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2207      	movs	r2, #7
 80022a2:	4393      	bics	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 80022ac:	430a      	orrs	r2, r1
 80022ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b0:	f7fe fcda 	bl	8000c68 <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b8:	e009      	b.n	80022ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ba:	f7fe fcd5 	bl	8000c68 <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	4a2f      	ldr	r2, [pc, #188]	; (8002384 <HAL_RCC_ClockConfig+0x1f4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e054      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ce:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2238      	movs	r2, #56	; 0x38
 80022d4:	401a      	ands	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1ec      	bne.n	80022ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2207      	movs	r2, #7
 80022e6:	4013      	ands	r3, r2
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d21e      	bcs.n	800232c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2207      	movs	r2, #7
 80022f4:	4393      	bics	r3, r2
 80022f6:	0019      	movs	r1, r3
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002300:	f7fe fcb2 	bl	8000c68 <HAL_GetTick>
 8002304:	0003      	movs	r3, r0
 8002306:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002308:	e009      	b.n	800231e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800230a:	f7fe fcad 	bl	8000c68 <HAL_GetTick>
 800230e:	0002      	movs	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_RCC_ClockConfig+0x1f4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e02c      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2207      	movs	r2, #7
 8002324:	4013      	ands	r3, r2
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d1ee      	bne.n	800230a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2204      	movs	r2, #4
 8002332:	4013      	ands	r3, r2
 8002334:	d009      	beq.n	800234a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002336:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4a15      	ldr	r2, [pc, #84]	; (8002390 <HAL_RCC_ClockConfig+0x200>)
 800233c:	4013      	ands	r3, r2
 800233e:	0019      	movs	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	4b10      	ldr	r3, [pc, #64]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 8002346:	430a      	orrs	r2, r1
 8002348:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800234a:	f000 f829 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 800234e:	0001      	movs	r1, r0
 8002350:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_RCC_ClockConfig+0x1f8>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	220f      	movs	r2, #15
 8002358:	401a      	ands	r2, r3
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_RCC_ClockConfig+0x204>)
 800235c:	0092      	lsls	r2, r2, #2
 800235e:	58d3      	ldr	r3, [r2, r3]
 8002360:	221f      	movs	r2, #31
 8002362:	4013      	ands	r3, r2
 8002364:	000a      	movs	r2, r1
 8002366:	40da      	lsrs	r2, r3
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_ClockConfig+0x208>)
 800236a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_RCC_ClockConfig+0x20c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0018      	movs	r0, r3
 8002372:	f7fe fc1d 	bl	8000bb0 <HAL_InitTick>
 8002376:	0003      	movs	r3, r0
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b004      	add	sp, #16
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40022000 	.word	0x40022000
 8002384:	00001388 	.word	0x00001388
 8002388:	40021000 	.word	0x40021000
 800238c:	fffff0ff 	.word	0xfffff0ff
 8002390:	ffff8fff 	.word	0xffff8fff
 8002394:	080036ec 	.word	0x080036ec
 8002398:	20000010 	.word	0x20000010
 800239c:	20000014 	.word	0x20000014

080023a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a6:	4b3c      	ldr	r3, [pc, #240]	; (8002498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2238      	movs	r2, #56	; 0x38
 80023ac:	4013      	ands	r3, r2
 80023ae:	d10f      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80023b0:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0adb      	lsrs	r3, r3, #11
 80023b6:	2207      	movs	r2, #7
 80023b8:	4013      	ands	r3, r2
 80023ba:	2201      	movs	r2, #1
 80023bc:	409a      	lsls	r2, r3
 80023be:	0013      	movs	r3, r2
 80023c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80023c2:	6839      	ldr	r1, [r7, #0]
 80023c4:	4835      	ldr	r0, [pc, #212]	; (800249c <HAL_RCC_GetSysClockFreq+0xfc>)
 80023c6:	f7fd fe9d 	bl	8000104 <__udivsi3>
 80023ca:	0003      	movs	r3, r0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	e05d      	b.n	800248c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023d0:	4b31      	ldr	r3, [pc, #196]	; (8002498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2238      	movs	r2, #56	; 0x38
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d102      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023dc:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	e054      	b.n	800248c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e2:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2238      	movs	r2, #56	; 0x38
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d138      	bne.n	8002460 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80023ee:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2203      	movs	r2, #3
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f8:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	2207      	movs	r2, #7
 8002400:	4013      	ands	r3, r2
 8002402:	3301      	adds	r3, #1
 8002404:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d10d      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	4824      	ldr	r0, [pc, #144]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002410:	f7fd fe78 	bl	8000104 <__udivsi3>
 8002414:	0003      	movs	r3, r0
 8002416:	0019      	movs	r1, r3
 8002418:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <HAL_RCC_GetSysClockFreq+0xf8>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	227f      	movs	r2, #127	; 0x7f
 8002420:	4013      	ands	r3, r2
 8002422:	434b      	muls	r3, r1
 8002424:	617b      	str	r3, [r7, #20]
        break;
 8002426:	e00d      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	481c      	ldr	r0, [pc, #112]	; (800249c <HAL_RCC_GetSysClockFreq+0xfc>)
 800242c:	f7fd fe6a 	bl	8000104 <__udivsi3>
 8002430:	0003      	movs	r3, r0
 8002432:	0019      	movs	r1, r3
 8002434:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	227f      	movs	r2, #127	; 0x7f
 800243c:	4013      	ands	r3, r2
 800243e:	434b      	muls	r3, r1
 8002440:	617b      	str	r3, [r7, #20]
        break;
 8002442:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0f5b      	lsrs	r3, r3, #29
 800244a:	2207      	movs	r2, #7
 800244c:	4013      	ands	r3, r2
 800244e:	3301      	adds	r3, #1
 8002450:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	6978      	ldr	r0, [r7, #20]
 8002456:	f7fd fe55 	bl	8000104 <__udivsi3>
 800245a:	0003      	movs	r3, r0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	e015      	b.n	800248c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2238      	movs	r2, #56	; 0x38
 8002466:	4013      	ands	r3, r2
 8002468:	2b20      	cmp	r3, #32
 800246a:	d103      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	e00b      	b.n	800248c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2238      	movs	r2, #56	; 0x38
 800247a:	4013      	ands	r3, r2
 800247c:	2b18      	cmp	r3, #24
 800247e:	d103      	bne.n	8002488 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002480:	23fa      	movs	r3, #250	; 0xfa
 8002482:	01db      	lsls	r3, r3, #7
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	e001      	b.n	800248c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800248c:	693b      	ldr	r3, [r7, #16]
}
 800248e:	0018      	movs	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	b006      	add	sp, #24
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	40021000 	.word	0x40021000
 800249c:	00f42400 	.word	0x00f42400
 80024a0:	007a1200 	.word	0x007a1200

080024a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a8:	4b02      	ldr	r3, [pc, #8]	; (80024b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	0018      	movs	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	20000010 	.word	0x20000010

080024b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80024bc:	f7ff fff2 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024c0:	0004      	movs	r4, r0
 80024c2:	f7ff faf9 	bl	8001ab8 <LL_RCC_GetAPB1Prescaler>
 80024c6:	0003      	movs	r3, r0
 80024c8:	0b1a      	lsrs	r2, r3, #12
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024cc:	0092      	lsls	r2, r2, #2
 80024ce:	58d3      	ldr	r3, [r2, r3]
 80024d0:	221f      	movs	r2, #31
 80024d2:	4013      	ands	r3, r2
 80024d4:	40dc      	lsrs	r4, r3
 80024d6:	0023      	movs	r3, r4
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	bdb0      	pop	{r4, r5, r7, pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	0800372c 	.word	0x0800372c

080024e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80024ec:	2313      	movs	r3, #19
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f4:	2312      	movs	r3, #18
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	029b      	lsls	r3, r3, #10
 8002504:	4013      	ands	r3, r2
 8002506:	d100      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002508:	e0ad      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250a:	2011      	movs	r0, #17
 800250c:	183b      	adds	r3, r7, r0
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	055b      	lsls	r3, r3, #21
 800251a:	4013      	ands	r3, r2
 800251c:	d110      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	4b44      	ldr	r3, [pc, #272]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002522:	4b43      	ldr	r3, [pc, #268]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002524:	2180      	movs	r1, #128	; 0x80
 8002526:	0549      	lsls	r1, r1, #21
 8002528:	430a      	orrs	r2, r1
 800252a:	63da      	str	r2, [r3, #60]	; 0x3c
 800252c:	4b40      	ldr	r3, [pc, #256]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800252e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	055b      	lsls	r3, r3, #21
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253a:	183b      	adds	r3, r7, r0
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002540:	4b3c      	ldr	r3, [pc, #240]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002546:	2180      	movs	r1, #128	; 0x80
 8002548:	0049      	lsls	r1, r1, #1
 800254a:	430a      	orrs	r2, r1
 800254c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800254e:	f7fe fb8b 	bl	8000c68 <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002556:	e00b      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002558:	f7fe fb86 	bl	8000c68 <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d904      	bls.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002566:	2313      	movs	r3, #19
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2203      	movs	r2, #3
 800256c:	701a      	strb	r2, [r3, #0]
        break;
 800256e:	e005      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002570:	4b30      	ldr	r3, [pc, #192]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4013      	ands	r3, r2
 800257a:	d0ed      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800257c:	2313      	movs	r3, #19
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d15e      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002586:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002588:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800258a:	23c0      	movs	r3, #192	; 0xc0
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4013      	ands	r3, r2
 8002590:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d019      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d014      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025a2:	4b23      	ldr	r3, [pc, #140]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	4a24      	ldr	r2, [pc, #144]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025ac:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80025ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	0249      	lsls	r1, r1, #9
 80025b6:	430a      	orrs	r2, r1
 80025b8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80025bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80025c0:	491e      	ldr	r1, [pc, #120]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80025c2:	400a      	ands	r2, r1
 80025c4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025c6:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2201      	movs	r2, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	d016      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe fb48 	bl	8000c68 <HAL_GetTick>
 80025d8:	0003      	movs	r3, r0
 80025da:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025dc:	e00c      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7fe fb43 	bl	8000c68 <HAL_GetTick>
 80025e2:	0002      	movs	r2, r0
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	4a15      	ldr	r2, [pc, #84]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d904      	bls.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80025ee:	2313      	movs	r3, #19
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	2203      	movs	r2, #3
 80025f4:	701a      	strb	r2, [r3, #0]
            break;
 80025f6:	e004      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	2202      	movs	r2, #2
 80025fe:	4013      	ands	r3, r2
 8002600:	d0ed      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002602:	2313      	movs	r3, #19
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800260e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002610:	4a09      	ldr	r2, [pc, #36]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002612:	4013      	ands	r3, r2
 8002614:	0019      	movs	r1, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800261c:	430a      	orrs	r2, r1
 800261e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002620:	e016      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002622:	2312      	movs	r3, #18
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	2213      	movs	r2, #19
 8002628:	18ba      	adds	r2, r7, r2
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e00f      	b.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002630:	40021000 	.word	0x40021000
 8002634:	40007000 	.word	0x40007000
 8002638:	fffffcff 	.word	0xfffffcff
 800263c:	fffeffff 	.word	0xfffeffff
 8002640:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002644:	2312      	movs	r3, #18
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2213      	movs	r2, #19
 800264a:	18ba      	adds	r2, r7, r2
 800264c:	7812      	ldrb	r2, [r2, #0]
 800264e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002650:	2311      	movs	r3, #17
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265a:	4bb6      	ldr	r3, [pc, #728]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800265c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800265e:	4bb5      	ldr	r3, [pc, #724]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002660:	49b5      	ldr	r1, [pc, #724]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002662:	400a      	ands	r2, r1
 8002664:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2201      	movs	r2, #1
 800266c:	4013      	ands	r3, r2
 800266e:	d009      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002670:	4bb0      	ldr	r3, [pc, #704]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002674:	2203      	movs	r2, #3
 8002676:	4393      	bics	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	4bad      	ldr	r3, [pc, #692]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002680:	430a      	orrs	r2, r1
 8002682:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2202      	movs	r2, #2
 800268a:	4013      	ands	r3, r2
 800268c:	d009      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800268e:	4ba9      	ldr	r3, [pc, #676]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	220c      	movs	r2, #12
 8002694:	4393      	bics	r3, r2
 8002696:	0019      	movs	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	4ba5      	ldr	r3, [pc, #660]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800269e:	430a      	orrs	r2, r1
 80026a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2204      	movs	r2, #4
 80026a8:	4013      	ands	r3, r2
 80026aa:	d009      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ac:	4ba1      	ldr	r3, [pc, #644]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	2230      	movs	r2, #48	; 0x30
 80026b2:	4393      	bics	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	4b9e      	ldr	r3, [pc, #632]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2210      	movs	r2, #16
 80026c6:	4013      	ands	r3, r2
 80026c8:	d009      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ca:	4b9a      	ldr	r3, [pc, #616]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	4a9b      	ldr	r2, [pc, #620]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	4b96      	ldr	r3, [pc, #600]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026da:	430a      	orrs	r2, r1
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	015b      	lsls	r3, r3, #5
 80026e6:	4013      	ands	r3, r2
 80026e8:	d009      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80026ea:	4b92      	ldr	r3, [pc, #584]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	4a94      	ldr	r2, [pc, #592]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	4b8e      	ldr	r3, [pc, #568]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026fa:	430a      	orrs	r2, r1
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4013      	ands	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800270a:	4b8a      	ldr	r3, [pc, #552]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	4a8d      	ldr	r2, [pc, #564]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002710:	4013      	ands	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002718:	4b86      	ldr	r3, [pc, #536]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800271a:	430a      	orrs	r2, r1
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4013      	ands	r3, r2
 8002728:	d009      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800272a:	4b82      	ldr	r3, [pc, #520]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	4a86      	ldr	r2, [pc, #536]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002730:	4013      	ands	r3, r2
 8002732:	0019      	movs	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002738:	4b7e      	ldr	r3, [pc, #504]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800273a:	430a      	orrs	r2, r1
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2220      	movs	r2, #32
 8002744:	4013      	ands	r3, r2
 8002746:	d009      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002748:	4b7a      	ldr	r3, [pc, #488]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	4a7f      	ldr	r2, [pc, #508]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800274e:	4013      	ands	r3, r2
 8002750:	0019      	movs	r1, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	4b77      	ldr	r3, [pc, #476]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002758:	430a      	orrs	r2, r1
 800275a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2240      	movs	r2, #64	; 0x40
 8002762:	4013      	ands	r3, r2
 8002764:	d009      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002766:	4b73      	ldr	r3, [pc, #460]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	4a79      	ldr	r2, [pc, #484]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800276c:	4013      	ands	r3, r2
 800276e:	0019      	movs	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	4b6f      	ldr	r3, [pc, #444]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002776:	430a      	orrs	r2, r1
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	; 0x80
 8002780:	01db      	lsls	r3, r3, #7
 8002782:	4013      	ands	r3, r2
 8002784:	d015      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002786:	4b6b      	ldr	r3, [pc, #428]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	0899      	lsrs	r1, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002792:	4b68      	ldr	r3, [pc, #416]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002794:	430a      	orrs	r2, r1
 8002796:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	05db      	lsls	r3, r3, #23
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d106      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027a4:	4b63      	ldr	r3, [pc, #396]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	4b62      	ldr	r3, [pc, #392]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	0249      	lsls	r1, r1, #9
 80027ae:	430a      	orrs	r2, r1
 80027b0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	031b      	lsls	r3, r3, #12
 80027ba:	4013      	ands	r3, r2
 80027bc:	d009      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027be:	4b5d      	ldr	r3, [pc, #372]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	4393      	bics	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027cc:	4b59      	ldr	r3, [pc, #356]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027ce:	430a      	orrs	r2, r1
 80027d0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	039b      	lsls	r3, r3, #14
 80027da:	4013      	ands	r3, r2
 80027dc:	d016      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027de:	4b55      	ldr	r3, [pc, #340]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	4a5c      	ldr	r2, [pc, #368]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	0019      	movs	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ec:	4b51      	ldr	r3, [pc, #324]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027ee:	430a      	orrs	r2, r1
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	03db      	lsls	r3, r3, #15
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d106      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80027fe:	4b4d      	ldr	r3, [pc, #308]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	4b4c      	ldr	r3, [pc, #304]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	0449      	lsls	r1, r1, #17
 8002808:	430a      	orrs	r2, r1
 800280a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	03db      	lsls	r3, r3, #15
 8002814:	4013      	ands	r3, r2
 8002816:	d016      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002818:	4b46      	ldr	r3, [pc, #280]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800281a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281c:	4a4e      	ldr	r2, [pc, #312]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800281e:	4013      	ands	r3, r2
 8002820:	0019      	movs	r1, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002826:	4b43      	ldr	r3, [pc, #268]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002828:	430a      	orrs	r2, r1
 800282a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	045b      	lsls	r3, r3, #17
 8002834:	429a      	cmp	r2, r3
 8002836:	d106      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002838:	4b3e      	ldr	r3, [pc, #248]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800283e:	2180      	movs	r1, #128	; 0x80
 8002840:	0449      	lsls	r1, r1, #17
 8002842:	430a      	orrs	r2, r1
 8002844:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	4013      	ands	r3, r2
 8002850:	d014      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002852:	4b38      	ldr	r3, [pc, #224]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	2203      	movs	r2, #3
 8002858:	4393      	bics	r3, r2
 800285a:	0019      	movs	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1a      	ldr	r2, [r3, #32]
 8002860:	4b34      	ldr	r3, [pc, #208]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002862:	430a      	orrs	r2, r1
 8002864:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d106      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800286e:	4b31      	ldr	r3, [pc, #196]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	4b30      	ldr	r3, [pc, #192]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	0249      	lsls	r1, r1, #9
 8002878:	430a      	orrs	r2, r1
 800287a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	019b      	lsls	r3, r3, #6
 8002884:	4013      	ands	r3, r2
 8002886:	d014      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002888:	4b2a      	ldr	r3, [pc, #168]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	220c      	movs	r2, #12
 800288e:	4393      	bics	r3, r2
 8002890:	0019      	movs	r1, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002896:	4b27      	ldr	r3, [pc, #156]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002898:	430a      	orrs	r2, r1
 800289a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d106      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80028a4:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	4b22      	ldr	r3, [pc, #136]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	0249      	lsls	r1, r1, #9
 80028ae:	430a      	orrs	r2, r1
 80028b0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	2380      	movs	r3, #128	; 0x80
 80028b8:	045b      	lsls	r3, r3, #17
 80028ba:	4013      	ands	r3, r2
 80028bc:	d016      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028be:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	4a22      	ldr	r2, [pc, #136]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028cc:	4b19      	ldr	r3, [pc, #100]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028ce:	430a      	orrs	r2, r1
 80028d0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	019b      	lsls	r3, r3, #6
 80028da:	429a      	cmp	r2, r3
 80028dc:	d106      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	0449      	lsls	r1, r1, #17
 80028e8:	430a      	orrs	r2, r1
 80028ea:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	049b      	lsls	r3, r3, #18
 80028f4:	4013      	ands	r3, r2
 80028f6:	d016      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	4a10      	ldr	r2, [pc, #64]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002908:	430a      	orrs	r2, r1
 800290a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	429a      	cmp	r2, r3
 8002916:	d106      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	0449      	lsls	r1, r1, #17
 8002922:	430a      	orrs	r2, r1
 8002924:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002926:	2312      	movs	r3, #18
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	781b      	ldrb	r3, [r3, #0]
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b006      	add	sp, #24
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	efffffff 	.word	0xefffffff
 800293c:	fffff3ff 	.word	0xfffff3ff
 8002940:	fffffcff 	.word	0xfffffcff
 8002944:	fff3ffff 	.word	0xfff3ffff
 8002948:	ffcfffff 	.word	0xffcfffff
 800294c:	ffffcfff 	.word	0xffffcfff
 8002950:	ffff3fff 	.word	0xffff3fff
 8002954:	ffbfffff 	.word	0xffbfffff
 8002958:	feffffff 	.word	0xfeffffff

0800295c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e046      	b.n	80029fc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2288      	movs	r2, #136	; 0x88
 8002972:	589b      	ldr	r3, [r3, r2]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2284      	movs	r2, #132	; 0x84
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	0018      	movs	r0, r3
 8002984:	f7fe f84e 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2288      	movs	r2, #136	; 0x88
 800298c:	2124      	movs	r1, #36	; 0x24
 800298e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2101      	movs	r1, #1
 800299c:	438a      	bics	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 f830 	bl	8002a08 <UART_SetConfig>
 80029a8:	0003      	movs	r3, r0
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e024      	b.n	80029fc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 fb79 	bl	80030b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	490d      	ldr	r1, [pc, #52]	; (8002a04 <HAL_UART_Init+0xa8>)
 80029ce:	400a      	ands	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	212a      	movs	r1, #42	; 0x2a
 80029de:	438a      	bics	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2101      	movs	r1, #1
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 fc11 	bl	800321c <UART_CheckIdleState>
 80029fa:	0003      	movs	r3, r0
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b002      	add	sp, #8
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	ffffb7ff 	.word	0xffffb7ff

08002a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a08:	b5b0      	push	{r4, r5, r7, lr}
 8002a0a:	b090      	sub	sp, #64	; 0x40
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a10:	231a      	movs	r3, #26
 8002a12:	2220      	movs	r2, #32
 8002a14:	189b      	adds	r3, r3, r2
 8002a16:	19db      	adds	r3, r3, r7
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4ac1      	ldr	r2, [pc, #772]	; (8002d40 <UART_SetConfig+0x338>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	0019      	movs	r1, r3
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a46:	430b      	orrs	r3, r1
 8002a48:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4abc      	ldr	r2, [pc, #752]	; (8002d44 <UART_SetConfig+0x33c>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	0018      	movs	r0, r3
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	68d9      	ldr	r1, [r3, #12]
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	0003      	movs	r3, r0
 8002a60:	430b      	orrs	r3, r1
 8002a62:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4ab6      	ldr	r2, [pc, #728]	; (8002d48 <UART_SetConfig+0x340>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d009      	beq.n	8002a88 <UART_SetConfig+0x80>
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4ab4      	ldr	r2, [pc, #720]	; (8002d4c <UART_SetConfig+0x344>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d004      	beq.n	8002a88 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a84:	4313      	orrs	r3, r2
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	4ab0      	ldr	r2, [pc, #704]	; (8002d50 <UART_SetConfig+0x348>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	220f      	movs	r2, #15
 8002aa6:	4393      	bics	r3, r2
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4aa5      	ldr	r2, [pc, #660]	; (8002d54 <UART_SetConfig+0x34c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d131      	bne.n	8002b26 <UART_SetConfig+0x11e>
 8002ac2:	4ba5      	ldr	r3, [pc, #660]	; (8002d58 <UART_SetConfig+0x350>)
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d01d      	beq.n	8002b0a <UART_SetConfig+0x102>
 8002ace:	d823      	bhi.n	8002b18 <UART_SetConfig+0x110>
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d00c      	beq.n	8002aee <UART_SetConfig+0xe6>
 8002ad4:	d820      	bhi.n	8002b18 <UART_SetConfig+0x110>
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <UART_SetConfig+0xd8>
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d00e      	beq.n	8002afc <UART_SetConfig+0xf4>
 8002ade:	e01b      	b.n	8002b18 <UART_SetConfig+0x110>
 8002ae0:	231b      	movs	r3, #27
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	189b      	adds	r3, r3, r2
 8002ae6:	19db      	adds	r3, r3, r7
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e154      	b.n	8002d98 <UART_SetConfig+0x390>
 8002aee:	231b      	movs	r3, #27
 8002af0:	2220      	movs	r2, #32
 8002af2:	189b      	adds	r3, r3, r2
 8002af4:	19db      	adds	r3, r3, r7
 8002af6:	2202      	movs	r2, #2
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e14d      	b.n	8002d98 <UART_SetConfig+0x390>
 8002afc:	231b      	movs	r3, #27
 8002afe:	2220      	movs	r2, #32
 8002b00:	189b      	adds	r3, r3, r2
 8002b02:	19db      	adds	r3, r3, r7
 8002b04:	2204      	movs	r2, #4
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e146      	b.n	8002d98 <UART_SetConfig+0x390>
 8002b0a:	231b      	movs	r3, #27
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	189b      	adds	r3, r3, r2
 8002b10:	19db      	adds	r3, r3, r7
 8002b12:	2208      	movs	r2, #8
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e13f      	b.n	8002d98 <UART_SetConfig+0x390>
 8002b18:	231b      	movs	r3, #27
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	189b      	adds	r3, r3, r2
 8002b1e:	19db      	adds	r3, r3, r7
 8002b20:	2210      	movs	r2, #16
 8002b22:	701a      	strb	r2, [r3, #0]
 8002b24:	e138      	b.n	8002d98 <UART_SetConfig+0x390>
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a8c      	ldr	r2, [pc, #560]	; (8002d5c <UART_SetConfig+0x354>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d131      	bne.n	8002b94 <UART_SetConfig+0x18c>
 8002b30:	4b89      	ldr	r3, [pc, #548]	; (8002d58 <UART_SetConfig+0x350>)
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	220c      	movs	r2, #12
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d01d      	beq.n	8002b78 <UART_SetConfig+0x170>
 8002b3c:	d823      	bhi.n	8002b86 <UART_SetConfig+0x17e>
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d00c      	beq.n	8002b5c <UART_SetConfig+0x154>
 8002b42:	d820      	bhi.n	8002b86 <UART_SetConfig+0x17e>
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <UART_SetConfig+0x146>
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d00e      	beq.n	8002b6a <UART_SetConfig+0x162>
 8002b4c:	e01b      	b.n	8002b86 <UART_SetConfig+0x17e>
 8002b4e:	231b      	movs	r3, #27
 8002b50:	2220      	movs	r2, #32
 8002b52:	189b      	adds	r3, r3, r2
 8002b54:	19db      	adds	r3, r3, r7
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e11d      	b.n	8002d98 <UART_SetConfig+0x390>
 8002b5c:	231b      	movs	r3, #27
 8002b5e:	2220      	movs	r2, #32
 8002b60:	189b      	adds	r3, r3, r2
 8002b62:	19db      	adds	r3, r3, r7
 8002b64:	2202      	movs	r2, #2
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e116      	b.n	8002d98 <UART_SetConfig+0x390>
 8002b6a:	231b      	movs	r3, #27
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	189b      	adds	r3, r3, r2
 8002b70:	19db      	adds	r3, r3, r7
 8002b72:	2204      	movs	r2, #4
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	e10f      	b.n	8002d98 <UART_SetConfig+0x390>
 8002b78:	231b      	movs	r3, #27
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	189b      	adds	r3, r3, r2
 8002b7e:	19db      	adds	r3, r3, r7
 8002b80:	2208      	movs	r2, #8
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e108      	b.n	8002d98 <UART_SetConfig+0x390>
 8002b86:	231b      	movs	r3, #27
 8002b88:	2220      	movs	r2, #32
 8002b8a:	189b      	adds	r3, r3, r2
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	2210      	movs	r2, #16
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e101      	b.n	8002d98 <UART_SetConfig+0x390>
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a71      	ldr	r2, [pc, #452]	; (8002d60 <UART_SetConfig+0x358>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d131      	bne.n	8002c02 <UART_SetConfig+0x1fa>
 8002b9e:	4b6e      	ldr	r3, [pc, #440]	; (8002d58 <UART_SetConfig+0x350>)
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba2:	2230      	movs	r2, #48	; 0x30
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b30      	cmp	r3, #48	; 0x30
 8002ba8:	d01d      	beq.n	8002be6 <UART_SetConfig+0x1de>
 8002baa:	d823      	bhi.n	8002bf4 <UART_SetConfig+0x1ec>
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d00c      	beq.n	8002bca <UART_SetConfig+0x1c2>
 8002bb0:	d820      	bhi.n	8002bf4 <UART_SetConfig+0x1ec>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <UART_SetConfig+0x1b4>
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d00e      	beq.n	8002bd8 <UART_SetConfig+0x1d0>
 8002bba:	e01b      	b.n	8002bf4 <UART_SetConfig+0x1ec>
 8002bbc:	231b      	movs	r3, #27
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	189b      	adds	r3, r3, r2
 8002bc2:	19db      	adds	r3, r3, r7
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e0e6      	b.n	8002d98 <UART_SetConfig+0x390>
 8002bca:	231b      	movs	r3, #27
 8002bcc:	2220      	movs	r2, #32
 8002bce:	189b      	adds	r3, r3, r2
 8002bd0:	19db      	adds	r3, r3, r7
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e0df      	b.n	8002d98 <UART_SetConfig+0x390>
 8002bd8:	231b      	movs	r3, #27
 8002bda:	2220      	movs	r2, #32
 8002bdc:	189b      	adds	r3, r3, r2
 8002bde:	19db      	adds	r3, r3, r7
 8002be0:	2204      	movs	r2, #4
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	e0d8      	b.n	8002d98 <UART_SetConfig+0x390>
 8002be6:	231b      	movs	r3, #27
 8002be8:	2220      	movs	r2, #32
 8002bea:	189b      	adds	r3, r3, r2
 8002bec:	19db      	adds	r3, r3, r7
 8002bee:	2208      	movs	r2, #8
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e0d1      	b.n	8002d98 <UART_SetConfig+0x390>
 8002bf4:	231b      	movs	r3, #27
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	189b      	adds	r3, r3, r2
 8002bfa:	19db      	adds	r3, r3, r7
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	e0ca      	b.n	8002d98 <UART_SetConfig+0x390>
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a57      	ldr	r2, [pc, #348]	; (8002d64 <UART_SetConfig+0x35c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d106      	bne.n	8002c1a <UART_SetConfig+0x212>
 8002c0c:	231b      	movs	r3, #27
 8002c0e:	2220      	movs	r2, #32
 8002c10:	189b      	adds	r3, r3, r2
 8002c12:	19db      	adds	r3, r3, r7
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
 8002c18:	e0be      	b.n	8002d98 <UART_SetConfig+0x390>
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a52      	ldr	r2, [pc, #328]	; (8002d68 <UART_SetConfig+0x360>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d106      	bne.n	8002c32 <UART_SetConfig+0x22a>
 8002c24:	231b      	movs	r3, #27
 8002c26:	2220      	movs	r2, #32
 8002c28:	189b      	adds	r3, r3, r2
 8002c2a:	19db      	adds	r3, r3, r7
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e0b2      	b.n	8002d98 <UART_SetConfig+0x390>
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a4d      	ldr	r2, [pc, #308]	; (8002d6c <UART_SetConfig+0x364>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d106      	bne.n	8002c4a <UART_SetConfig+0x242>
 8002c3c:	231b      	movs	r3, #27
 8002c3e:	2220      	movs	r2, #32
 8002c40:	189b      	adds	r3, r3, r2
 8002c42:	19db      	adds	r3, r3, r7
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e0a6      	b.n	8002d98 <UART_SetConfig+0x390>
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a3e      	ldr	r2, [pc, #248]	; (8002d48 <UART_SetConfig+0x340>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d13e      	bne.n	8002cd2 <UART_SetConfig+0x2ca>
 8002c54:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <UART_SetConfig+0x350>)
 8002c56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c58:	23c0      	movs	r3, #192	; 0xc0
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	22c0      	movs	r2, #192	; 0xc0
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d027      	beq.n	8002cb6 <UART_SetConfig+0x2ae>
 8002c66:	22c0      	movs	r2, #192	; 0xc0
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d82a      	bhi.n	8002cc4 <UART_SetConfig+0x2bc>
 8002c6e:	2280      	movs	r2, #128	; 0x80
 8002c70:	0112      	lsls	r2, r2, #4
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d011      	beq.n	8002c9a <UART_SetConfig+0x292>
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	0112      	lsls	r2, r2, #4
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d822      	bhi.n	8002cc4 <UART_SetConfig+0x2bc>
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d004      	beq.n	8002c8c <UART_SetConfig+0x284>
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	00d2      	lsls	r2, r2, #3
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00e      	beq.n	8002ca8 <UART_SetConfig+0x2a0>
 8002c8a:	e01b      	b.n	8002cc4 <UART_SetConfig+0x2bc>
 8002c8c:	231b      	movs	r3, #27
 8002c8e:	2220      	movs	r2, #32
 8002c90:	189b      	adds	r3, r3, r2
 8002c92:	19db      	adds	r3, r3, r7
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e07e      	b.n	8002d98 <UART_SetConfig+0x390>
 8002c9a:	231b      	movs	r3, #27
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	189b      	adds	r3, r3, r2
 8002ca0:	19db      	adds	r3, r3, r7
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e077      	b.n	8002d98 <UART_SetConfig+0x390>
 8002ca8:	231b      	movs	r3, #27
 8002caa:	2220      	movs	r2, #32
 8002cac:	189b      	adds	r3, r3, r2
 8002cae:	19db      	adds	r3, r3, r7
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	701a      	strb	r2, [r3, #0]
 8002cb4:	e070      	b.n	8002d98 <UART_SetConfig+0x390>
 8002cb6:	231b      	movs	r3, #27
 8002cb8:	2220      	movs	r2, #32
 8002cba:	189b      	adds	r3, r3, r2
 8002cbc:	19db      	adds	r3, r3, r7
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e069      	b.n	8002d98 <UART_SetConfig+0x390>
 8002cc4:	231b      	movs	r3, #27
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	189b      	adds	r3, r3, r2
 8002cca:	19db      	adds	r3, r3, r7
 8002ccc:	2210      	movs	r2, #16
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e062      	b.n	8002d98 <UART_SetConfig+0x390>
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1d      	ldr	r2, [pc, #116]	; (8002d4c <UART_SetConfig+0x344>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d157      	bne.n	8002d8c <UART_SetConfig+0x384>
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <UART_SetConfig+0x350>)
 8002cde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ce0:	23c0      	movs	r3, #192	; 0xc0
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	22c0      	movs	r2, #192	; 0xc0
 8002ce8:	0092      	lsls	r2, r2, #2
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d040      	beq.n	8002d70 <UART_SetConfig+0x368>
 8002cee:	22c0      	movs	r2, #192	; 0xc0
 8002cf0:	0092      	lsls	r2, r2, #2
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d843      	bhi.n	8002d7e <UART_SetConfig+0x376>
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	0092      	lsls	r2, r2, #2
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d011      	beq.n	8002d22 <UART_SetConfig+0x31a>
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	0092      	lsls	r2, r2, #2
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d83b      	bhi.n	8002d7e <UART_SetConfig+0x376>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <UART_SetConfig+0x30c>
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	0052      	lsls	r2, r2, #1
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00e      	beq.n	8002d30 <UART_SetConfig+0x328>
 8002d12:	e034      	b.n	8002d7e <UART_SetConfig+0x376>
 8002d14:	231b      	movs	r3, #27
 8002d16:	2220      	movs	r2, #32
 8002d18:	189b      	adds	r3, r3, r2
 8002d1a:	19db      	adds	r3, r3, r7
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	e03a      	b.n	8002d98 <UART_SetConfig+0x390>
 8002d22:	231b      	movs	r3, #27
 8002d24:	2220      	movs	r2, #32
 8002d26:	189b      	adds	r3, r3, r2
 8002d28:	19db      	adds	r3, r3, r7
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	e033      	b.n	8002d98 <UART_SetConfig+0x390>
 8002d30:	231b      	movs	r3, #27
 8002d32:	2220      	movs	r2, #32
 8002d34:	189b      	adds	r3, r3, r2
 8002d36:	19db      	adds	r3, r3, r7
 8002d38:	2204      	movs	r2, #4
 8002d3a:	701a      	strb	r2, [r3, #0]
 8002d3c:	e02c      	b.n	8002d98 <UART_SetConfig+0x390>
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	cfff69f3 	.word	0xcfff69f3
 8002d44:	ffffcfff 	.word	0xffffcfff
 8002d48:	40008000 	.word	0x40008000
 8002d4c:	40008400 	.word	0x40008400
 8002d50:	11fff4ff 	.word	0x11fff4ff
 8002d54:	40013800 	.word	0x40013800
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40004400 	.word	0x40004400
 8002d60:	40004800 	.word	0x40004800
 8002d64:	40004c00 	.word	0x40004c00
 8002d68:	40005000 	.word	0x40005000
 8002d6c:	40013c00 	.word	0x40013c00
 8002d70:	231b      	movs	r3, #27
 8002d72:	2220      	movs	r2, #32
 8002d74:	189b      	adds	r3, r3, r2
 8002d76:	19db      	adds	r3, r3, r7
 8002d78:	2208      	movs	r2, #8
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	e00c      	b.n	8002d98 <UART_SetConfig+0x390>
 8002d7e:	231b      	movs	r3, #27
 8002d80:	2220      	movs	r2, #32
 8002d82:	189b      	adds	r3, r3, r2
 8002d84:	19db      	adds	r3, r3, r7
 8002d86:	2210      	movs	r2, #16
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	e005      	b.n	8002d98 <UART_SetConfig+0x390>
 8002d8c:	231b      	movs	r3, #27
 8002d8e:	2220      	movs	r2, #32
 8002d90:	189b      	adds	r3, r3, r2
 8002d92:	19db      	adds	r3, r3, r7
 8002d94:	2210      	movs	r2, #16
 8002d96:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4ac1      	ldr	r2, [pc, #772]	; (80030a4 <UART_SetConfig+0x69c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d005      	beq.n	8002dae <UART_SetConfig+0x3a6>
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4ac0      	ldr	r2, [pc, #768]	; (80030a8 <UART_SetConfig+0x6a0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d000      	beq.n	8002dae <UART_SetConfig+0x3a6>
 8002dac:	e093      	b.n	8002ed6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002dae:	231b      	movs	r3, #27
 8002db0:	2220      	movs	r2, #32
 8002db2:	189b      	adds	r3, r3, r2
 8002db4:	19db      	adds	r3, r3, r7
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d015      	beq.n	8002de8 <UART_SetConfig+0x3e0>
 8002dbc:	dc18      	bgt.n	8002df0 <UART_SetConfig+0x3e8>
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d00d      	beq.n	8002dde <UART_SetConfig+0x3d6>
 8002dc2:	dc15      	bgt.n	8002df0 <UART_SetConfig+0x3e8>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <UART_SetConfig+0x3c6>
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d005      	beq.n	8002dd8 <UART_SetConfig+0x3d0>
 8002dcc:	e010      	b.n	8002df0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dce:	f7ff fb73 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002dd6:	e014      	b.n	8002e02 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dd8:	4bb4      	ldr	r3, [pc, #720]	; (80030ac <UART_SetConfig+0x6a4>)
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ddc:	e011      	b.n	8002e02 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dde:	f7ff fadf 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8002de2:	0003      	movs	r3, r0
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002de6:	e00c      	b.n	8002e02 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	021b      	lsls	r3, r3, #8
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002dee:	e008      	b.n	8002e02 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002df4:	231a      	movs	r3, #26
 8002df6:	2220      	movs	r2, #32
 8002df8:	189b      	adds	r3, r3, r2
 8002dfa:	19db      	adds	r3, r3, r7
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
        break;
 8002e00:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d100      	bne.n	8002e0a <UART_SetConfig+0x402>
 8002e08:	e135      	b.n	8003076 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e0e:	4ba8      	ldr	r3, [pc, #672]	; (80030b0 <UART_SetConfig+0x6a8>)
 8002e10:	0052      	lsls	r2, r2, #1
 8002e12:	5ad3      	ldrh	r3, [r2, r3]
 8002e14:	0019      	movs	r1, r3
 8002e16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e18:	f7fd f974 	bl	8000104 <__udivsi3>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	0013      	movs	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	189b      	adds	r3, r3, r2
 8002e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d305      	bcc.n	8002e3c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d906      	bls.n	8002e4a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8002e3c:	231a      	movs	r3, #26
 8002e3e:	2220      	movs	r2, #32
 8002e40:	189b      	adds	r3, r3, r2
 8002e42:	19db      	adds	r3, r3, r7
 8002e44:	2201      	movs	r2, #1
 8002e46:	701a      	strb	r2, [r3, #0]
 8002e48:	e044      	b.n	8002ed4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e56:	4b96      	ldr	r3, [pc, #600]	; (80030b0 <UART_SetConfig+0x6a8>)
 8002e58:	0052      	lsls	r2, r2, #1
 8002e5a:	5ad3      	ldrh	r3, [r2, r3]
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	69b8      	ldr	r0, [r7, #24]
 8002e68:	69f9      	ldr	r1, [r7, #28]
 8002e6a:	f7fd fac1 	bl	80003f0 <__aeabi_uldivmod>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	000b      	movs	r3, r1
 8002e72:	0e11      	lsrs	r1, r2, #24
 8002e74:	021d      	lsls	r5, r3, #8
 8002e76:	430d      	orrs	r5, r1
 8002e78:	0214      	lsls	r4, r2, #8
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	085b      	lsrs	r3, r3, #1
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	68b8      	ldr	r0, [r7, #8]
 8002e88:	68f9      	ldr	r1, [r7, #12]
 8002e8a:	1900      	adds	r0, r0, r4
 8002e8c:	4169      	adcs	r1, r5
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	2300      	movs	r3, #0
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f7fd faa8 	bl	80003f0 <__aeabi_uldivmod>
 8002ea0:	0002      	movs	r2, r0
 8002ea2:	000b      	movs	r3, r1
 8002ea4:	0013      	movs	r3, r2
 8002ea6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eaa:	23c0      	movs	r3, #192	; 0xc0
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d309      	bcc.n	8002ec6 <UART_SetConfig+0x4be>
 8002eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	035b      	lsls	r3, r3, #13
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d204      	bcs.n	8002ec6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec2:	60da      	str	r2, [r3, #12]
 8002ec4:	e006      	b.n	8002ed4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8002ec6:	231a      	movs	r3, #26
 8002ec8:	2220      	movs	r2, #32
 8002eca:	189b      	adds	r3, r3, r2
 8002ecc:	19db      	adds	r3, r3, r7
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8002ed2:	e0d0      	b.n	8003076 <UART_SetConfig+0x66e>
 8002ed4:	e0cf      	b.n	8003076 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d000      	beq.n	8002ee4 <UART_SetConfig+0x4dc>
 8002ee2:	e070      	b.n	8002fc6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8002ee4:	231b      	movs	r3, #27
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	189b      	adds	r3, r3, r2
 8002eea:	19db      	adds	r3, r3, r7
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d015      	beq.n	8002f1e <UART_SetConfig+0x516>
 8002ef2:	dc18      	bgt.n	8002f26 <UART_SetConfig+0x51e>
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d00d      	beq.n	8002f14 <UART_SetConfig+0x50c>
 8002ef8:	dc15      	bgt.n	8002f26 <UART_SetConfig+0x51e>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <UART_SetConfig+0x4fc>
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d005      	beq.n	8002f0e <UART_SetConfig+0x506>
 8002f02:	e010      	b.n	8002f26 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f04:	f7ff fad8 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f0c:	e014      	b.n	8002f38 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f0e:	4b67      	ldr	r3, [pc, #412]	; (80030ac <UART_SetConfig+0x6a4>)
 8002f10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f12:	e011      	b.n	8002f38 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f14:	f7ff fa44 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f1c:	e00c      	b.n	8002f38 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1e:	2380      	movs	r3, #128	; 0x80
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f24:	e008      	b.n	8002f38 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002f2a:	231a      	movs	r3, #26
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	189b      	adds	r3, r3, r2
 8002f30:	19db      	adds	r3, r3, r7
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
        break;
 8002f36:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d100      	bne.n	8002f40 <UART_SetConfig+0x538>
 8002f3e:	e09a      	b.n	8003076 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f44:	4b5a      	ldr	r3, [pc, #360]	; (80030b0 <UART_SetConfig+0x6a8>)
 8002f46:	0052      	lsls	r2, r2, #1
 8002f48:	5ad3      	ldrh	r3, [r2, r3]
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f4e:	f7fd f8d9 	bl	8000104 <__udivsi3>
 8002f52:	0003      	movs	r3, r0
 8002f54:	005a      	lsls	r2, r3, #1
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	18d2      	adds	r2, r2, r3
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	0019      	movs	r1, r3
 8002f64:	0010      	movs	r0, r2
 8002f66:	f7fd f8cd 	bl	8000104 <__udivsi3>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	2b0f      	cmp	r3, #15
 8002f72:	d921      	bls.n	8002fb8 <UART_SetConfig+0x5b0>
 8002f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	025b      	lsls	r3, r3, #9
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d21c      	bcs.n	8002fb8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	200e      	movs	r0, #14
 8002f84:	2420      	movs	r4, #32
 8002f86:	1903      	adds	r3, r0, r4
 8002f88:	19db      	adds	r3, r3, r7
 8002f8a:	210f      	movs	r1, #15
 8002f8c:	438a      	bics	r2, r1
 8002f8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2207      	movs	r2, #7
 8002f98:	4013      	ands	r3, r2
 8002f9a:	b299      	uxth	r1, r3
 8002f9c:	1903      	adds	r3, r0, r4
 8002f9e:	19db      	adds	r3, r3, r7
 8002fa0:	1902      	adds	r2, r0, r4
 8002fa2:	19d2      	adds	r2, r2, r7
 8002fa4:	8812      	ldrh	r2, [r2, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	1902      	adds	r2, r0, r4
 8002fb0:	19d2      	adds	r2, r2, r7
 8002fb2:	8812      	ldrh	r2, [r2, #0]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	e05e      	b.n	8003076 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002fb8:	231a      	movs	r3, #26
 8002fba:	2220      	movs	r2, #32
 8002fbc:	189b      	adds	r3, r3, r2
 8002fbe:	19db      	adds	r3, r3, r7
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	e057      	b.n	8003076 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fc6:	231b      	movs	r3, #27
 8002fc8:	2220      	movs	r2, #32
 8002fca:	189b      	adds	r3, r3, r2
 8002fcc:	19db      	adds	r3, r3, r7
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d015      	beq.n	8003000 <UART_SetConfig+0x5f8>
 8002fd4:	dc18      	bgt.n	8003008 <UART_SetConfig+0x600>
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d00d      	beq.n	8002ff6 <UART_SetConfig+0x5ee>
 8002fda:	dc15      	bgt.n	8003008 <UART_SetConfig+0x600>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <UART_SetConfig+0x5de>
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d005      	beq.n	8002ff0 <UART_SetConfig+0x5e8>
 8002fe4:	e010      	b.n	8003008 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe6:	f7ff fa67 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 8002fea:	0003      	movs	r3, r0
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002fee:	e014      	b.n	800301a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ff0:	4b2e      	ldr	r3, [pc, #184]	; (80030ac <UART_SetConfig+0x6a4>)
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ff4:	e011      	b.n	800301a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff6:	f7ff f9d3 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ffe:	e00c      	b.n	800301a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003006:	e008      	b.n	800301a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800300c:	231a      	movs	r3, #26
 800300e:	2220      	movs	r2, #32
 8003010:	189b      	adds	r3, r3, r2
 8003012:	19db      	adds	r3, r3, r7
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
        break;
 8003018:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	2b00      	cmp	r3, #0
 800301e:	d02a      	beq.n	8003076 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003024:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <UART_SetConfig+0x6a8>)
 8003026:	0052      	lsls	r2, r2, #1
 8003028:	5ad3      	ldrh	r3, [r2, r3]
 800302a:	0019      	movs	r1, r3
 800302c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800302e:	f7fd f869 	bl	8000104 <__udivsi3>
 8003032:	0003      	movs	r3, r0
 8003034:	001a      	movs	r2, r3
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	18d2      	adds	r2, r2, r3
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	0019      	movs	r1, r3
 8003044:	0010      	movs	r0, r2
 8003046:	f7fd f85d 	bl	8000104 <__udivsi3>
 800304a:	0003      	movs	r3, r0
 800304c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	2b0f      	cmp	r3, #15
 8003052:	d90a      	bls.n	800306a <UART_SetConfig+0x662>
 8003054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	025b      	lsls	r3, r3, #9
 800305a:	429a      	cmp	r2, r3
 800305c:	d205      	bcs.n	800306a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	b29a      	uxth	r2, r3
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60da      	str	r2, [r3, #12]
 8003068:	e005      	b.n	8003076 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800306a:	231a      	movs	r3, #26
 800306c:	2220      	movs	r2, #32
 800306e:	189b      	adds	r3, r3, r2
 8003070:	19db      	adds	r3, r3, r7
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	226a      	movs	r2, #106	; 0x6a
 800307a:	2101      	movs	r1, #1
 800307c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	2268      	movs	r2, #104	; 0x68
 8003082:	2101      	movs	r1, #1
 8003084:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	2200      	movs	r2, #0
 800308a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	2200      	movs	r2, #0
 8003090:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003092:	231a      	movs	r3, #26
 8003094:	2220      	movs	r2, #32
 8003096:	189b      	adds	r3, r3, r2
 8003098:	19db      	adds	r3, r3, r7
 800309a:	781b      	ldrb	r3, [r3, #0]
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b010      	add	sp, #64	; 0x40
 80030a2:	bdb0      	pop	{r4, r5, r7, pc}
 80030a4:	40008000 	.word	0x40008000
 80030a8:	40008400 	.word	0x40008400
 80030ac:	00f42400 	.word	0x00f42400
 80030b0:	0800374c 	.word	0x0800374c

080030b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	2201      	movs	r2, #1
 80030c2:	4013      	ands	r3, r2
 80030c4:	d00b      	beq.n	80030de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	4a4a      	ldr	r2, [pc, #296]	; (80031f8 <UART_AdvFeatureConfig+0x144>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	0019      	movs	r1, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	2202      	movs	r2, #2
 80030e4:	4013      	ands	r3, r2
 80030e6:	d00b      	beq.n	8003100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a43      	ldr	r2, [pc, #268]	; (80031fc <UART_AdvFeatureConfig+0x148>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	2204      	movs	r2, #4
 8003106:	4013      	ands	r3, r2
 8003108:	d00b      	beq.n	8003122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4a3b      	ldr	r2, [pc, #236]	; (8003200 <UART_AdvFeatureConfig+0x14c>)
 8003112:	4013      	ands	r3, r2
 8003114:	0019      	movs	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	2208      	movs	r2, #8
 8003128:	4013      	ands	r3, r2
 800312a:	d00b      	beq.n	8003144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a34      	ldr	r2, [pc, #208]	; (8003204 <UART_AdvFeatureConfig+0x150>)
 8003134:	4013      	ands	r3, r2
 8003136:	0019      	movs	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	2210      	movs	r2, #16
 800314a:	4013      	ands	r3, r2
 800314c:	d00b      	beq.n	8003166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <UART_AdvFeatureConfig+0x154>)
 8003156:	4013      	ands	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	2220      	movs	r2, #32
 800316c:	4013      	ands	r3, r2
 800316e:	d00b      	beq.n	8003188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	4a25      	ldr	r2, [pc, #148]	; (800320c <UART_AdvFeatureConfig+0x158>)
 8003178:	4013      	ands	r3, r2
 800317a:	0019      	movs	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	2240      	movs	r2, #64	; 0x40
 800318e:	4013      	ands	r3, r2
 8003190:	d01d      	beq.n	80031ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4a1d      	ldr	r2, [pc, #116]	; (8003210 <UART_AdvFeatureConfig+0x15c>)
 800319a:	4013      	ands	r3, r2
 800319c:	0019      	movs	r1, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	035b      	lsls	r3, r3, #13
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d10b      	bne.n	80031ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a15      	ldr	r2, [pc, #84]	; (8003214 <UART_AdvFeatureConfig+0x160>)
 80031be:	4013      	ands	r3, r2
 80031c0:	0019      	movs	r1, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	4013      	ands	r3, r2
 80031d6:	d00b      	beq.n	80031f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <UART_AdvFeatureConfig+0x164>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]
  }
}
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b002      	add	sp, #8
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	fffdffff 	.word	0xfffdffff
 80031fc:	fffeffff 	.word	0xfffeffff
 8003200:	fffbffff 	.word	0xfffbffff
 8003204:	ffff7fff 	.word	0xffff7fff
 8003208:	ffffefff 	.word	0xffffefff
 800320c:	ffffdfff 	.word	0xffffdfff
 8003210:	ffefffff 	.word	0xffefffff
 8003214:	ff9fffff 	.word	0xff9fffff
 8003218:	fff7ffff 	.word	0xfff7ffff

0800321c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af02      	add	r7, sp, #8
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2290      	movs	r2, #144	; 0x90
 8003228:	2100      	movs	r1, #0
 800322a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800322c:	f7fd fd1c 	bl	8000c68 <HAL_GetTick>
 8003230:	0003      	movs	r3, r0
 8003232:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2208      	movs	r2, #8
 800323c:	4013      	ands	r3, r2
 800323e:	2b08      	cmp	r3, #8
 8003240:	d10c      	bne.n	800325c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2280      	movs	r2, #128	; 0x80
 8003246:	0391      	lsls	r1, r2, #14
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	4a1a      	ldr	r2, [pc, #104]	; (80032b4 <UART_CheckIdleState+0x98>)
 800324c:	9200      	str	r2, [sp, #0]
 800324e:	2200      	movs	r2, #0
 8003250:	f000 f832 	bl	80032b8 <UART_WaitOnFlagUntilTimeout>
 8003254:	1e03      	subs	r3, r0, #0
 8003256:	d001      	beq.n	800325c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e026      	b.n	80032aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2204      	movs	r2, #4
 8003264:	4013      	ands	r3, r2
 8003266:	2b04      	cmp	r3, #4
 8003268:	d10c      	bne.n	8003284 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	03d1      	lsls	r1, r2, #15
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4a10      	ldr	r2, [pc, #64]	; (80032b4 <UART_CheckIdleState+0x98>)
 8003274:	9200      	str	r2, [sp, #0]
 8003276:	2200      	movs	r2, #0
 8003278:	f000 f81e 	bl	80032b8 <UART_WaitOnFlagUntilTimeout>
 800327c:	1e03      	subs	r3, r0, #0
 800327e:	d001      	beq.n	8003284 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e012      	b.n	80032aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2288      	movs	r2, #136	; 0x88
 8003288:	2120      	movs	r1, #32
 800328a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	228c      	movs	r2, #140	; 0x8c
 8003290:	2120      	movs	r1, #32
 8003292:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2284      	movs	r2, #132	; 0x84
 80032a4:	2100      	movs	r1, #0
 80032a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	0018      	movs	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b004      	add	sp, #16
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	01ffffff 	.word	0x01ffffff

080032b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b094      	sub	sp, #80	; 0x50
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	1dfb      	adds	r3, r7, #7
 80032c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c8:	e0a7      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032cc:	3301      	adds	r3, #1
 80032ce:	d100      	bne.n	80032d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80032d0:	e0a3      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d2:	f7fd fcc9 	bl	8000c68 <HAL_GetTick>
 80032d6:	0002      	movs	r2, r0
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d13f      	bne.n	8003368 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e8:	f3ef 8310 	mrs	r3, PRIMASK
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80032f0:	647b      	str	r3, [r7, #68]	; 0x44
 80032f2:	2301      	movs	r3, #1
 80032f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	f383 8810 	msr	PRIMASK, r3
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	494e      	ldr	r1, [pc, #312]	; (8003444 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800330a:	400a      	ands	r2, r1
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003310:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	f383 8810 	msr	PRIMASK, r3
}
 8003318:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331a:	f3ef 8310 	mrs	r3, PRIMASK
 800331e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003322:	643b      	str	r3, [r7, #64]	; 0x40
 8003324:	2301      	movs	r3, #1
 8003326:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332a:	f383 8810 	msr	PRIMASK, r3
}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2101      	movs	r1, #1
 800333c:	438a      	bics	r2, r1
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003342:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003346:	f383 8810 	msr	PRIMASK, r3
}
 800334a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2288      	movs	r2, #136	; 0x88
 8003350:	2120      	movs	r1, #32
 8003352:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	228c      	movs	r2, #140	; 0x8c
 8003358:	2120      	movs	r1, #32
 800335a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2284      	movs	r2, #132	; 0x84
 8003360:	2100      	movs	r1, #0
 8003362:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e069      	b.n	800343c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2204      	movs	r2, #4
 8003370:	4013      	ands	r3, r2
 8003372:	d052      	beq.n	800341a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69da      	ldr	r2, [r3, #28]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	401a      	ands	r2, r3
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	429a      	cmp	r2, r3
 8003386:	d148      	bne.n	800341a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2280      	movs	r2, #128	; 0x80
 800338e:	0112      	lsls	r2, r2, #4
 8003390:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003392:	f3ef 8310 	mrs	r3, PRIMASK
 8003396:	613b      	str	r3, [r7, #16]
  return(result);
 8003398:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800339a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800339c:	2301      	movs	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f383 8810 	msr	PRIMASK, r3
}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4924      	ldr	r1, [pc, #144]	; (8003444 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80033b4:	400a      	ands	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f383 8810 	msr	PRIMASK, r3
}
 80033c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c4:	f3ef 8310 	mrs	r3, PRIMASK
 80033c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80033ca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ce:	2301      	movs	r3, #1
 80033d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	f383 8810 	msr	PRIMASK, r3
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2101      	movs	r1, #1
 80033e6:	438a      	bics	r2, r1
 80033e8:	609a      	str	r2, [r3, #8]
 80033ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	f383 8810 	msr	PRIMASK, r3
}
 80033f4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2288      	movs	r2, #136	; 0x88
 80033fa:	2120      	movs	r1, #32
 80033fc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	228c      	movs	r2, #140	; 0x8c
 8003402:	2120      	movs	r1, #32
 8003404:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2290      	movs	r2, #144	; 0x90
 800340a:	2120      	movs	r1, #32
 800340c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2284      	movs	r2, #132	; 0x84
 8003412:	2100      	movs	r1, #0
 8003414:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e010      	b.n	800343c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	4013      	ands	r3, r2
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	425a      	negs	r2, r3
 800342a:	4153      	adcs	r3, r2
 800342c:	b2db      	uxtb	r3, r3
 800342e:	001a      	movs	r2, r3
 8003430:	1dfb      	adds	r3, r7, #7
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d100      	bne.n	800343a <UART_WaitOnFlagUntilTimeout+0x182>
 8003438:	e747      	b.n	80032ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	0018      	movs	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	b014      	add	sp, #80	; 0x50
 8003442:	bd80      	pop	{r7, pc}
 8003444:	fffffe5f 	.word	0xfffffe5f

08003448 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2284      	movs	r2, #132	; 0x84
 8003454:	5c9b      	ldrb	r3, [r3, r2]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_UARTEx_DisableFifoMode+0x16>
 800345a:	2302      	movs	r3, #2
 800345c:	e027      	b.n	80034ae <HAL_UARTEx_DisableFifoMode+0x66>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2284      	movs	r2, #132	; 0x84
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2288      	movs	r2, #136	; 0x88
 800346a:	2124      	movs	r1, #36	; 0x24
 800346c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	438a      	bics	r2, r1
 8003484:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800348a:	4013      	ands	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2288      	movs	r2, #136	; 0x88
 80034a0:	2120      	movs	r1, #32
 80034a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2284      	movs	r2, #132	; 0x84
 80034a8:	2100      	movs	r1, #0
 80034aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	dfffffff 	.word	0xdfffffff

080034bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2284      	movs	r2, #132	; 0x84
 80034ca:	5c9b      	ldrb	r3, [r3, r2]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e02e      	b.n	8003532 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2284      	movs	r2, #132	; 0x84
 80034d8:	2101      	movs	r1, #1
 80034da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2288      	movs	r2, #136	; 0x88
 80034e0:	2124      	movs	r1, #36	; 0x24
 80034e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2101      	movs	r1, #1
 80034f8:	438a      	bics	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	08d9      	lsrs	r1, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	0018      	movs	r0, r3
 8003514:	f000 f854 	bl	80035c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2288      	movs	r2, #136	; 0x88
 8003524:	2120      	movs	r1, #32
 8003526:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2284      	movs	r2, #132	; 0x84
 800352c:	2100      	movs	r1, #0
 800352e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	0018      	movs	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	b004      	add	sp, #16
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2284      	movs	r2, #132	; 0x84
 800354a:	5c9b      	ldrb	r3, [r3, r2]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003550:	2302      	movs	r3, #2
 8003552:	e02f      	b.n	80035b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2284      	movs	r2, #132	; 0x84
 8003558:	2101      	movs	r1, #1
 800355a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2288      	movs	r2, #136	; 0x88
 8003560:	2124      	movs	r1, #36	; 0x24
 8003562:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2101      	movs	r1, #1
 8003578:	438a      	bics	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003584:	4013      	ands	r3, r2
 8003586:	0019      	movs	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0018      	movs	r0, r3
 8003596:	f000 f813 	bl	80035c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2288      	movs	r2, #136	; 0x88
 80035a6:	2120      	movs	r1, #32
 80035a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2284      	movs	r2, #132	; 0x84
 80035ae:	2100      	movs	r1, #0
 80035b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	0018      	movs	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b004      	add	sp, #16
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	f1ffffff 	.word	0xf1ffffff

080035c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80035c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d108      	bne.n	80035e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	226a      	movs	r2, #106	; 0x6a
 80035d4:	2101      	movs	r1, #1
 80035d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2268      	movs	r2, #104	; 0x68
 80035dc:	2101      	movs	r1, #1
 80035de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80035e0:	e043      	b.n	800366a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80035e2:	260f      	movs	r6, #15
 80035e4:	19bb      	adds	r3, r7, r6
 80035e6:	2208      	movs	r2, #8
 80035e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80035ea:	200e      	movs	r0, #14
 80035ec:	183b      	adds	r3, r7, r0
 80035ee:	2208      	movs	r2, #8
 80035f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	0e5b      	lsrs	r3, r3, #25
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	240d      	movs	r4, #13
 80035fe:	193b      	adds	r3, r7, r4
 8003600:	2107      	movs	r1, #7
 8003602:	400a      	ands	r2, r1
 8003604:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	0f5b      	lsrs	r3, r3, #29
 800360e:	b2da      	uxtb	r2, r3
 8003610:	250c      	movs	r5, #12
 8003612:	197b      	adds	r3, r7, r5
 8003614:	2107      	movs	r1, #7
 8003616:	400a      	ands	r2, r1
 8003618:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800361a:	183b      	adds	r3, r7, r0
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	197a      	adds	r2, r7, r5
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	4914      	ldr	r1, [pc, #80]	; (8003674 <UARTEx_SetNbDataToProcess+0xb4>)
 8003624:	5c8a      	ldrb	r2, [r1, r2]
 8003626:	435a      	muls	r2, r3
 8003628:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800362a:	197b      	adds	r3, r7, r5
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	4a12      	ldr	r2, [pc, #72]	; (8003678 <UARTEx_SetNbDataToProcess+0xb8>)
 8003630:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003632:	0019      	movs	r1, r3
 8003634:	f7fc fdf0 	bl	8000218 <__divsi3>
 8003638:	0003      	movs	r3, r0
 800363a:	b299      	uxth	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	226a      	movs	r2, #106	; 0x6a
 8003640:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003642:	19bb      	adds	r3, r7, r6
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	193a      	adds	r2, r7, r4
 8003648:	7812      	ldrb	r2, [r2, #0]
 800364a:	490a      	ldr	r1, [pc, #40]	; (8003674 <UARTEx_SetNbDataToProcess+0xb4>)
 800364c:	5c8a      	ldrb	r2, [r1, r2]
 800364e:	435a      	muls	r2, r3
 8003650:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003652:	193b      	adds	r3, r7, r4
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	4a08      	ldr	r2, [pc, #32]	; (8003678 <UARTEx_SetNbDataToProcess+0xb8>)
 8003658:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800365a:	0019      	movs	r1, r3
 800365c:	f7fc fddc 	bl	8000218 <__divsi3>
 8003660:	0003      	movs	r3, r0
 8003662:	b299      	uxth	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2268      	movs	r2, #104	; 0x68
 8003668:	5299      	strh	r1, [r3, r2]
}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	b005      	add	sp, #20
 8003670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	08003764 	.word	0x08003764
 8003678:	0800376c 	.word	0x0800376c

0800367c <memset>:
 800367c:	0003      	movs	r3, r0
 800367e:	1882      	adds	r2, r0, r2
 8003680:	4293      	cmp	r3, r2
 8003682:	d100      	bne.n	8003686 <memset+0xa>
 8003684:	4770      	bx	lr
 8003686:	7019      	strb	r1, [r3, #0]
 8003688:	3301      	adds	r3, #1
 800368a:	e7f9      	b.n	8003680 <memset+0x4>

0800368c <__libc_init_array>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	2600      	movs	r6, #0
 8003690:	4c0c      	ldr	r4, [pc, #48]	; (80036c4 <__libc_init_array+0x38>)
 8003692:	4d0d      	ldr	r5, [pc, #52]	; (80036c8 <__libc_init_array+0x3c>)
 8003694:	1b64      	subs	r4, r4, r5
 8003696:	10a4      	asrs	r4, r4, #2
 8003698:	42a6      	cmp	r6, r4
 800369a:	d109      	bne.n	80036b0 <__libc_init_array+0x24>
 800369c:	2600      	movs	r6, #0
 800369e:	f000 f819 	bl	80036d4 <_init>
 80036a2:	4c0a      	ldr	r4, [pc, #40]	; (80036cc <__libc_init_array+0x40>)
 80036a4:	4d0a      	ldr	r5, [pc, #40]	; (80036d0 <__libc_init_array+0x44>)
 80036a6:	1b64      	subs	r4, r4, r5
 80036a8:	10a4      	asrs	r4, r4, #2
 80036aa:	42a6      	cmp	r6, r4
 80036ac:	d105      	bne.n	80036ba <__libc_init_array+0x2e>
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
 80036b0:	00b3      	lsls	r3, r6, #2
 80036b2:	58eb      	ldr	r3, [r5, r3]
 80036b4:	4798      	blx	r3
 80036b6:	3601      	adds	r6, #1
 80036b8:	e7ee      	b.n	8003698 <__libc_init_array+0xc>
 80036ba:	00b3      	lsls	r3, r6, #2
 80036bc:	58eb      	ldr	r3, [r5, r3]
 80036be:	4798      	blx	r3
 80036c0:	3601      	adds	r6, #1
 80036c2:	e7f2      	b.n	80036aa <__libc_init_array+0x1e>
 80036c4:	0800377c 	.word	0x0800377c
 80036c8:	0800377c 	.word	0x0800377c
 80036cc:	08003780 	.word	0x08003780
 80036d0:	0800377c 	.word	0x0800377c

080036d4 <_init>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036da:	bc08      	pop	{r3}
 80036dc:	469e      	mov	lr, r3
 80036de:	4770      	bx	lr

080036e0 <_fini>:
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e6:	bc08      	pop	{r3}
 80036e8:	469e      	mov	lr, r3
 80036ea:	4770      	bx	lr
