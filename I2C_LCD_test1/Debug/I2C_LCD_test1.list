
I2C_LCD_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003a70  08003a70  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b28  08003b28  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b28  08003b28  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b30  08003b30  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b34  08003b34  00013b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000001c  08003b54  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003b54  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed67  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000219e  00000000  00000000  0002edee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00030f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e6  00000000  00000000  00031c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b371  00000000  00000000  0003262e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010263  00000000  00000000  0004d99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000afc75  00000000  00000000  0005dc02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d48  00000000  00000000  0010d878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001105c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003a58 	.word	0x08003a58

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08003a58 	.word	0x08003a58

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	0002      	movs	r2, r0
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	701a      	strb	r2, [r3, #0]
  dpRows = rows;
 8000628:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <HD44780_Init+0xf8>)
 800062a:	1dfa      	adds	r2, r7, #7
 800062c:	7812      	ldrb	r2, [r2, #0]
 800062e:	701a      	strb	r2, [r3, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000630:	4b39      	ldr	r3, [pc, #228]	; (8000718 <HD44780_Init+0xfc>)
 8000632:	2208      	movs	r2, #8
 8000634:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000636:	4b39      	ldr	r3, [pc, #228]	; (800071c <HD44780_Init+0x100>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800063c:	4b35      	ldr	r3, [pc, #212]	; (8000714 <HD44780_Init+0xf8>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d907      	bls.n	8000654 <HD44780_Init+0x38>
  {
    dpFunction |= LCD_2LINE;
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <HD44780_Init+0x100>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2208      	movs	r2, #8
 800064a:	4313      	orrs	r3, r2
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b33      	ldr	r3, [pc, #204]	; (800071c <HD44780_Init+0x100>)
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	e006      	b.n	8000662 <HD44780_Init+0x46>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000654:	4b31      	ldr	r3, [pc, #196]	; (800071c <HD44780_Init+0x100>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2204      	movs	r2, #4
 800065a:	4313      	orrs	r3, r2
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b2f      	ldr	r3, [pc, #188]	; (800071c <HD44780_Init+0x100>)
 8000660:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000662:	f000 f9b9 	bl	80009d8 <DelayInit>
  HAL_Delay(50);
 8000666:	2032      	movs	r0, #50	; 0x32
 8000668:	f000 fce4 	bl	8001034 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <HD44780_Init+0xfc>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	0018      	movs	r0, r3
 8000672:	f000 f971 	bl	8000958 <ExpanderWrite>
  HAL_Delay(1000);
 8000676:	23fa      	movs	r3, #250	; 0xfa
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fcda 	bl	8001034 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000680:	2030      	movs	r0, #48	; 0x30
 8000682:	f000 f955 	bl	8000930 <Write4Bits>
  DelayUS(4500);
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <HD44780_Init+0x104>)
 8000688:	0018      	movs	r0, r3
 800068a:	f000 f9ad 	bl	80009e8 <DelayUS>

  Write4Bits(0x03 << 4);
 800068e:	2030      	movs	r0, #48	; 0x30
 8000690:	f000 f94e 	bl	8000930 <Write4Bits>
  DelayUS(4500);
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <HD44780_Init+0x104>)
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f9a6 	bl	80009e8 <DelayUS>

  Write4Bits(0x03 << 4);
 800069c:	2030      	movs	r0, #48	; 0x30
 800069e:	f000 f947 	bl	8000930 <Write4Bits>
  DelayUS(4500);
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <HD44780_Init+0x104>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 f99f 	bl	80009e8 <DelayUS>

  Write4Bits(0x02 << 4);
 80006aa:	2020      	movs	r0, #32
 80006ac:	f000 f940 	bl	8000930 <Write4Bits>
  DelayUS(100);
 80006b0:	2064      	movs	r0, #100	; 0x64
 80006b2:	f000 f999 	bl	80009e8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <HD44780_Init+0x100>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2220      	movs	r2, #32
 80006bc:	4313      	orrs	r3, r2
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 f8e9 	bl	8000898 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HD44780_Init+0x108>)
 80006c8:	2204      	movs	r2, #4
 80006ca:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80006cc:	f000 f884 	bl	80007d8 <HD44780_Display>
  HD44780_Clear();
 80006d0:	f000 f830 	bl	8000734 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HD44780_Init+0x10c>)
 80006d6:	2202      	movs	r2, #2
 80006d8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <HD44780_Init+0x10c>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2204      	movs	r2, #4
 80006e0:	4313      	orrs	r3, r2
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 f8d7 	bl	8000898 <SendCommand>
  DelayUS(4500);
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <HD44780_Init+0x104>)
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 f97b 	bl	80009e8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <HD44780_Init+0x110>)
 80006f4:	0019      	movs	r1, r3
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 f88c 	bl	8000814 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HD44780_Init+0x114>)
 80006fe:	0019      	movs	r1, r3
 8000700:	2001      	movs	r0, #1
 8000702:	f000 f887 	bl	8000814 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000706:	f000 f822 	bl	800074e <HD44780_Home>
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	2000003b 	.word	0x2000003b
 8000718:	2000003c 	.word	0x2000003c
 800071c:	20000038 	.word	0x20000038
 8000720:	00001194 	.word	0x00001194
 8000724:	20000039 	.word	0x20000039
 8000728:	2000003a 	.word	0x2000003a
 800072c:	20000000 	.word	0x20000000
 8000730:	20000008 	.word	0x20000008

08000734 <HD44780_Clear>:

void HD44780_Clear()
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000738:	2001      	movs	r0, #1
 800073a:	f000 f8ad 	bl	8000898 <SendCommand>
  DelayUS(2000);
 800073e:	23fa      	movs	r3, #250	; 0xfa
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	0018      	movs	r0, r3
 8000744:	f000 f950 	bl	80009e8 <DelayUS>
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HD44780_Home>:

void HD44780_Home()
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000752:	2002      	movs	r0, #2
 8000754:	f000 f8a0 	bl	8000898 <SendCommand>
  DelayUS(2000);
 8000758:	23fa      	movs	r3, #250	; 0xfa
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	0018      	movs	r0, r3
 800075e:	f000 f943 	bl	80009e8 <DelayUS>
}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b087      	sub	sp, #28
 800076c:	af00      	add	r7, sp, #0
 800076e:	0002      	movs	r2, r0
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	1dbb      	adds	r3, r7, #6
 8000776:	1c0a      	adds	r2, r1, #0
 8000778:	701a      	strb	r2, [r3, #0]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800077a:	2308      	movs	r3, #8
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <HD44780_SetCursor+0x68>)
 8000780:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000782:	c313      	stmia	r3!, {r0, r1, r4}
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	601a      	str	r2, [r3, #0]
  if (row >= dpRows)
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HD44780_SetCursor+0x6c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	1dba      	adds	r2, r7, #6
 800078e:	7812      	ldrb	r2, [r2, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d304      	bcc.n	800079e <HD44780_SetCursor+0x36>
  {
    row = dpRows-1;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <HD44780_SetCursor+0x6c>)
 8000796:	781a      	ldrb	r2, [r3, #0]
 8000798:	1dbb      	adds	r3, r7, #6
 800079a:	3a01      	subs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800079e:	1dbb      	adds	r3, r7, #6
 80007a0:	781a      	ldrb	r2, [r3, #0]
 80007a2:	2308      	movs	r3, #8
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	0092      	lsls	r2, r2, #2
 80007a8:	58d3      	ldr	r3, [r2, r3]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	18d3      	adds	r3, r2, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	4252      	negs	r2, r2
 80007ba:	4313      	orrs	r3, r2
 80007bc:	b25b      	sxtb	r3, r3
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 f869 	bl	8000898 <SendCommand>
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b007      	add	sp, #28
 80007cc:	bd90      	pop	{r4, r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	08003a70 	.word	0x08003a70
 80007d4:	2000003b 	.word	0x2000003b

080007d8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HD44780_Display+0x28>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2204      	movs	r2, #4
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HD44780_Display+0x28>)
 80007e8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <HD44780_Display+0x28>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2208      	movs	r2, #8
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	0018      	movs	r0, r3
 80007f6:	f000 f84f 	bl	8000898 <SendCommand>
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000039 	.word	0x20000039

08000804 <HD44780_ScrollDisplayLeft>:
  dpControl |= LCD_BLINKON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_ScrollDisplayLeft(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 8000808:	2018      	movs	r0, #24
 800080a:	f000 f845 	bl	8000898 <SendCommand>
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	0002      	movs	r2, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	701a      	strb	r2, [r3, #0]
  location &= 0x7;
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	1dfa      	adds	r2, r7, #7
 8000826:	7812      	ldrb	r2, [r2, #0]
 8000828:	2107      	movs	r1, #7
 800082a:	400a      	ands	r2, r1
 800082c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	b25b      	sxtb	r3, r3
 8000836:	2240      	movs	r2, #64	; 0x40
 8000838:	4313      	orrs	r3, r2
 800083a:	b25b      	sxtb	r3, r3
 800083c:	b2db      	uxtb	r3, r3
 800083e:	0018      	movs	r0, r3
 8000840:	f000 f82a 	bl	8000898 <SendCommand>
  for (int i=0; i<8; i++)
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	e009      	b.n	800085e <HD44780_CreateSpecialChar+0x4a>
  {
    SendChar(charmap[i]);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	683a      	ldr	r2, [r7, #0]
 800084e:	18d3      	adds	r3, r2, r3
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	0018      	movs	r0, r3
 8000854:	f000 f830 	bl	80008b8 <SendChar>
  for (int i=0; i<8; i++)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	3301      	adds	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2b07      	cmp	r3, #7
 8000862:	ddf2      	ble.n	800084a <HD44780_CreateSpecialChar+0x36>
  }
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b004      	add	sp, #16
 800086c:	bd80      	pop	{r7, pc}

0800086e <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000876:	e006      	b.n	8000886 <HD44780_PrintStr+0x18>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	1c5a      	adds	r2, r3, #1
 800087c:	607a      	str	r2, [r7, #4]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	0018      	movs	r0, r3
 8000882:	f000 f819 	bl	80008b8 <SendChar>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1f4      	bne.n	8000878 <HD44780_PrintStr+0xa>
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b002      	add	sp, #8
 8000896:	bd80      	pop	{r7, pc}

08000898 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	0002      	movs	r2, r0
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	701a      	strb	r2, [r3, #0]
  Send(cmd, 0);
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2100      	movs	r1, #0
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 f814 	bl	80008d8 <Send>
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b002      	add	sp, #8
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	0002      	movs	r2, r0
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	701a      	strb	r2, [r3, #0]
  Send(ch, RS);
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2101      	movs	r1, #1
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 f804 	bl	80008d8 <Send>
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b002      	add	sp, #8
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	0002      	movs	r2, r0
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	1dbb      	adds	r3, r7, #6
 80008e6:	1c0a      	adds	r2, r1, #0
 80008e8:	701a      	strb	r2, [r3, #0]
  uint8_t highnib = value & 0xF0;
 80008ea:	200f      	movs	r0, #15
 80008ec:	183b      	adds	r3, r7, r0
 80008ee:	1dfa      	adds	r2, r7, #7
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	210f      	movs	r1, #15
 80008f4:	438a      	bics	r2, r1
 80008f6:	701a      	strb	r2, [r3, #0]
  uint8_t lownib = (value<<4) & 0xF0;
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	011a      	lsls	r2, r3, #4
 80008fe:	240e      	movs	r4, #14
 8000900:	193b      	adds	r3, r7, r4
 8000902:	701a      	strb	r2, [r3, #0]
  Write4Bits((highnib)|mode);
 8000904:	183a      	adds	r2, r7, r0
 8000906:	1dbb      	adds	r3, r7, #6
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4313      	orrs	r3, r2
 800090e:	b2db      	uxtb	r3, r3
 8000910:	0018      	movs	r0, r3
 8000912:	f000 f80d 	bl	8000930 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000916:	193a      	adds	r2, r7, r4
 8000918:	1dbb      	adds	r3, r7, #6
 800091a:	7812      	ldrb	r2, [r2, #0]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4313      	orrs	r3, r2
 8000920:	b2db      	uxtb	r3, r3
 8000922:	0018      	movs	r0, r3
 8000924:	f000 f804 	bl	8000930 <Write4Bits>
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b005      	add	sp, #20
 800092e:	bd90      	pop	{r4, r7, pc}

08000930 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	0002      	movs	r2, r0
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(value);
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	0018      	movs	r0, r3
 8000942:	f000 f809 	bl	8000958 <ExpanderWrite>
  PulseEnable(value);
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	0018      	movs	r0, r3
 800094c:	f000 f824 	bl	8000998 <PulseEnable>
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b002      	add	sp, #8
 8000956:	bd80      	pop	{r7, pc}

08000958 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af02      	add	r7, sp, #8
 800095e:	0002      	movs	r2, r0
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	701a      	strb	r2, [r3, #0]
  uint8_t data = _data | dpBacklight;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <ExpanderWrite+0x38>)
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4313      	orrs	r3, r2
 800096e:	b2da      	uxtb	r2, r3
 8000970:	210f      	movs	r1, #15
 8000972:	187b      	adds	r3, r7, r1
 8000974:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000976:	187a      	adds	r2, r7, r1
 8000978:	4806      	ldr	r0, [pc, #24]	; (8000994 <ExpanderWrite+0x3c>)
 800097a:	230a      	movs	r3, #10
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	214e      	movs	r1, #78	; 0x4e
 8000982:	f000 fe65 	bl	8001650 <HAL_I2C_Master_Transmit>
}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b004      	add	sp, #16
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	2000003c 	.word	0x2000003c
 8000994:	20000040 	.word	0x20000040

08000998 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	0002      	movs	r2, r0
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(_data | ENABLE);
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2204      	movs	r2, #4
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff ffd2 	bl	8000958 <ExpanderWrite>
  DelayUS(20);
 80009b4:	2014      	movs	r0, #20
 80009b6:	f000 f817 	bl	80009e8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2204      	movs	r2, #4
 80009c0:	4393      	bics	r3, r2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff ffc7 	bl	8000958 <ExpanderWrite>
  DelayUS(20);
 80009ca:	2014      	movs	r0, #20
 80009cc:	f000 f80c 	bl	80009e8 <DelayUS>
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b002      	add	sp, #8
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <DelayInit>:

static void DelayInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
//  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;

//  DWT->CYCCNT = 0;

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80009dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("NOP");
 80009de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("NOP");
 80009e0:	46c0      	nop			; (mov r8, r8)
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <DelayUS>:

static void DelayUS(uint32_t us) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <DelayUS+0x28>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4907      	ldr	r1, [pc, #28]	; (8000a14 <DelayUS+0x2c>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fb84 	bl	8000104 <__udivsi3>
 80009fc:	0003      	movs	r3, r0
 80009fe:	001a      	movs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4353      	muls	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]

//  do
//  {
//    cnt = DWT->CYCCNT - start;
//  } while(cnt < cycles);
}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b004      	add	sp, #16
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	20000010 	.word	0x20000010
 8000a14:	000f4240 	.word	0x000f4240

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1e:	f000 fa83 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a22:	f000 f825 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a26:	f000 f8f9 	bl	8000c1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a2a:	f000 f8a9 	bl	8000b80 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a2e:	f000 f867 	bl	8000b00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HD44780_Init(2);
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff fdf2 	bl	800061c <HD44780_Init>

   HD44780_Clear();
 8000a38:	f7ff fe7c 	bl	8000734 <HD44780_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HD44780_SetCursor(0,0);
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fe92 	bl	8000768 <HD44780_SetCursor>
	   HD44780_PrintStr("I2C communication succeeded!!");
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <main+0x54>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f7ff ff11 	bl	800086e <HD44780_PrintStr>
	   int x;
	   for(int x=0; x<40; x=x+1)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	e007      	b.n	8000a62 <main+0x4a>
	   {
	     HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000a52:	f7ff fed7 	bl	8000804 <HD44780_ScrollDisplayLeft>
	     HAL_Delay(250);
 8000a56:	20fa      	movs	r0, #250	; 0xfa
 8000a58:	f000 faec 	bl	8001034 <HAL_Delay>
	   for(int x=0; x<40; x=x+1)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b27      	cmp	r3, #39	; 0x27
 8000a66:	ddf4      	ble.n	8000a52 <main+0x3a>
  {
 8000a68:	e7e8      	b.n	8000a3c <main+0x24>
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	08003a80 	.word	0x08003a80

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b095      	sub	sp, #84	; 0x54
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	2414      	movs	r4, #20
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	233c      	movs	r3, #60	; 0x3c
 8000a7e:	001a      	movs	r2, r3
 8000a80:	2100      	movs	r1, #0
 8000a82:	f002 ffbd 	bl	8003a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	0018      	movs	r0, r3
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f002 ffb6 	bl	8003a00 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f001 f98f 	bl	8001dbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	0052      	lsls	r2, r2, #1
 8000aaa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2240      	movs	r2, #64	; 0x40
 8000ab6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f001 f9c7 	bl	8001e54 <HAL_RCC_OscConfig>
 8000ac6:	1e03      	subs	r3, r0, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000aca:	f000 f8f7 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2100      	movs	r1, #0
 8000aea:	0018      	movs	r0, r3
 8000aec:	f001 fd12 	bl	8002514 <HAL_RCC_ClockConfig>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d001      	beq.n	8000af8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000af4:	f000 f8e2 	bl	8000cbc <Error_Handler>
  }
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b015      	add	sp, #84	; 0x54
 8000afe:	bd90      	pop	{r4, r7, pc}

08000b00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_I2C1_Init+0x74>)
 8000b06:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <MX_I2C1_Init+0x78>)
 8000b08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_I2C1_Init+0x74>)
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <MX_I2C1_Init+0x7c>)
 8000b0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_I2C1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_I2C1_Init+0x74>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_I2C1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_I2C1_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_I2C1_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_I2C1_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_I2C1_Init+0x74>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_I2C1_Init+0x74>)
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f000 fcf1 	bl	8001524 <HAL_I2C_Init>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b46:	f000 f8b9 	bl	8000cbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <MX_I2C1_Init+0x74>)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f001 f89c 	bl	8001c8c <HAL_I2CEx_ConfigAnalogFilter>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b58:	f000 f8b0 	bl	8000cbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <MX_I2C1_Init+0x74>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	0018      	movs	r0, r3
 8000b62:	f001 f8df 	bl	8001d24 <HAL_I2CEx_ConfigDigitalFilter>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b6a:	f000 f8a7 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000040 	.word	0x20000040
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	00303d5b 	.word	0x00303d5b

08000b80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000b86:	4a24      	ldr	r2, [pc, #144]	; (8000c18 <MX_USART2_UART_Init+0x98>)
 8000b88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000b8c:	22e1      	movs	r2, #225	; 0xe1
 8000b8e:	0252      	lsls	r2, r2, #9
 8000b90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f002 f888 	bl	8002ce0 <HAL_UART_Init>
 8000bd0:	1e03      	subs	r3, r0, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bd4:	f000 f872 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f002 fe2f 	bl	8003840 <HAL_UARTEx_SetTxFifoThreshold>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000be6:	f000 f869 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bec:	2100      	movs	r1, #0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f002 fe66 	bl	80038c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bf8:	f000 f860 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <MX_USART2_UART_Init+0x94>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f002 fde4 	bl	80037cc <HAL_UARTEx_DisableFifoMode>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c08:	f000 f858 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	20000094 	.word	0x20000094
 8000c18:	40004400 	.word	0x40004400

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	240c      	movs	r4, #12
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	0018      	movs	r0, r3
 8000c28:	2314      	movs	r3, #20
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f002 fee7 	bl	8003a00 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <MX_GPIO_Init+0x9c>)
 8000c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <MX_GPIO_Init+0x9c>)
 8000c38:	2104      	movs	r1, #4
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_GPIO_Init+0x9c>)
 8000c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c42:	2204      	movs	r2, #4
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_GPIO_Init+0x9c>)
 8000c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_GPIO_Init+0x9c>)
 8000c50:	2120      	movs	r1, #32
 8000c52:	430a      	orrs	r2, r1
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_GPIO_Init+0x9c>)
 8000c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5a:	2220      	movs	r2, #32
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_GPIO_Init+0x9c>)
 8000c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_GPIO_Init+0x9c>)
 8000c68:	2101      	movs	r1, #1
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_GPIO_Init+0x9c>)
 8000c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c72:	2201      	movs	r2, #1
 8000c74:	4013      	ands	r3, r2
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c7a:	23a0      	movs	r3, #160	; 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2120      	movs	r1, #32
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 fc30 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c88:	0021      	movs	r1, r4
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2201      	movs	r2, #1
 8000c94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	187a      	adds	r2, r7, r1
 8000ca4:	23a0      	movs	r3, #160	; 0xa0
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	0011      	movs	r1, r2
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 fab0 	bl	8001210 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b009      	add	sp, #36	; 0x24
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	40021000 	.word	0x40021000

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	641a      	str	r2, [r3, #64]	; 0x40
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_MspInit+0x4c>)
 8000ce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cec:	2180      	movs	r1, #128	; 0x80
 8000cee:	0549      	lsls	r1, r1, #21
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	055b      	lsls	r3, r3, #21
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000d02:	23c0      	movs	r3, #192	; 0xc0
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 f9b8 	bl	800107c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b09d      	sub	sp, #116	; 0x74
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	235c      	movs	r3, #92	; 0x5c
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	0018      	movs	r0, r3
 8000d26:	2314      	movs	r3, #20
 8000d28:	001a      	movs	r2, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f002 fe68 	bl	8003a00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d30:	2410      	movs	r4, #16
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	0018      	movs	r0, r3
 8000d36:	234c      	movs	r3, #76	; 0x4c
 8000d38:	001a      	movs	r2, r3
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f002 fe60 	bl	8003a00 <memset>
  if(hi2c->Instance==I2C1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <HAL_I2C_MspInit+0xbc>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d13f      	bne.n	8000dca <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f001 fd85 	bl	8002868 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	1e03      	subs	r3, r0, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d62:	f7ff ffab 	bl	8000cbc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_I2C_MspInit+0xc0>)
 8000d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d6a:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <HAL_I2C_MspInit+0xc0>)
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	635a      	str	r2, [r3, #52]	; 0x34
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_I2C_MspInit+0xc0>)
 8000d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d76:	2201      	movs	r2, #1
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d7e:	215c      	movs	r1, #92	; 0x5c
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	22c0      	movs	r2, #192	; 0xc0
 8000d84:	00d2      	lsls	r2, r2, #3
 8000d86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2212      	movs	r2, #18
 8000d8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2206      	movs	r2, #6
 8000d9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	187a      	adds	r2, r7, r1
 8000da2:	23a0      	movs	r3, #160	; 0xa0
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 fa31 	bl	8001210 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_I2C_MspInit+0xc0>)
 8000db0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_I2C_MspInit+0xc0>)
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	0389      	lsls	r1, r1, #14
 8000db8:	430a      	orrs	r2, r1
 8000dba:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_I2C_MspInit+0xc0>)
 8000dbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	039b      	lsls	r3, r3, #14
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b01d      	add	sp, #116	; 0x74
 8000dd0:	bd90      	pop	{r4, r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	40005400 	.word	0x40005400
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b09d      	sub	sp, #116	; 0x74
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	235c      	movs	r3, #92	; 0x5c
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	0018      	movs	r0, r3
 8000dea:	2314      	movs	r3, #20
 8000dec:	001a      	movs	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	f002 fe06 	bl	8003a00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df4:	2410      	movs	r4, #16
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	0018      	movs	r0, r3
 8000dfa:	234c      	movs	r3, #76	; 0x4c
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f002 fdfe 	bl	8003a00 <memset>
  if(huart->Instance==USART2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a22      	ldr	r2, [pc, #136]	; (8000e94 <HAL_UART_MspInit+0xb8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d13e      	bne.n	8000e8c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	2202      	movs	r2, #2
 8000e12:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f001 fd23 	bl	8002868 <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e26:	f7ff ff49 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <HAL_UART_MspInit+0xbc>)
 8000e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <HAL_UART_MspInit+0xbc>)
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	0289      	lsls	r1, r1, #10
 8000e34:	430a      	orrs	r2, r1
 8000e36:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <HAL_UART_MspInit+0xbc>)
 8000e3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	029b      	lsls	r3, r3, #10
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <HAL_UART_MspInit+0xbc>)
 8000e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_UART_MspInit+0xbc>)
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_UART_MspInit+0xbc>)
 8000e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e56:	2201      	movs	r2, #1
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000e5e:	215c      	movs	r1, #92	; 0x5c
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2202      	movs	r2, #2
 8000e6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	187a      	adds	r2, r7, r1
 8000e80:	23a0      	movs	r3, #160	; 0xa0
 8000e82:	05db      	lsls	r3, r3, #23
 8000e84:	0011      	movs	r1, r2
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 f9c2 	bl	8001210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b01d      	add	sp, #116	; 0x74
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	40004400 	.word	0x40004400
 8000e98:	40021000 	.word	0x40021000

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f89c 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ed6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ed8:	f7ff fff7 	bl	8000eca <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000edc:	480c      	ldr	r0, [pc, #48]	; (8000f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ede:	490d      	ldr	r1, [pc, #52]	; (8000f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <LoopForever+0xe>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef4:	4c0a      	ldr	r4, [pc, #40]	; (8000f20 <LoopForever+0x16>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f02:	f002 fd85 	bl	8003a10 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f06:	f7ff fd87 	bl	8000a18 <main>

08000f0a <LoopForever>:

LoopForever:
  b LoopForever
 8000f0a:	e7fe      	b.n	8000f0a <LoopForever>
  ldr   r0, =_estack
 8000f0c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000f18:	08003b38 	.word	0x08003b38
  ldr r2, =_sbss
 8000f1c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000f20:	2000012c 	.word	0x2000012c

08000f24 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC1_COMP_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_Init+0x3c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_Init+0x3c>)
 8000f3a:	2180      	movs	r1, #128	; 0x80
 8000f3c:	0049      	lsls	r1, r1, #1
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f810 	bl	8000f68 <HAL_InitTick>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	e001      	b.n	8000f58 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f54:	f7ff feb8 	bl	8000cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f58:	1dfb      	adds	r3, r7, #7
 8000f5a:	781b      	ldrb	r3, [r3, #0]
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40022000 	.word	0x40022000

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f70:	230f      	movs	r3, #15
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <HAL_InitTick+0x88>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d02b      	beq.n	8000fd8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <HAL_InitTick+0x8c>)
 8000f82:	681c      	ldr	r4, [r3, #0]
 8000f84:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <HAL_InitTick+0x88>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	0019      	movs	r1, r3
 8000f8a:	23fa      	movs	r3, #250	; 0xfa
 8000f8c:	0098      	lsls	r0, r3, #2
 8000f8e:	f7ff f8b9 	bl	8000104 <__udivsi3>
 8000f92:	0003      	movs	r3, r0
 8000f94:	0019      	movs	r1, r3
 8000f96:	0020      	movs	r0, r4
 8000f98:	f7ff f8b4 	bl	8000104 <__udivsi3>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 f929 	bl	80011f6 <HAL_SYSTICK_Config>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d112      	bne.n	8000fce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d80a      	bhi.n	8000fc4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	425b      	negs	r3, r3
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f000 f908 	bl	80011cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_InitTick+0x90>)
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	e00d      	b.n	8000fe0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e008      	b.n	8000fe0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fce:	230f      	movs	r3, #15
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e003      	b.n	8000fe0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fd8:	230f      	movs	r3, #15
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
}
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b005      	add	sp, #20
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	20000018 	.word	0x20000018
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	20000014 	.word	0x20000014

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_IncTick+0x1c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	001a      	movs	r2, r3
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_IncTick+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	18d2      	adds	r2, r2, r3
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_IncTick+0x20>)
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	20000018 	.word	0x20000018
 800101c:	20000128 	.word	0x20000128

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <HAL_GetTick+0x10>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	20000128 	.word	0x20000128

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff fff0 	bl	8001020 <HAL_GetTick>
 8001040:	0003      	movs	r3, r0
 8001042:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3301      	adds	r3, #1
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	001a      	movs	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	189b      	adds	r3, r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	f7ff ffe0 	bl	8001020 <HAL_GetTick>
 8001060:	0002      	movs	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b004      	add	sp, #16
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	20000018 	.word	0x20000018

0800107c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800108a:	4013      	ands	r3, r2
 800108c:	0019      	movs	r1, r3
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	40010000 	.word	0x40010000
 80010a4:	fffff9ff 	.word	0xfffff9ff

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	0002      	movs	r2, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b7f      	cmp	r3, #127	; 0x7f
 80010bc:	d828      	bhi.n	8001110 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010be:	4a2f      	ldr	r2, [pc, #188]	; (800117c <__NVIC_SetPriority+0xd4>)
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	33c0      	adds	r3, #192	; 0xc0
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	589b      	ldr	r3, [r3, r2]
 80010ce:	1dfa      	adds	r2, r7, #7
 80010d0:	7812      	ldrb	r2, [r2, #0]
 80010d2:	0011      	movs	r1, r2
 80010d4:	2203      	movs	r2, #3
 80010d6:	400a      	ands	r2, r1
 80010d8:	00d2      	lsls	r2, r2, #3
 80010da:	21ff      	movs	r1, #255	; 0xff
 80010dc:	4091      	lsls	r1, r2
 80010de:	000a      	movs	r2, r1
 80010e0:	43d2      	mvns	r2, r2
 80010e2:	401a      	ands	r2, r3
 80010e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	019b      	lsls	r3, r3, #6
 80010ea:	22ff      	movs	r2, #255	; 0xff
 80010ec:	401a      	ands	r2, r3
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	0018      	movs	r0, r3
 80010f4:	2303      	movs	r3, #3
 80010f6:	4003      	ands	r3, r0
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010fc:	481f      	ldr	r0, [pc, #124]	; (800117c <__NVIC_SetPriority+0xd4>)
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b25b      	sxtb	r3, r3
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	430a      	orrs	r2, r1
 8001108:	33c0      	adds	r3, #192	; 0xc0
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800110e:	e031      	b.n	8001174 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <__NVIC_SetPriority+0xd8>)
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	0019      	movs	r1, r3
 8001118:	230f      	movs	r3, #15
 800111a:	400b      	ands	r3, r1
 800111c:	3b08      	subs	r3, #8
 800111e:	089b      	lsrs	r3, r3, #2
 8001120:	3306      	adds	r3, #6
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	18d3      	adds	r3, r2, r3
 8001126:	3304      	adds	r3, #4
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	1dfa      	adds	r2, r7, #7
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	0011      	movs	r1, r2
 8001130:	2203      	movs	r2, #3
 8001132:	400a      	ands	r2, r1
 8001134:	00d2      	lsls	r2, r2, #3
 8001136:	21ff      	movs	r1, #255	; 0xff
 8001138:	4091      	lsls	r1, r2
 800113a:	000a      	movs	r2, r1
 800113c:	43d2      	mvns	r2, r2
 800113e:	401a      	ands	r2, r3
 8001140:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	019b      	lsls	r3, r3, #6
 8001146:	22ff      	movs	r2, #255	; 0xff
 8001148:	401a      	ands	r2, r3
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	0018      	movs	r0, r3
 8001150:	2303      	movs	r3, #3
 8001152:	4003      	ands	r3, r0
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001158:	4809      	ldr	r0, [pc, #36]	; (8001180 <__NVIC_SetPriority+0xd8>)
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	001c      	movs	r4, r3
 8001160:	230f      	movs	r3, #15
 8001162:	4023      	ands	r3, r4
 8001164:	3b08      	subs	r3, #8
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	430a      	orrs	r2, r1
 800116a:	3306      	adds	r3, #6
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	18c3      	adds	r3, r0, r3
 8001170:	3304      	adds	r3, #4
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	b003      	add	sp, #12
 800117a:	bd90      	pop	{r4, r7, pc}
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	1e5a      	subs	r2, r3, #1
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	045b      	lsls	r3, r3, #17
 8001194:	429a      	cmp	r2, r3
 8001196:	d301      	bcc.n	800119c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001198:	2301      	movs	r3, #1
 800119a:	e010      	b.n	80011be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <SysTick_Config+0x44>)
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	3a01      	subs	r2, #1
 80011a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a4:	2301      	movs	r3, #1
 80011a6:	425b      	negs	r3, r3
 80011a8:	2103      	movs	r1, #3
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7ff ff7c 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x44>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x44>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	210f      	movs	r1, #15
 80011d8:	187b      	adds	r3, r7, r1
 80011da:	1c02      	adds	r2, r0, #0
 80011dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	187b      	adds	r3, r7, r1
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	0011      	movs	r1, r2
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b004      	add	sp, #16
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff ffbf 	bl	8001184 <SysTick_Config>
 8001206:	0003      	movs	r3, r0
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121e:	e14d      	b.n	80014bc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2101      	movs	r1, #1
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4091      	lsls	r1, r2
 800122a:	000a      	movs	r2, r1
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d100      	bne.n	8001238 <HAL_GPIO_Init+0x28>
 8001236:	e13e      	b.n	80014b6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2203      	movs	r2, #3
 800123e:	4013      	ands	r3, r2
 8001240:	2b01      	cmp	r3, #1
 8001242:	d005      	beq.n	8001250 <HAL_GPIO_Init+0x40>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2203      	movs	r2, #3
 800124a:	4013      	ands	r3, r2
 800124c:	2b02      	cmp	r3, #2
 800124e:	d130      	bne.n	80012b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	409a      	lsls	r2, r3
 800125e:	0013      	movs	r3, r2
 8001260:	43da      	mvns	r2, r3
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001286:	2201      	movs	r2, #1
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	43da      	mvns	r2, r3
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	2201      	movs	r2, #1
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2203      	movs	r2, #3
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b03      	cmp	r3, #3
 80012bc:	d017      	beq.n	80012ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2203      	movs	r2, #3
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d123      	bne.n	8001342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	58d3      	ldr	r3, [r2, r3]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2207      	movs	r2, #7
 800130c:	4013      	ands	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	2107      	movs	r1, #7
 8001326:	400b      	ands	r3, r1
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	0092      	lsls	r2, r2, #2
 800133e:	6939      	ldr	r1, [r7, #16]
 8001340:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	43da      	mvns	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2203      	movs	r2, #3
 8001360:	401a      	ands	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	23c0      	movs	r3, #192	; 0xc0
 800137c:	029b      	lsls	r3, r3, #10
 800137e:	4013      	ands	r3, r2
 8001380:	d100      	bne.n	8001384 <HAL_GPIO_Init+0x174>
 8001382:	e098      	b.n	80014b6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001384:	4a53      	ldr	r2, [pc, #332]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3318      	adds	r3, #24
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	589b      	ldr	r3, [r3, r2]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2203      	movs	r2, #3
 8001396:	4013      	ands	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	220f      	movs	r2, #15
 800139c:	409a      	lsls	r2, r3
 800139e:	0013      	movs	r3, r2
 80013a0:	43da      	mvns	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	23a0      	movs	r3, #160	; 0xa0
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x1d6>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a48      	ldr	r2, [pc, #288]	; (80014d8 <HAL_GPIO_Init+0x2c8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x1d2>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a47      	ldr	r2, [pc, #284]	; (80014dc <HAL_GPIO_Init+0x2cc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x1ce>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a46      	ldr	r2, [pc, #280]	; (80014e0 <HAL_GPIO_Init+0x2d0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x1ca>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a45      	ldr	r2, [pc, #276]	; (80014e4 <HAL_GPIO_Init+0x2d4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x1c6>
 80013d2:	2304      	movs	r3, #4
 80013d4:	e008      	b.n	80013e8 <HAL_GPIO_Init+0x1d8>
 80013d6:	2305      	movs	r3, #5
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x1d8>
 80013da:	2303      	movs	r3, #3
 80013dc:	e004      	b.n	80013e8 <HAL_GPIO_Init+0x1d8>
 80013de:	2302      	movs	r3, #2
 80013e0:	e002      	b.n	80013e8 <HAL_GPIO_Init+0x1d8>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_GPIO_Init+0x1d8>
 80013e6:	2300      	movs	r3, #0
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	2103      	movs	r1, #3
 80013ec:	400a      	ands	r2, r1
 80013ee:	00d2      	lsls	r2, r2, #3
 80013f0:	4093      	lsls	r3, r2
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013f8:	4936      	ldr	r1, [pc, #216]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3318      	adds	r3, #24
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001406:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43da      	mvns	r2, r3
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	035b      	lsls	r3, r3, #13
 800141e:	4013      	ands	r3, r2
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001430:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43da      	mvns	r2, r3
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	039b      	lsls	r3, r3, #14
 8001448:	4013      	ands	r3, r2
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800145a:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 800145c:	2384      	movs	r3, #132	; 0x84
 800145e:	58d3      	ldr	r3, [r2, r3]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43da      	mvns	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	029b      	lsls	r3, r3, #10
 8001474:	4013      	ands	r3, r2
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001480:	4914      	ldr	r1, [pc, #80]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 8001482:	2284      	movs	r2, #132	; 0x84
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001488:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	58d3      	ldr	r3, [r2, r3]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43da      	mvns	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	025b      	lsls	r3, r3, #9
 80014a2:	4013      	ands	r3, r2
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ae:	4909      	ldr	r1, [pc, #36]	; (80014d4 <HAL_GPIO_Init+0x2c4>)
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	40da      	lsrs	r2, r3
 80014c4:	1e13      	subs	r3, r2, #0
 80014c6:	d000      	beq.n	80014ca <HAL_GPIO_Init+0x2ba>
 80014c8:	e6aa      	b.n	8001220 <HAL_GPIO_Init+0x10>
  }
}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46c0      	nop			; (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b006      	add	sp, #24
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021800 	.word	0x40021800
 80014d8:	50000400 	.word	0x50000400
 80014dc:	50000800 	.word	0x50000800
 80014e0:	50000c00 	.word	0x50000c00
 80014e4:	50001000 	.word	0x50001000

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	0008      	movs	r0, r1
 80014f2:	0011      	movs	r1, r2
 80014f4:	1cbb      	adds	r3, r7, #2
 80014f6:	1c02      	adds	r2, r0, #0
 80014f8:	801a      	strh	r2, [r3, #0]
 80014fa:	1c7b      	adds	r3, r7, #1
 80014fc:	1c0a      	adds	r2, r1, #0
 80014fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001500:	1c7b      	adds	r3, r7, #1
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d004      	beq.n	8001512 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001508:	1cbb      	adds	r3, r7, #2
 800150a:	881a      	ldrh	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001510:	e003      	b.n	800151a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001512:	1cbb      	adds	r3, r7, #2
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e082      	b.n	800163c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2241      	movs	r2, #65	; 0x41
 800153a:	5c9b      	ldrb	r3, [r3, r2]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d107      	bne.n	8001552 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2240      	movs	r2, #64	; 0x40
 8001546:	2100      	movs	r1, #0
 8001548:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff fbe3 	bl	8000d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2241      	movs	r2, #65	; 0x41
 8001556:	2124      	movs	r1, #36	; 0x24
 8001558:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2101      	movs	r1, #1
 8001566:	438a      	bics	r2, r1
 8001568:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4934      	ldr	r1, [pc, #208]	; (8001644 <HAL_I2C_Init+0x120>)
 8001574:	400a      	ands	r2, r1
 8001576:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4931      	ldr	r1, [pc, #196]	; (8001648 <HAL_I2C_Init+0x124>)
 8001584:	400a      	ands	r2, r1
 8001586:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d108      	bne.n	80015a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	0209      	lsls	r1, r1, #8
 800159c:	430a      	orrs	r2, r1
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	e007      	b.n	80015b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2184      	movs	r1, #132	; 0x84
 80015ac:	0209      	lsls	r1, r1, #8
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d104      	bne.n	80015c4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	491f      	ldr	r1, [pc, #124]	; (800164c <HAL_I2C_Init+0x128>)
 80015d0:	430a      	orrs	r2, r1
 80015d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	491a      	ldr	r1, [pc, #104]	; (8001648 <HAL_I2C_Init+0x124>)
 80015e0:	400a      	ands	r2, r1
 80015e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69d9      	ldr	r1, [r3, #28]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1a      	ldr	r2, [r3, #32]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2101      	movs	r1, #1
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2241      	movs	r2, #65	; 0x41
 8001628:	2120      	movs	r1, #32
 800162a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2242      	movs	r2, #66	; 0x42
 8001636:	2100      	movs	r1, #0
 8001638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b002      	add	sp, #8
 8001642:	bd80      	pop	{r7, pc}
 8001644:	f0ffffff 	.word	0xf0ffffff
 8001648:	ffff7fff 	.word	0xffff7fff
 800164c:	02008000 	.word	0x02008000

08001650 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af02      	add	r7, sp, #8
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	0008      	movs	r0, r1
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	0019      	movs	r1, r3
 800165e:	230a      	movs	r3, #10
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	1c02      	adds	r2, r0, #0
 8001664:	801a      	strh	r2, [r3, #0]
 8001666:	2308      	movs	r3, #8
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	1c0a      	adds	r2, r1, #0
 800166c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2241      	movs	r2, #65	; 0x41
 8001672:	5c9b      	ldrb	r3, [r3, r2]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b20      	cmp	r3, #32
 8001678:	d000      	beq.n	800167c <HAL_I2C_Master_Transmit+0x2c>
 800167a:	e0e7      	b.n	800184c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2240      	movs	r2, #64	; 0x40
 8001680:	5c9b      	ldrb	r3, [r3, r2]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_I2C_Master_Transmit+0x3a>
 8001686:	2302      	movs	r3, #2
 8001688:	e0e1      	b.n	800184e <HAL_I2C_Master_Transmit+0x1fe>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2240      	movs	r2, #64	; 0x40
 800168e:	2101      	movs	r1, #1
 8001690:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001692:	f7ff fcc5 	bl	8001020 <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	0219      	lsls	r1, r3, #8
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2319      	movs	r3, #25
 80016a6:	2201      	movs	r2, #1
 80016a8:	f000 f8fc 	bl	80018a4 <I2C_WaitOnFlagUntilTimeout>
 80016ac:	1e03      	subs	r3, r0, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0cc      	b.n	800184e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2241      	movs	r2, #65	; 0x41
 80016b8:	2121      	movs	r1, #33	; 0x21
 80016ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2242      	movs	r2, #66	; 0x42
 80016c0:	2110      	movs	r1, #16
 80016c2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2208      	movs	r2, #8
 80016d4:	18ba      	adds	r2, r7, r2
 80016d6:	8812      	ldrh	r2, [r2, #0]
 80016d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	2bff      	cmp	r3, #255	; 0xff
 80016e8:	d911      	bls.n	800170e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	22ff      	movs	r2, #255	; 0xff
 80016ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	045c      	lsls	r4, r3, #17
 80016fa:	230a      	movs	r3, #10
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	8819      	ldrh	r1, [r3, #0]
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	4b55      	ldr	r3, [pc, #340]	; (8001858 <HAL_I2C_Master_Transmit+0x208>)
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	0023      	movs	r3, r4
 8001708:	f000 fa86 	bl	8001c18 <I2C_TransferConfig>
 800170c:	e075      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001712:	b29a      	uxth	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171c:	b2da      	uxtb	r2, r3
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	049c      	lsls	r4, r3, #18
 8001722:	230a      	movs	r3, #10
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	8819      	ldrh	r1, [r3, #0]
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	4b4b      	ldr	r3, [pc, #300]	; (8001858 <HAL_I2C_Master_Transmit+0x208>)
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	0023      	movs	r3, r4
 8001730:	f000 fa72 	bl	8001c18 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001734:	e061      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	0018      	movs	r0, r3
 800173e:	f000 f8f0 	bl	8001922 <I2C_WaitOnTXISFlagUntilTimeout>
 8001742:	1e03      	subs	r3, r0, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e081      	b.n	800184e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	781a      	ldrb	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	3b01      	subs	r3, #1
 8001768:	b29a      	uxth	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001772:	3b01      	subs	r3, #1
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d03a      	beq.n	80017fa <HAL_I2C_Master_Transmit+0x1aa>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001788:	2b00      	cmp	r3, #0
 800178a:	d136      	bne.n	80017fa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800178c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	0013      	movs	r3, r2
 8001796:	2200      	movs	r2, #0
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	f000 f883 	bl	80018a4 <I2C_WaitOnFlagUntilTimeout>
 800179e:	1e03      	subs	r3, r0, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e053      	b.n	800184e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	2bff      	cmp	r3, #255	; 0xff
 80017ae:	d911      	bls.n	80017d4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	22ff      	movs	r2, #255	; 0xff
 80017b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	045c      	lsls	r4, r3, #17
 80017c0:	230a      	movs	r3, #10
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	8819      	ldrh	r1, [r3, #0]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	2300      	movs	r3, #0
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	0023      	movs	r3, r4
 80017ce:	f000 fa23 	bl	8001c18 <I2C_TransferConfig>
 80017d2:	e012      	b.n	80017fa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	049c      	lsls	r4, r3, #18
 80017e8:	230a      	movs	r3, #10
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	8819      	ldrh	r1, [r3, #0]
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	2300      	movs	r3, #0
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	0023      	movs	r3, r4
 80017f6:	f000 fa0f 	bl	8001c18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fe:	b29b      	uxth	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d198      	bne.n	8001736 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	0018      	movs	r0, r3
 800180c:	f000 f8c8 	bl	80019a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001810:	1e03      	subs	r3, r0, #0
 8001812:	d001      	beq.n	8001818 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e01a      	b.n	800184e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2220      	movs	r2, #32
 800181e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	490c      	ldr	r1, [pc, #48]	; (800185c <HAL_I2C_Master_Transmit+0x20c>)
 800182c:	400a      	ands	r2, r1
 800182e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2241      	movs	r2, #65	; 0x41
 8001834:	2120      	movs	r1, #32
 8001836:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2242      	movs	r2, #66	; 0x42
 800183c:	2100      	movs	r1, #0
 800183e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2240      	movs	r2, #64	; 0x40
 8001844:	2100      	movs	r1, #0
 8001846:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	e000      	b.n	800184e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800184c:	2302      	movs	r3, #2
  }
}
 800184e:	0018      	movs	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	b007      	add	sp, #28
 8001854:	bd90      	pop	{r4, r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	80002000 	.word	0x80002000
 800185c:	fe00e800 	.word	0xfe00e800

08001860 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2202      	movs	r2, #2
 8001870:	4013      	ands	r3, r2
 8001872:	2b02      	cmp	r3, #2
 8001874:	d103      	bne.n	800187e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2201      	movs	r2, #1
 8001886:	4013      	ands	r3, r2
 8001888:	2b01      	cmp	r3, #1
 800188a:	d007      	beq.n	800189c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	619a      	str	r2, [r3, #24]
  }
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b002      	add	sp, #8
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	1dfb      	adds	r3, r7, #7
 80018b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018b4:	e021      	b.n	80018fa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	d01e      	beq.n	80018fa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018bc:	f7ff fbb0 	bl	8001020 <HAL_GetTick>
 80018c0:	0002      	movs	r2, r0
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d302      	bcc.n	80018d2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d113      	bne.n	80018fa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	2220      	movs	r2, #32
 80018d8:	431a      	orrs	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2241      	movs	r2, #65	; 0x41
 80018e2:	2120      	movs	r1, #32
 80018e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2242      	movs	r2, #66	; 0x42
 80018ea:	2100      	movs	r1, #0
 80018ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2240      	movs	r2, #64	; 0x40
 80018f2:	2100      	movs	r1, #0
 80018f4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	4013      	ands	r3, r2
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	425a      	negs	r2, r3
 800190a:	4153      	adcs	r3, r2
 800190c:	b2db      	uxtb	r3, r3
 800190e:	001a      	movs	r2, r3
 8001910:	1dfb      	adds	r3, r7, #7
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d0ce      	beq.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	0018      	movs	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	b004      	add	sp, #16
 8001920:	bd80      	pop	{r7, pc}

08001922 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800192e:	e02b      	b.n	8001988 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	0018      	movs	r0, r3
 8001938:	f000 f86e 	bl	8001a18 <I2C_IsErrorOccurred>
 800193c:	1e03      	subs	r3, r0, #0
 800193e:	d001      	beq.n	8001944 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e029      	b.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	3301      	adds	r3, #1
 8001948:	d01e      	beq.n	8001988 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194a:	f7ff fb69 	bl	8001020 <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	429a      	cmp	r2, r3
 8001958:	d302      	bcc.n	8001960 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d113      	bne.n	8001988 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	2220      	movs	r2, #32
 8001966:	431a      	orrs	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2241      	movs	r2, #65	; 0x41
 8001970:	2120      	movs	r1, #32
 8001972:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2242      	movs	r2, #66	; 0x42
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2240      	movs	r2, #64	; 0x40
 8001980:	2100      	movs	r1, #0
 8001982:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e007      	b.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2202      	movs	r2, #2
 8001990:	4013      	ands	r3, r2
 8001992:	2b02      	cmp	r3, #2
 8001994:	d1cc      	bne.n	8001930 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b004      	add	sp, #16
 800199e:	bd80      	pop	{r7, pc}

080019a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ac:	e028      	b.n	8001a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f000 f82f 	bl	8001a18 <I2C_IsErrorOccurred>
 80019ba:	1e03      	subs	r3, r0, #0
 80019bc:	d001      	beq.n	80019c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e026      	b.n	8001a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c2:	f7ff fb2d 	bl	8001020 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d302      	bcc.n	80019d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d113      	bne.n	8001a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	2220      	movs	r2, #32
 80019de:	431a      	orrs	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2241      	movs	r2, #65	; 0x41
 80019e8:	2120      	movs	r1, #32
 80019ea:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2242      	movs	r2, #66	; 0x42
 80019f0:	2100      	movs	r1, #0
 80019f2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	2100      	movs	r1, #0
 80019fa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e007      	b.n	8001a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2220      	movs	r2, #32
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	d1cf      	bne.n	80019ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b004      	add	sp, #16
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b08b      	sub	sp, #44	; 0x2c
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a24:	2327      	movs	r3, #39	; 0x27
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2210      	movs	r2, #16
 8001a40:	4013      	ands	r3, r2
 8001a42:	d100      	bne.n	8001a46 <I2C_IsErrorOccurred+0x2e>
 8001a44:	e082      	b.n	8001b4c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a4e:	e060      	b.n	8001b12 <I2C_IsErrorOccurred+0xfa>
 8001a50:	2427      	movs	r4, #39	; 0x27
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	193a      	adds	r2, r7, r4
 8001a56:	7812      	ldrb	r2, [r2, #0]
 8001a58:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	d058      	beq.n	8001b12 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a60:	f7ff fade 	bl	8001020 <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d306      	bcc.n	8001a7e <I2C_IsErrorOccurred+0x66>
 8001a70:	193b      	adds	r3, r7, r4
 8001a72:	193a      	adds	r2, r7, r4
 8001a74:	7812      	ldrb	r2, [r2, #0]
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d149      	bne.n	8001b12 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	01db      	lsls	r3, r3, #7
 8001a88:	4013      	ands	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a8c:	2013      	movs	r0, #19
 8001a8e:	183b      	adds	r3, r7, r0
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	2142      	movs	r1, #66	; 0x42
 8001a94:	5c52      	ldrb	r2, [r2, r1]
 8001a96:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d126      	bne.n	8001afa <I2C_IsErrorOccurred+0xe2>
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	01db      	lsls	r3, r3, #7
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d021      	beq.n	8001afa <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001ab6:	183b      	adds	r3, r7, r0
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	d01d      	beq.n	8001afa <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	01c9      	lsls	r1, r1, #7
 8001acc:	430a      	orrs	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ad0:	f7ff faa6 	bl	8001020 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ad8:	e00f      	b.n	8001afa <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ada:	f7ff faa1 	bl	8001020 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b19      	cmp	r3, #25
 8001ae6:	d908      	bls.n	8001afa <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	2220      	movs	r2, #32
 8001aec:	4313      	orrs	r3, r2
 8001aee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001af0:	2327      	movs	r3, #39	; 0x27
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]

              break;
 8001af8:	e00b      	b.n	8001b12 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2220      	movs	r2, #32
 8001b02:	4013      	ands	r3, r2
 8001b04:	2127      	movs	r1, #39	; 0x27
 8001b06:	187a      	adds	r2, r7, r1
 8001b08:	1879      	adds	r1, r7, r1
 8001b0a:	7809      	ldrb	r1, [r1, #0]
 8001b0c:	7011      	strb	r1, [r2, #0]
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	d1e3      	bne.n	8001ada <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	d004      	beq.n	8001b2a <I2C_IsErrorOccurred+0x112>
 8001b20:	2327      	movs	r3, #39	; 0x27
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d092      	beq.n	8001a50 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b2a:	2327      	movs	r3, #39	; 0x27
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d103      	bne.n	8001b3c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	2204      	movs	r2, #4
 8001b40:	4313      	orrs	r3, r2
 8001b42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b44:	2327      	movs	r3, #39	; 0x27
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d00c      	beq.n	8001b78 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	2201      	movs	r2, #1
 8001b62:	4313      	orrs	r3, r2
 8001b64:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	0052      	lsls	r2, r2, #1
 8001b6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b70:	2327      	movs	r3, #39	; 0x27
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d00c      	beq.n	8001b9c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	2208      	movs	r2, #8
 8001b86:	4313      	orrs	r3, r2
 8001b88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	00d2      	lsls	r2, r2, #3
 8001b92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b94:	2327      	movs	r3, #39	; 0x27
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d00c      	beq.n	8001bc0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	4313      	orrs	r3, r2
 8001bac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	0092      	lsls	r2, r2, #2
 8001bb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bb8:	2327      	movs	r3, #39	; 0x27
 8001bba:	18fb      	adds	r3, r7, r3
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001bc0:	2327      	movs	r3, #39	; 0x27
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d01d      	beq.n	8001c06 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7ff fe47 	bl	8001860 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	490d      	ldr	r1, [pc, #52]	; (8001c14 <I2C_IsErrorOccurred+0x1fc>)
 8001bde:	400a      	ands	r2, r1
 8001be0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	431a      	orrs	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2241      	movs	r2, #65	; 0x41
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2242      	movs	r2, #66	; 0x42
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2240      	movs	r2, #64	; 0x40
 8001c02:	2100      	movs	r1, #0
 8001c04:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001c06:	2327      	movs	r3, #39	; 0x27
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	781b      	ldrb	r3, [r3, #0]
}
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b00b      	add	sp, #44	; 0x2c
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	fe00e800 	.word	0xfe00e800

08001c18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	0008      	movs	r0, r1
 8001c22:	0011      	movs	r1, r2
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	240a      	movs	r4, #10
 8001c28:	193b      	adds	r3, r7, r4
 8001c2a:	1c02      	adds	r2, r0, #0
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	2009      	movs	r0, #9
 8001c30:	183b      	adds	r3, r7, r0
 8001c32:	1c0a      	adds	r2, r1, #0
 8001c34:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c36:	193b      	adds	r3, r7, r4
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	059b      	lsls	r3, r3, #22
 8001c3c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c3e:	183b      	adds	r3, r7, r0
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	0419      	lsls	r1, r3, #16
 8001c44:	23ff      	movs	r3, #255	; 0xff
 8001c46:	041b      	lsls	r3, r3, #16
 8001c48:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c4a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	4313      	orrs	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c62:	0d51      	lsrs	r1, r2, #21
 8001c64:	2280      	movs	r2, #128	; 0x80
 8001c66:	00d2      	lsls	r2, r2, #3
 8001c68:	400a      	ands	r2, r1
 8001c6a:	4907      	ldr	r1, [pc, #28]	; (8001c88 <I2C_TransferConfig+0x70>)
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	43d2      	mvns	r2, r2
 8001c70:	401a      	ands	r2, r3
 8001c72:	0011      	movs	r1, r2
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b007      	add	sp, #28
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	03ff63ff 	.word	0x03ff63ff

08001c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2241      	movs	r2, #65	; 0x41
 8001c9a:	5c9b      	ldrb	r3, [r3, r2]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d138      	bne.n	8001d14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2240      	movs	r2, #64	; 0x40
 8001ca6:	5c9b      	ldrb	r3, [r3, r2]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e032      	b.n	8001d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2240      	movs	r2, #64	; 0x40
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2241      	movs	r2, #65	; 0x41
 8001cbc:	2124      	movs	r1, #36	; 0x24
 8001cbe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2101      	movs	r1, #1
 8001ccc:	438a      	bics	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4911      	ldr	r1, [pc, #68]	; (8001d20 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2241      	movs	r2, #65	; 0x41
 8001d04:	2120      	movs	r1, #32
 8001d06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e000      	b.n	8001d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
  }
}
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b002      	add	sp, #8
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	ffffefff 	.word	0xffffefff

08001d24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2241      	movs	r2, #65	; 0x41
 8001d32:	5c9b      	ldrb	r3, [r3, r2]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d139      	bne.n	8001dae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2240      	movs	r2, #64	; 0x40
 8001d3e:	5c9b      	ldrb	r3, [r3, r2]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e033      	b.n	8001db0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2240      	movs	r2, #64	; 0x40
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2241      	movs	r2, #65	; 0x41
 8001d54:	2124      	movs	r1, #36	; 0x24
 8001d56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2101      	movs	r1, #1
 8001d64:	438a      	bics	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2241      	movs	r2, #65	; 0x41
 8001d9e:	2120      	movs	r1, #32
 8001da0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2240      	movs	r2, #64	; 0x40
 8001da6:	2100      	movs	r1, #0
 8001da8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e000      	b.n	8001db0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dae:	2302      	movs	r3, #2
  }
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b004      	add	sp, #16
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	fffff0ff 	.word	0xfffff0ff

08001dbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d11f      	bne.n	8001e20 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	0013      	movs	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	189b      	adds	r3, r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4912      	ldr	r1, [pc, #72]	; (8001e38 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001dee:	0018      	movs	r0, r3
 8001df0:	f7fe f988 	bl	8000104 <__udivsi3>
 8001df4:	0003      	movs	r3, r0
 8001df6:	3301      	adds	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dfa:	e008      	b.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e001      	b.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e009      	b.n	8001e22 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	401a      	ands	r2, r3
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d0ed      	beq.n	8001dfc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	0018      	movs	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b004      	add	sp, #16
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	fffff9ff 	.word	0xfffff9ff
 8001e34:	20000010 	.word	0x20000010
 8001e38:	000f4240 	.word	0x000f4240

08001e3c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	23e0      	movs	r3, #224	; 0xe0
 8001e46:	01db      	lsls	r3, r3, #7
 8001e48:	4013      	ands	r3, r2
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f000 fb50 	bl	8002508 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d100      	bne.n	8001e74 <HAL_RCC_OscConfig+0x20>
 8001e72:	e07c      	b.n	8001f6e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e74:	4bc3      	ldr	r3, [pc, #780]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2238      	movs	r2, #56	; 0x38
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e7e:	4bc1      	ldr	r3, [pc, #772]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2203      	movs	r2, #3
 8001e84:	4013      	ands	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d102      	bne.n	8001e94 <HAL_RCC_OscConfig+0x40>
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d002      	beq.n	8001e9a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d10b      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9a:	4bba      	ldr	r3, [pc, #744]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	029b      	lsls	r3, r3, #10
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d062      	beq.n	8001f6c <HAL_RCC_OscConfig+0x118>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d15e      	bne.n	8001f6c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e32a      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	025b      	lsls	r3, r3, #9
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_OscConfig+0x7a>
 8001ebe:	4bb1      	ldr	r3, [pc, #708]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4bb0      	ldr	r3, [pc, #704]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	0249      	lsls	r1, r1, #9
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e020      	b.n	8001f10 <HAL_RCC_OscConfig+0xbc>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	23a0      	movs	r3, #160	; 0xa0
 8001ed4:	02db      	lsls	r3, r3, #11
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xa4>
 8001eda:	4baa      	ldr	r3, [pc, #680]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4ba9      	ldr	r3, [pc, #676]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	02c9      	lsls	r1, r1, #11
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	4ba6      	ldr	r3, [pc, #664]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4ba5      	ldr	r3, [pc, #660]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	0249      	lsls	r1, r1, #9
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_OscConfig+0xbc>
 8001ef8:	4ba2      	ldr	r3, [pc, #648]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4ba1      	ldr	r3, [pc, #644]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001efe:	49a2      	ldr	r1, [pc, #648]	; (8002188 <HAL_RCC_OscConfig+0x334>)
 8001f00:	400a      	ands	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	4b9f      	ldr	r3, [pc, #636]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b9e      	ldr	r3, [pc, #632]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001f0a:	49a0      	ldr	r1, [pc, #640]	; (800218c <HAL_RCC_OscConfig+0x338>)
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d014      	beq.n	8001f42 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff f882 	bl	8001020 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f22:	f7ff f87d 	bl	8001020 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b64      	cmp	r3, #100	; 0x64
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e2e9      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f34:	4b93      	ldr	r3, [pc, #588]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	029b      	lsls	r3, r3, #10
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0xce>
 8001f40:	e015      	b.n	8001f6e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff f86d 	bl	8001020 <HAL_GetTick>
 8001f46:	0003      	movs	r3, r0
 8001f48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff f868 	bl	8001020 <HAL_GetTick>
 8001f50:	0002      	movs	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e2d4      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f5e:	4b89      	ldr	r3, [pc, #548]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	029b      	lsls	r3, r3, #10
 8001f66:	4013      	ands	r3, r2
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0xf8>
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2202      	movs	r2, #2
 8001f74:	4013      	ands	r3, r2
 8001f76:	d100      	bne.n	8001f7a <HAL_RCC_OscConfig+0x126>
 8001f78:	e099      	b.n	80020ae <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7a:	4b82      	ldr	r3, [pc, #520]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2238      	movs	r2, #56	; 0x38
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f84:	4b7f      	ldr	r3, [pc, #508]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	d102      	bne.n	8001f9a <HAL_RCC_OscConfig+0x146>
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d002      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d135      	bne.n	800200c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa0:	4b78      	ldr	r3, [pc, #480]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x164>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e2a7      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b72      	ldr	r3, [pc, #456]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a74      	ldr	r2, [pc, #464]	; (8002190 <HAL_RCC_OscConfig+0x33c>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	021a      	lsls	r2, r3, #8
 8001fc8:	4b6e      	ldr	r3, [pc, #440]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d112      	bne.n	8001ffa <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fd4:	4b6b      	ldr	r3, [pc, #428]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a6e      	ldr	r2, [pc, #440]	; (8002194 <HAL_RCC_OscConfig+0x340>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	0019      	movs	r1, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	4b68      	ldr	r3, [pc, #416]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001fe8:	4b66      	ldr	r3, [pc, #408]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0adb      	lsrs	r3, r3, #11
 8001fee:	2207      	movs	r2, #7
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	4a69      	ldr	r2, [pc, #420]	; (8002198 <HAL_RCC_OscConfig+0x344>)
 8001ff4:	40da      	lsrs	r2, r3
 8001ff6:	4b69      	ldr	r3, [pc, #420]	; (800219c <HAL_RCC_OscConfig+0x348>)
 8001ff8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ffa:	4b69      	ldr	r3, [pc, #420]	; (80021a0 <HAL_RCC_OscConfig+0x34c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0018      	movs	r0, r3
 8002000:	f7fe ffb2 	bl	8000f68 <HAL_InitTick>
 8002004:	1e03      	subs	r3, r0, #0
 8002006:	d051      	beq.n	80020ac <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e27d      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d030      	beq.n	8002076 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002014:	4b5b      	ldr	r3, [pc, #364]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a5e      	ldr	r2, [pc, #376]	; (8002194 <HAL_RCC_OscConfig+0x340>)
 800201a:	4013      	ands	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	4b58      	ldr	r3, [pc, #352]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b56      	ldr	r3, [pc, #344]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b55      	ldr	r3, [pc, #340]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	0049      	lsls	r1, r1, #1
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7fe fff3 	bl	8001020 <HAL_GetTick>
 800203a:	0003      	movs	r3, r0
 800203c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002040:	f7fe ffee 	bl	8001020 <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e25a      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002052:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4013      	ands	r3, r2
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205e:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a4b      	ldr	r2, [pc, #300]	; (8002190 <HAL_RCC_OscConfig+0x33c>)
 8002064:	4013      	ands	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	021a      	lsls	r2, r3, #8
 800206e:	4b45      	ldr	r3, [pc, #276]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8002070:	430a      	orrs	r2, r1
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	e01b      	b.n	80020ae <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002076:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4b42      	ldr	r3, [pc, #264]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 800207c:	4949      	ldr	r1, [pc, #292]	; (80021a4 <HAL_RCC_OscConfig+0x350>)
 800207e:	400a      	ands	r2, r1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7fe ffcd 	bl	8001020 <HAL_GetTick>
 8002086:	0003      	movs	r3, r0
 8002088:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208c:	f7fe ffc8 	bl	8001020 <HAL_GetTick>
 8002090:	0002      	movs	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e234      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800209e:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4013      	ands	r3, r2
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x238>
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2208      	movs	r2, #8
 80020b4:	4013      	ands	r3, r2
 80020b6:	d047      	beq.n	8002148 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020b8:	4b32      	ldr	r3, [pc, #200]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2238      	movs	r2, #56	; 0x38
 80020be:	4013      	ands	r3, r2
 80020c0:	2b18      	cmp	r3, #24
 80020c2:	d10a      	bne.n	80020da <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 80020c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c8:	2202      	movs	r2, #2
 80020ca:	4013      	ands	r3, r2
 80020cc:	d03c      	beq.n	8002148 <HAL_RCC_OscConfig+0x2f4>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d138      	bne.n	8002148 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e216      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d019      	beq.n	8002116 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80020e2:	4b28      	ldr	r3, [pc, #160]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 80020e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020e6:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	430a      	orrs	r2, r1
 80020ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7fe ff97 	bl	8001020 <HAL_GetTick>
 80020f2:	0003      	movs	r3, r0
 80020f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f8:	f7fe ff92 	bl	8001020 <HAL_GetTick>
 80020fc:	0002      	movs	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e1fe      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 800210c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210e:	2202      	movs	r2, #2
 8002110:	4013      	ands	r3, r2
 8002112:	d0f1      	beq.n	80020f8 <HAL_RCC_OscConfig+0x2a4>
 8002114:	e018      	b.n	8002148 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8002118:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 800211c:	2101      	movs	r1, #1
 800211e:	438a      	bics	r2, r1
 8002120:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7fe ff7d 	bl	8001020 <HAL_GetTick>
 8002126:	0003      	movs	r3, r0
 8002128:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212c:	f7fe ff78 	bl	8001020 <HAL_GetTick>
 8002130:	0002      	movs	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e1e4      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 8002140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002142:	2202      	movs	r2, #2
 8002144:	4013      	ands	r3, r2
 8002146:	d1f1      	bne.n	800212c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2204      	movs	r2, #4
 800214e:	4013      	ands	r3, r2
 8002150:	d100      	bne.n	8002154 <HAL_RCC_OscConfig+0x300>
 8002152:	e0c7      	b.n	80022e4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002154:	231f      	movs	r3, #31
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2238      	movs	r2, #56	; 0x38
 8002162:	4013      	ands	r3, r2
 8002164:	2b20      	cmp	r3, #32
 8002166:	d11f      	bne.n	80021a8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_OscConfig+0x330>)
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	2202      	movs	r2, #2
 800216e:	4013      	ands	r3, r2
 8002170:	d100      	bne.n	8002174 <HAL_RCC_OscConfig+0x320>
 8002172:	e0b7      	b.n	80022e4 <HAL_RCC_OscConfig+0x490>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d000      	beq.n	800217e <HAL_RCC_OscConfig+0x32a>
 800217c:	e0b2      	b.n	80022e4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e1c2      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	40021000 	.word	0x40021000
 8002188:	fffeffff 	.word	0xfffeffff
 800218c:	fffbffff 	.word	0xfffbffff
 8002190:	ffff80ff 	.word	0xffff80ff
 8002194:	ffffc7ff 	.word	0xffffc7ff
 8002198:	00f42400 	.word	0x00f42400
 800219c:	20000010 	.word	0x20000010
 80021a0:	20000014 	.word	0x20000014
 80021a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021a8:	4bb5      	ldr	r3, [pc, #724]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80021aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	055b      	lsls	r3, r3, #21
 80021b0:	4013      	ands	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_OscConfig+0x364>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x366>
 80021b8:	2300      	movs	r3, #0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d011      	beq.n	80021e2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4bb0      	ldr	r3, [pc, #704]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80021c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c2:	4baf      	ldr	r3, [pc, #700]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	0549      	lsls	r1, r1, #21
 80021c8:	430a      	orrs	r2, r1
 80021ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80021cc:	4bac      	ldr	r3, [pc, #688]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80021ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	055b      	lsls	r3, r3, #21
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80021da:	231f      	movs	r3, #31
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e2:	4ba8      	ldr	r3, [pc, #672]	; (8002484 <HAL_RCC_OscConfig+0x630>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4013      	ands	r3, r2
 80021ec:	d11a      	bne.n	8002224 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ee:	4ba5      	ldr	r3, [pc, #660]	; (8002484 <HAL_RCC_OscConfig+0x630>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4ba4      	ldr	r3, [pc, #656]	; (8002484 <HAL_RCC_OscConfig+0x630>)
 80021f4:	2180      	movs	r1, #128	; 0x80
 80021f6:	0049      	lsls	r1, r1, #1
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80021fc:	f7fe ff10 	bl	8001020 <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002206:	f7fe ff0b 	bl	8001020 <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e177      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002218:	4b9a      	ldr	r3, [pc, #616]	; (8002484 <HAL_RCC_OscConfig+0x630>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4013      	ands	r3, r2
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x3e6>
 800222c:	4b94      	ldr	r3, [pc, #592]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 800222e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002230:	4b93      	ldr	r3, [pc, #588]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002232:	2101      	movs	r1, #1
 8002234:	430a      	orrs	r2, r1
 8002236:	65da      	str	r2, [r3, #92]	; 0x5c
 8002238:	e01c      	b.n	8002274 <HAL_RCC_OscConfig+0x420>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b05      	cmp	r3, #5
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x408>
 8002242:	4b8f      	ldr	r3, [pc, #572]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002244:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002246:	4b8e      	ldr	r3, [pc, #568]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002248:	2104      	movs	r1, #4
 800224a:	430a      	orrs	r2, r1
 800224c:	65da      	str	r2, [r3, #92]	; 0x5c
 800224e:	4b8c      	ldr	r3, [pc, #560]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002250:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002252:	4b8b      	ldr	r3, [pc, #556]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002254:	2101      	movs	r1, #1
 8002256:	430a      	orrs	r2, r1
 8002258:	65da      	str	r2, [r3, #92]	; 0x5c
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0x420>
 800225c:	4b88      	ldr	r3, [pc, #544]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 800225e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002260:	4b87      	ldr	r3, [pc, #540]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002262:	2101      	movs	r1, #1
 8002264:	438a      	bics	r2, r1
 8002266:	65da      	str	r2, [r3, #92]	; 0x5c
 8002268:	4b85      	ldr	r3, [pc, #532]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 800226a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800226c:	4b84      	ldr	r3, [pc, #528]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 800226e:	2104      	movs	r1, #4
 8002270:	438a      	bics	r2, r1
 8002272:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d014      	beq.n	80022a6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe fed0 	bl	8001020 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002284:	e009      	b.n	800229a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7fe fecb 	bl	8001020 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	4a7d      	ldr	r2, [pc, #500]	; (8002488 <HAL_RCC_OscConfig+0x634>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e136      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229a:	4b79      	ldr	r3, [pc, #484]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	2202      	movs	r2, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x432>
 80022a4:	e013      	b.n	80022ce <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7fe febb 	bl	8001020 <HAL_GetTick>
 80022aa:	0003      	movs	r3, r0
 80022ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ae:	e009      	b.n	80022c4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe feb6 	bl	8001020 <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	4a73      	ldr	r2, [pc, #460]	; (8002488 <HAL_RCC_OscConfig+0x634>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e121      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022c4:	4b6e      	ldr	r3, [pc, #440]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80022c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c8:	2202      	movs	r2, #2
 80022ca:	4013      	ands	r3, r2
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022ce:	231f      	movs	r3, #31
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022d8:	4b69      	ldr	r3, [pc, #420]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80022da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022dc:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80022de:	496b      	ldr	r1, [pc, #428]	; (800248c <HAL_RCC_OscConfig+0x638>)
 80022e0:	400a      	ands	r2, r1
 80022e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2220      	movs	r2, #32
 80022ea:	4013      	ands	r3, r2
 80022ec:	d039      	beq.n	8002362 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d01b      	beq.n	800232e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022f6:	4b62      	ldr	r3, [pc, #392]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b61      	ldr	r3, [pc, #388]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	03c9      	lsls	r1, r1, #15
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7fe fe8c 	bl	8001020 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800230e:	f7fe fe87 	bl	8001020 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e0f3      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002320:	4b57      	ldr	r3, [pc, #348]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	041b      	lsls	r3, r3, #16
 8002328:	4013      	ands	r3, r2
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x4ba>
 800232c:	e019      	b.n	8002362 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800232e:	4b54      	ldr	r3, [pc, #336]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	4b53      	ldr	r3, [pc, #332]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002334:	4956      	ldr	r1, [pc, #344]	; (8002490 <HAL_RCC_OscConfig+0x63c>)
 8002336:	400a      	ands	r2, r1
 8002338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233a:	f7fe fe71 	bl	8001020 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002344:	f7fe fe6c 	bl	8001020 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e0d8      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002356:	4b4a      	ldr	r3, [pc, #296]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	4013      	ands	r3, r2
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d100      	bne.n	800236c <HAL_RCC_OscConfig+0x518>
 800236a:	e0cc      	b.n	8002506 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236c:	4b44      	ldr	r3, [pc, #272]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2238      	movs	r2, #56	; 0x38
 8002372:	4013      	ands	r3, r2
 8002374:	2b10      	cmp	r3, #16
 8002376:	d100      	bne.n	800237a <HAL_RCC_OscConfig+0x526>
 8002378:	e07b      	b.n	8002472 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d156      	bne.n	8002430 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b3e      	ldr	r3, [pc, #248]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002388:	4942      	ldr	r1, [pc, #264]	; (8002494 <HAL_RCC_OscConfig+0x640>)
 800238a:	400a      	ands	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7fe fe47 	bl	8001020 <HAL_GetTick>
 8002392:	0003      	movs	r3, r0
 8002394:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7fe fe42 	bl	8001020 <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e0ae      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023aa:	4b35      	ldr	r3, [pc, #212]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	049b      	lsls	r3, r3, #18
 80023b2:	4013      	ands	r3, r2
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b6:	4b32      	ldr	r3, [pc, #200]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4a37      	ldr	r2, [pc, #220]	; (8002498 <HAL_RCC_OscConfig+0x644>)
 80023bc:	4013      	ands	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	431a      	orrs	r2, r3
 80023e4:	4b26      	ldr	r3, [pc, #152]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80023e6:	430a      	orrs	r2, r1
 80023e8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ea:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80023f0:	2180      	movs	r1, #128	; 0x80
 80023f2:	0449      	lsls	r1, r1, #17
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 80023fe:	2180      	movs	r1, #128	; 0x80
 8002400:	0549      	lsls	r1, r1, #21
 8002402:	430a      	orrs	r2, r1
 8002404:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe fe0b 	bl	8001020 <HAL_GetTick>
 800240a:	0003      	movs	r3, r0
 800240c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002410:	f7fe fe06 	bl	8001020 <HAL_GetTick>
 8002414:	0002      	movs	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e072      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	049b      	lsls	r3, r3, #18
 800242a:	4013      	ands	r3, r2
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x5bc>
 800242e:	e06a      	b.n	8002506 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002436:	4917      	ldr	r1, [pc, #92]	; (8002494 <HAL_RCC_OscConfig+0x640>)
 8002438:	400a      	ands	r2, r1
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fdf0 	bl	8001020 <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002446:	f7fe fdeb 	bl	8001020 <HAL_GetTick>
 800244a:	0002      	movs	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e057      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	049b      	lsls	r3, r3, #18
 8002460:	4013      	ands	r3, r2
 8002462:	d1f0      	bne.n	8002446 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_RCC_OscConfig+0x62c>)
 800246a:	490c      	ldr	r1, [pc, #48]	; (800249c <HAL_RCC_OscConfig+0x648>)
 800246c:	400a      	ands	r2, r1
 800246e:	60da      	str	r2, [r3, #12]
 8002470:	e049      	b.n	8002506 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d112      	bne.n	80024a0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e044      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	40021000 	.word	0x40021000
 8002484:	40007000 	.word	0x40007000
 8002488:	00001388 	.word	0x00001388
 800248c:	efffffff 	.word	0xefffffff
 8002490:	ffbfffff 	.word	0xffbfffff
 8002494:	feffffff 	.word	0xfeffffff
 8002498:	11c1808c 	.word	0x11c1808c
 800249c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_RCC_OscConfig+0x6bc>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2203      	movs	r2, #3
 80024aa:	401a      	ands	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d126      	bne.n	8002502 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2270      	movs	r2, #112	; 0x70
 80024b8:	401a      	ands	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d11f      	bne.n	8002502 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	23fe      	movs	r3, #254	; 0xfe
 80024c6:	01db      	lsls	r3, r3, #7
 80024c8:	401a      	ands	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d116      	bne.n	8002502 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	23f8      	movs	r3, #248	; 0xf8
 80024d8:	039b      	lsls	r3, r3, #14
 80024da:	401a      	ands	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d10e      	bne.n	8002502 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	23e0      	movs	r3, #224	; 0xe0
 80024e8:	051b      	lsls	r3, r3, #20
 80024ea:	401a      	ands	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	0f5b      	lsrs	r3, r3, #29
 80024f8:	075a      	lsls	r2, r3, #29
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d001      	beq.n	8002506 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	0018      	movs	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	b008      	add	sp, #32
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000

08002514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0e9      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002528:	4b76      	ldr	r3, [pc, #472]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2207      	movs	r2, #7
 800252e:	4013      	ands	r3, r2
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d91e      	bls.n	8002574 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b73      	ldr	r3, [pc, #460]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2207      	movs	r2, #7
 800253c:	4393      	bics	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	4b70      	ldr	r3, [pc, #448]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002548:	f7fe fd6a 	bl	8001020 <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002550:	e009      	b.n	8002566 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002552:	f7fe fd65 	bl	8001020 <HAL_GetTick>
 8002556:	0002      	movs	r2, r0
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	4a6a      	ldr	r2, [pc, #424]	; (8002708 <HAL_RCC_ClockConfig+0x1f4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0ca      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002566:	4b67      	ldr	r3, [pc, #412]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2207      	movs	r2, #7
 800256c:	4013      	ands	r3, r2
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d1ee      	bne.n	8002552 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2202      	movs	r2, #2
 800257a:	4013      	ands	r3, r2
 800257c:	d015      	beq.n	80025aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2204      	movs	r2, #4
 8002584:	4013      	ands	r3, r2
 8002586:	d006      	beq.n	8002596 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002588:	4b60      	ldr	r3, [pc, #384]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	4b5f      	ldr	r3, [pc, #380]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 800258e:	21e0      	movs	r1, #224	; 0xe0
 8002590:	01c9      	lsls	r1, r1, #7
 8002592:	430a      	orrs	r2, r1
 8002594:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002596:	4b5d      	ldr	r3, [pc, #372]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	4a5d      	ldr	r2, [pc, #372]	; (8002710 <HAL_RCC_ClockConfig+0x1fc>)
 800259c:	4013      	ands	r3, r2
 800259e:	0019      	movs	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	4b59      	ldr	r3, [pc, #356]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2201      	movs	r2, #1
 80025b0:	4013      	ands	r3, r2
 80025b2:	d057      	beq.n	8002664 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025bc:	4b53      	ldr	r3, [pc, #332]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	029b      	lsls	r3, r3, #10
 80025c4:	4013      	ands	r3, r2
 80025c6:	d12b      	bne.n	8002620 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e097      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d4:	4b4d      	ldr	r3, [pc, #308]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	049b      	lsls	r3, r3, #18
 80025dc:	4013      	ands	r3, r2
 80025de:	d11f      	bne.n	8002620 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e08b      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ec:	4b47      	ldr	r3, [pc, #284]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4013      	ands	r3, r2
 80025f6:	d113      	bne.n	8002620 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e07f      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d106      	bne.n	8002612 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002604:	4b41      	ldr	r3, [pc, #260]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 8002606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002608:	2202      	movs	r2, #2
 800260a:	4013      	ands	r3, r2
 800260c:	d108      	bne.n	8002620 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e074      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002612:	4b3e      	ldr	r3, [pc, #248]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	2202      	movs	r2, #2
 8002618:	4013      	ands	r3, r2
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e06d      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002620:	4b3a      	ldr	r3, [pc, #232]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2207      	movs	r2, #7
 8002626:	4393      	bics	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	4b37      	ldr	r3, [pc, #220]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 8002630:	430a      	orrs	r2, r1
 8002632:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002634:	f7fe fcf4 	bl	8001020 <HAL_GetTick>
 8002638:	0003      	movs	r3, r0
 800263a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263c:	e009      	b.n	8002652 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263e:	f7fe fcef 	bl	8001020 <HAL_GetTick>
 8002642:	0002      	movs	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	4a2f      	ldr	r2, [pc, #188]	; (8002708 <HAL_RCC_ClockConfig+0x1f4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e054      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b2e      	ldr	r3, [pc, #184]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2238      	movs	r2, #56	; 0x38
 8002658:	401a      	ands	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	429a      	cmp	r2, r3
 8002662:	d1ec      	bne.n	800263e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2207      	movs	r2, #7
 800266a:	4013      	ands	r3, r2
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d21e      	bcs.n	80026b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2207      	movs	r2, #7
 8002678:	4393      	bics	r3, r2
 800267a:	0019      	movs	r1, r3
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002684:	f7fe fccc 	bl	8001020 <HAL_GetTick>
 8002688:	0003      	movs	r3, r0
 800268a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800268c:	e009      	b.n	80026a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268e:	f7fe fcc7 	bl	8001020 <HAL_GetTick>
 8002692:	0002      	movs	r2, r0
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <HAL_RCC_ClockConfig+0x1f4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e02c      	b.n	80026fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_RCC_ClockConfig+0x1f0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2207      	movs	r2, #7
 80026a8:	4013      	ands	r3, r2
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d1ee      	bne.n	800268e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2204      	movs	r2, #4
 80026b6:	4013      	ands	r3, r2
 80026b8:	d009      	beq.n	80026ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4a15      	ldr	r2, [pc, #84]	; (8002714 <HAL_RCC_ClockConfig+0x200>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	0019      	movs	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 80026ca:	430a      	orrs	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80026ce:	f000 f829 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026d2:	0001      	movs	r1, r0
 80026d4:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_RCC_ClockConfig+0x1f8>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	220f      	movs	r2, #15
 80026dc:	401a      	ands	r2, r3
 80026de:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <HAL_RCC_ClockConfig+0x204>)
 80026e0:	0092      	lsls	r2, r2, #2
 80026e2:	58d3      	ldr	r3, [r2, r3]
 80026e4:	221f      	movs	r2, #31
 80026e6:	4013      	ands	r3, r2
 80026e8:	000a      	movs	r2, r1
 80026ea:	40da      	lsrs	r2, r3
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_ClockConfig+0x208>)
 80026ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_ClockConfig+0x20c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7fe fc37 	bl	8000f68 <HAL_InitTick>
 80026fa:	0003      	movs	r3, r0
}
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	b004      	add	sp, #16
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40022000 	.word	0x40022000
 8002708:	00001388 	.word	0x00001388
 800270c:	40021000 	.word	0x40021000
 8002710:	fffff0ff 	.word	0xfffff0ff
 8002714:	ffff8fff 	.word	0xffff8fff
 8002718:	08003aa0 	.word	0x08003aa0
 800271c:	20000010 	.word	0x20000010
 8002720:	20000014 	.word	0x20000014

08002724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800272a:	4b3c      	ldr	r3, [pc, #240]	; (800281c <HAL_RCC_GetSysClockFreq+0xf8>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2238      	movs	r2, #56	; 0x38
 8002730:	4013      	ands	r3, r2
 8002732:	d10f      	bne.n	8002754 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002734:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0adb      	lsrs	r3, r3, #11
 800273a:	2207      	movs	r2, #7
 800273c:	4013      	ands	r3, r2
 800273e:	2201      	movs	r2, #1
 8002740:	409a      	lsls	r2, r3
 8002742:	0013      	movs	r3, r2
 8002744:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002746:	6839      	ldr	r1, [r7, #0]
 8002748:	4835      	ldr	r0, [pc, #212]	; (8002820 <HAL_RCC_GetSysClockFreq+0xfc>)
 800274a:	f7fd fcdb 	bl	8000104 <__udivsi3>
 800274e:	0003      	movs	r3, r0
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	e05d      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002754:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2238      	movs	r2, #56	; 0x38
 800275a:	4013      	ands	r3, r2
 800275c:	2b08      	cmp	r3, #8
 800275e:	d102      	bne.n	8002766 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002760:	4b30      	ldr	r3, [pc, #192]	; (8002824 <HAL_RCC_GetSysClockFreq+0x100>)
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	e054      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002766:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2238      	movs	r2, #56	; 0x38
 800276c:	4013      	ands	r3, r2
 800276e:	2b10      	cmp	r3, #16
 8002770:	d138      	bne.n	80027e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002772:	4b2a      	ldr	r3, [pc, #168]	; (800281c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2203      	movs	r2, #3
 8002778:	4013      	ands	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_RCC_GetSysClockFreq+0xf8>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	2207      	movs	r2, #7
 8002784:	4013      	ands	r3, r2
 8002786:	3301      	adds	r3, #1
 8002788:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d10d      	bne.n	80027ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	4824      	ldr	r0, [pc, #144]	; (8002824 <HAL_RCC_GetSysClockFreq+0x100>)
 8002794:	f7fd fcb6 	bl	8000104 <__udivsi3>
 8002798:	0003      	movs	r3, r0
 800279a:	0019      	movs	r1, r3
 800279c:	4b1f      	ldr	r3, [pc, #124]	; (800281c <HAL_RCC_GetSysClockFreq+0xf8>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	227f      	movs	r2, #127	; 0x7f
 80027a4:	4013      	ands	r3, r2
 80027a6:	434b      	muls	r3, r1
 80027a8:	617b      	str	r3, [r7, #20]
        break;
 80027aa:	e00d      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	481c      	ldr	r0, [pc, #112]	; (8002820 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027b0:	f7fd fca8 	bl	8000104 <__udivsi3>
 80027b4:	0003      	movs	r3, r0
 80027b6:	0019      	movs	r1, r3
 80027b8:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	227f      	movs	r2, #127	; 0x7f
 80027c0:	4013      	ands	r3, r2
 80027c2:	434b      	muls	r3, r1
 80027c4:	617b      	str	r3, [r7, #20]
        break;
 80027c6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0f5b      	lsrs	r3, r3, #29
 80027ce:	2207      	movs	r2, #7
 80027d0:	4013      	ands	r3, r2
 80027d2:	3301      	adds	r3, #1
 80027d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	6978      	ldr	r0, [r7, #20]
 80027da:	f7fd fc93 	bl	8000104 <__udivsi3>
 80027de:	0003      	movs	r3, r0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	e015      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80027e4:	4b0d      	ldr	r3, [pc, #52]	; (800281c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2238      	movs	r2, #56	; 0x38
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d103      	bne.n	80027f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e00b      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_RCC_GetSysClockFreq+0xf8>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2238      	movs	r2, #56	; 0x38
 80027fe:	4013      	ands	r3, r2
 8002800:	2b18      	cmp	r3, #24
 8002802:	d103      	bne.n	800280c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002804:	23fa      	movs	r3, #250	; 0xfa
 8002806:	01db      	lsls	r3, r3, #7
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	e001      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002810:	693b      	ldr	r3, [r7, #16]
}
 8002812:	0018      	movs	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	b006      	add	sp, #24
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	40021000 	.word	0x40021000
 8002820:	00f42400 	.word	0x00f42400
 8002824:	007a1200 	.word	0x007a1200

08002828 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800282c:	4b02      	ldr	r3, [pc, #8]	; (8002838 <HAL_RCC_GetHCLKFreq+0x10>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	20000010 	.word	0x20000010

0800283c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800283c:	b5b0      	push	{r4, r5, r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002840:	f7ff fff2 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002844:	0004      	movs	r4, r0
 8002846:	f7ff faf9 	bl	8001e3c <LL_RCC_GetAPB1Prescaler>
 800284a:	0003      	movs	r3, r0
 800284c:	0b1a      	lsrs	r2, r3, #12
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002850:	0092      	lsls	r2, r2, #2
 8002852:	58d3      	ldr	r3, [r2, r3]
 8002854:	221f      	movs	r2, #31
 8002856:	4013      	ands	r3, r2
 8002858:	40dc      	lsrs	r4, r3
 800285a:	0023      	movs	r3, r4
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	bdb0      	pop	{r4, r5, r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	08003ae0 	.word	0x08003ae0

08002868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002870:	2313      	movs	r3, #19
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002878:	2312      	movs	r3, #18
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	029b      	lsls	r3, r3, #10
 8002888:	4013      	ands	r3, r2
 800288a:	d100      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800288c:	e0ad      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800288e:	2011      	movs	r0, #17
 8002890:	183b      	adds	r3, r7, r0
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002896:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	055b      	lsls	r3, r3, #21
 800289e:	4013      	ands	r3, r2
 80028a0:	d110      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	4b44      	ldr	r3, [pc, #272]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a6:	4b43      	ldr	r3, [pc, #268]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	0549      	lsls	r1, r1, #21
 80028ac:	430a      	orrs	r2, r1
 80028ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80028b0:	4b40      	ldr	r3, [pc, #256]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80028b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	055b      	lsls	r3, r3, #21
 80028b8:	4013      	ands	r3, r2
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028be:	183b      	adds	r3, r7, r0
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c4:	4b3c      	ldr	r3, [pc, #240]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80028ca:	2180      	movs	r1, #128	; 0x80
 80028cc:	0049      	lsls	r1, r1, #1
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028d2:	f7fe fba5 	bl	8001020 <HAL_GetTick>
 80028d6:	0003      	movs	r3, r0
 80028d8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028da:	e00b      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028dc:	f7fe fba0 	bl	8001020 <HAL_GetTick>
 80028e0:	0002      	movs	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d904      	bls.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80028ea:	2313      	movs	r3, #19
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	2203      	movs	r2, #3
 80028f0:	701a      	strb	r2, [r3, #0]
        break;
 80028f2:	e005      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028f4:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4013      	ands	r3, r2
 80028fe:	d0ed      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002900:	2313      	movs	r3, #19
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d15e      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800290a:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800290c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800290e:	23c0      	movs	r3, #192	; 0xc0
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4013      	ands	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d019      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	429a      	cmp	r2, r3
 8002924:	d014      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002926:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	4a24      	ldr	r2, [pc, #144]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800292c:	4013      	ands	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002930:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002932:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002936:	2180      	movs	r1, #128	; 0x80
 8002938:	0249      	lsls	r1, r1, #9
 800293a:	430a      	orrs	r2, r1
 800293c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002940:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002944:	491e      	ldr	r1, [pc, #120]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002946:	400a      	ands	r2, r1
 8002948:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2201      	movs	r2, #1
 8002954:	4013      	ands	r3, r2
 8002956:	d016      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fb62 	bl	8001020 <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002960:	e00c      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7fe fb5d 	bl	8001020 <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d904      	bls.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002972:	2313      	movs	r3, #19
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	2203      	movs	r2, #3
 8002978:	701a      	strb	r2, [r3, #0]
            break;
 800297a:	e004      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800297c:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	2202      	movs	r2, #2
 8002982:	4013      	ands	r3, r2
 8002984:	d0ed      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002986:	2313      	movs	r3, #19
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	4a09      	ldr	r2, [pc, #36]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002996:	4013      	ands	r3, r2
 8002998:	0019      	movs	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80029a0:	430a      	orrs	r2, r1
 80029a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80029a4:	e016      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029a6:	2312      	movs	r3, #18
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	2213      	movs	r2, #19
 80029ac:	18ba      	adds	r2, r7, r2
 80029ae:	7812      	ldrb	r2, [r2, #0]
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	e00f      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40007000 	.word	0x40007000
 80029bc:	fffffcff 	.word	0xfffffcff
 80029c0:	fffeffff 	.word	0xfffeffff
 80029c4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c8:	2312      	movs	r3, #18
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	2213      	movs	r2, #19
 80029ce:	18ba      	adds	r2, r7, r2
 80029d0:	7812      	ldrb	r2, [r2, #0]
 80029d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029d4:	2311      	movs	r3, #17
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d105      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029de:	4bb6      	ldr	r3, [pc, #728]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029e2:	4bb5      	ldr	r3, [pc, #724]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029e4:	49b5      	ldr	r1, [pc, #724]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80029e6:	400a      	ands	r2, r1
 80029e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2201      	movs	r2, #1
 80029f0:	4013      	ands	r3, r2
 80029f2:	d009      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029f4:	4bb0      	ldr	r3, [pc, #704]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	2203      	movs	r2, #3
 80029fa:	4393      	bics	r3, r2
 80029fc:	0019      	movs	r1, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	4bad      	ldr	r3, [pc, #692]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a04:	430a      	orrs	r2, r1
 8002a06:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d009      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a12:	4ba9      	ldr	r3, [pc, #676]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	220c      	movs	r2, #12
 8002a18:	4393      	bics	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	4ba5      	ldr	r3, [pc, #660]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a22:	430a      	orrs	r2, r1
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d009      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a30:	4ba1      	ldr	r3, [pc, #644]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	2230      	movs	r2, #48	; 0x30
 8002a36:	4393      	bics	r3, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	4b9e      	ldr	r3, [pc, #632]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a40:	430a      	orrs	r2, r1
 8002a42:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2210      	movs	r2, #16
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a4e:	4b9a      	ldr	r3, [pc, #616]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	4a9b      	ldr	r2, [pc, #620]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	4b96      	ldr	r3, [pc, #600]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	015b      	lsls	r3, r3, #5
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002a6e:	4b92      	ldr	r3, [pc, #584]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	4a94      	ldr	r2, [pc, #592]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	0019      	movs	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	4b8e      	ldr	r3, [pc, #568]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a8e:	4b8a      	ldr	r3, [pc, #552]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a92:	4a8d      	ldr	r2, [pc, #564]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	0019      	movs	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a9c:	4b86      	ldr	r3, [pc, #536]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aae:	4b82      	ldr	r3, [pc, #520]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab2:	4a86      	ldr	r2, [pc, #536]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002abc:	4b7e      	ldr	r3, [pc, #504]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002acc:	4b7a      	ldr	r3, [pc, #488]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad0:	4a7f      	ldr	r2, [pc, #508]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	4b77      	ldr	r3, [pc, #476]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002adc:	430a      	orrs	r2, r1
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2240      	movs	r2, #64	; 0x40
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d009      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aea:	4b73      	ldr	r3, [pc, #460]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	4a79      	ldr	r2, [pc, #484]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	0019      	movs	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	4b6f      	ldr	r3, [pc, #444]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002afa:	430a      	orrs	r2, r1
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	01db      	lsls	r3, r3, #7
 8002b06:	4013      	ands	r3, r2
 8002b08:	d015      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b0a:	4b6b      	ldr	r3, [pc, #428]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	0899      	lsrs	r1, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b16:	4b68      	ldr	r3, [pc, #416]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	05db      	lsls	r3, r3, #23
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d106      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b28:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	4b62      	ldr	r3, [pc, #392]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	0249      	lsls	r1, r1, #9
 8002b32:	430a      	orrs	r2, r1
 8002b34:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	031b      	lsls	r3, r3, #12
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b42:	4b5d      	ldr	r3, [pc, #372]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b46:	2240      	movs	r2, #64	; 0x40
 8002b48:	4393      	bics	r3, r2
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b50:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b52:	430a      	orrs	r2, r1
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	039b      	lsls	r3, r3, #14
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d016      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b62:	4b55      	ldr	r3, [pc, #340]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	4a5c      	ldr	r2, [pc, #368]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b70:	4b51      	ldr	r3, [pc, #324]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b72:	430a      	orrs	r2, r1
 8002b74:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	03db      	lsls	r3, r3, #15
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d106      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002b82:	4b4d      	ldr	r3, [pc, #308]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	4b4c      	ldr	r3, [pc, #304]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b88:	2180      	movs	r1, #128	; 0x80
 8002b8a:	0449      	lsls	r1, r1, #17
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	03db      	lsls	r3, r3, #15
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d016      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b9c:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	4a4e      	ldr	r2, [pc, #312]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002baa:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bac:	430a      	orrs	r2, r1
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	045b      	lsls	r3, r3, #17
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d106      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002bbc:	4b3e      	ldr	r3, [pc, #248]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	0449      	lsls	r1, r1, #17
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d014      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	2203      	movs	r2, #3
 8002bdc:	4393      	bics	r3, r2
 8002bde:	0019      	movs	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1a      	ldr	r2, [r3, #32]
 8002be4:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002be6:	430a      	orrs	r2, r1
 8002be8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d106      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bf2:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	0249      	lsls	r1, r1, #9
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	019b      	lsls	r3, r3, #6
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d014      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002c0c:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	220c      	movs	r2, #12
 8002c12:	4393      	bics	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c1a:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d106      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c2e:	2180      	movs	r1, #128	; 0x80
 8002c30:	0249      	lsls	r1, r1, #9
 8002c32:	430a      	orrs	r2, r1
 8002c34:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	045b      	lsls	r3, r3, #17
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d016      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	4a22      	ldr	r2, [pc, #136]	; (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c52:	430a      	orrs	r2, r1
 8002c54:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	019b      	lsls	r3, r3, #6
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d106      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c68:	2180      	movs	r1, #128	; 0x80
 8002c6a:	0449      	lsls	r1, r1, #17
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	049b      	lsls	r3, r3, #18
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d016      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	4a10      	ldr	r2, [pc, #64]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d106      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ca2:	2180      	movs	r1, #128	; 0x80
 8002ca4:	0449      	lsls	r1, r1, #17
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002caa:	2312      	movs	r3, #18
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	781b      	ldrb	r3, [r3, #0]
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b006      	add	sp, #24
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	efffffff 	.word	0xefffffff
 8002cc0:	fffff3ff 	.word	0xfffff3ff
 8002cc4:	fffffcff 	.word	0xfffffcff
 8002cc8:	fff3ffff 	.word	0xfff3ffff
 8002ccc:	ffcfffff 	.word	0xffcfffff
 8002cd0:	ffffcfff 	.word	0xffffcfff
 8002cd4:	ffff3fff 	.word	0xffff3fff
 8002cd8:	ffbfffff 	.word	0xffbfffff
 8002cdc:	feffffff 	.word	0xfeffffff

08002ce0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e046      	b.n	8002d80 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2288      	movs	r2, #136	; 0x88
 8002cf6:	589b      	ldr	r3, [r3, r2]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d107      	bne.n	8002d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2284      	movs	r2, #132	; 0x84
 8002d00:	2100      	movs	r1, #0
 8002d02:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	0018      	movs	r0, r3
 8002d08:	f7fe f868 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2288      	movs	r2, #136	; 0x88
 8002d10:	2124      	movs	r1, #36	; 0x24
 8002d12:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2101      	movs	r1, #1
 8002d20:	438a      	bics	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 f830 	bl	8002d8c <UART_SetConfig>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e024      	b.n	8002d80 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 fb79 	bl	8003438 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	490d      	ldr	r1, [pc, #52]	; (8002d88 <HAL_UART_Init+0xa8>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	212a      	movs	r1, #42	; 0x2a
 8002d62:	438a      	bics	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	430a      	orrs	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 fc11 	bl	80035a0 <UART_CheckIdleState>
 8002d7e:	0003      	movs	r3, r0
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b002      	add	sp, #8
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	ffffb7ff 	.word	0xffffb7ff

08002d8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d8c:	b5b0      	push	{r4, r5, r7, lr}
 8002d8e:	b090      	sub	sp, #64	; 0x40
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d94:	231a      	movs	r3, #26
 8002d96:	2220      	movs	r2, #32
 8002d98:	189b      	adds	r3, r3, r2
 8002d9a:	19db      	adds	r3, r3, r7
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4ac1      	ldr	r2, [pc, #772]	; (80030c4 <UART_SetConfig+0x338>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4abc      	ldr	r2, [pc, #752]	; (80030c8 <UART_SetConfig+0x33c>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	0018      	movs	r0, r3
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	68d9      	ldr	r1, [r3, #12]
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	0003      	movs	r3, r0
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4ab6      	ldr	r2, [pc, #728]	; (80030cc <UART_SetConfig+0x340>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d009      	beq.n	8002e0c <UART_SetConfig+0x80>
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4ab4      	ldr	r2, [pc, #720]	; (80030d0 <UART_SetConfig+0x344>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d004      	beq.n	8002e0c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4ab0      	ldr	r2, [pc, #704]	; (80030d4 <UART_SetConfig+0x348>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	0019      	movs	r1, r3
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	220f      	movs	r2, #15
 8002e2a:	4393      	bics	r3, r2
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	0003      	movs	r3, r0
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4aa5      	ldr	r2, [pc, #660]	; (80030d8 <UART_SetConfig+0x34c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d131      	bne.n	8002eaa <UART_SetConfig+0x11e>
 8002e46:	4ba5      	ldr	r3, [pc, #660]	; (80030dc <UART_SetConfig+0x350>)
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d01d      	beq.n	8002e8e <UART_SetConfig+0x102>
 8002e52:	d823      	bhi.n	8002e9c <UART_SetConfig+0x110>
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d00c      	beq.n	8002e72 <UART_SetConfig+0xe6>
 8002e58:	d820      	bhi.n	8002e9c <UART_SetConfig+0x110>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <UART_SetConfig+0xd8>
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d00e      	beq.n	8002e80 <UART_SetConfig+0xf4>
 8002e62:	e01b      	b.n	8002e9c <UART_SetConfig+0x110>
 8002e64:	231b      	movs	r3, #27
 8002e66:	2220      	movs	r2, #32
 8002e68:	189b      	adds	r3, r3, r2
 8002e6a:	19db      	adds	r3, r3, r7
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	e154      	b.n	800311c <UART_SetConfig+0x390>
 8002e72:	231b      	movs	r3, #27
 8002e74:	2220      	movs	r2, #32
 8002e76:	189b      	adds	r3, r3, r2
 8002e78:	19db      	adds	r3, r3, r7
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	e14d      	b.n	800311c <UART_SetConfig+0x390>
 8002e80:	231b      	movs	r3, #27
 8002e82:	2220      	movs	r2, #32
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	19db      	adds	r3, r3, r7
 8002e88:	2204      	movs	r2, #4
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e146      	b.n	800311c <UART_SetConfig+0x390>
 8002e8e:	231b      	movs	r3, #27
 8002e90:	2220      	movs	r2, #32
 8002e92:	189b      	adds	r3, r3, r2
 8002e94:	19db      	adds	r3, r3, r7
 8002e96:	2208      	movs	r2, #8
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e13f      	b.n	800311c <UART_SetConfig+0x390>
 8002e9c:	231b      	movs	r3, #27
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	189b      	adds	r3, r3, r2
 8002ea2:	19db      	adds	r3, r3, r7
 8002ea4:	2210      	movs	r2, #16
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e138      	b.n	800311c <UART_SetConfig+0x390>
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a8c      	ldr	r2, [pc, #560]	; (80030e0 <UART_SetConfig+0x354>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d131      	bne.n	8002f18 <UART_SetConfig+0x18c>
 8002eb4:	4b89      	ldr	r3, [pc, #548]	; (80030dc <UART_SetConfig+0x350>)
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	220c      	movs	r2, #12
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d01d      	beq.n	8002efc <UART_SetConfig+0x170>
 8002ec0:	d823      	bhi.n	8002f0a <UART_SetConfig+0x17e>
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d00c      	beq.n	8002ee0 <UART_SetConfig+0x154>
 8002ec6:	d820      	bhi.n	8002f0a <UART_SetConfig+0x17e>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <UART_SetConfig+0x146>
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d00e      	beq.n	8002eee <UART_SetConfig+0x162>
 8002ed0:	e01b      	b.n	8002f0a <UART_SetConfig+0x17e>
 8002ed2:	231b      	movs	r3, #27
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	189b      	adds	r3, r3, r2
 8002ed8:	19db      	adds	r3, r3, r7
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	e11d      	b.n	800311c <UART_SetConfig+0x390>
 8002ee0:	231b      	movs	r3, #27
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	189b      	adds	r3, r3, r2
 8002ee6:	19db      	adds	r3, r3, r7
 8002ee8:	2202      	movs	r2, #2
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e116      	b.n	800311c <UART_SetConfig+0x390>
 8002eee:	231b      	movs	r3, #27
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	189b      	adds	r3, r3, r2
 8002ef4:	19db      	adds	r3, r3, r7
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	e10f      	b.n	800311c <UART_SetConfig+0x390>
 8002efc:	231b      	movs	r3, #27
 8002efe:	2220      	movs	r2, #32
 8002f00:	189b      	adds	r3, r3, r2
 8002f02:	19db      	adds	r3, r3, r7
 8002f04:	2208      	movs	r2, #8
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e108      	b.n	800311c <UART_SetConfig+0x390>
 8002f0a:	231b      	movs	r3, #27
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	189b      	adds	r3, r3, r2
 8002f10:	19db      	adds	r3, r3, r7
 8002f12:	2210      	movs	r2, #16
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	e101      	b.n	800311c <UART_SetConfig+0x390>
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a71      	ldr	r2, [pc, #452]	; (80030e4 <UART_SetConfig+0x358>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d131      	bne.n	8002f86 <UART_SetConfig+0x1fa>
 8002f22:	4b6e      	ldr	r3, [pc, #440]	; (80030dc <UART_SetConfig+0x350>)
 8002f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f26:	2230      	movs	r2, #48	; 0x30
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b30      	cmp	r3, #48	; 0x30
 8002f2c:	d01d      	beq.n	8002f6a <UART_SetConfig+0x1de>
 8002f2e:	d823      	bhi.n	8002f78 <UART_SetConfig+0x1ec>
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d00c      	beq.n	8002f4e <UART_SetConfig+0x1c2>
 8002f34:	d820      	bhi.n	8002f78 <UART_SetConfig+0x1ec>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <UART_SetConfig+0x1b4>
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d00e      	beq.n	8002f5c <UART_SetConfig+0x1d0>
 8002f3e:	e01b      	b.n	8002f78 <UART_SetConfig+0x1ec>
 8002f40:	231b      	movs	r3, #27
 8002f42:	2220      	movs	r2, #32
 8002f44:	189b      	adds	r3, r3, r2
 8002f46:	19db      	adds	r3, r3, r7
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	e0e6      	b.n	800311c <UART_SetConfig+0x390>
 8002f4e:	231b      	movs	r3, #27
 8002f50:	2220      	movs	r2, #32
 8002f52:	189b      	adds	r3, r3, r2
 8002f54:	19db      	adds	r3, r3, r7
 8002f56:	2202      	movs	r2, #2
 8002f58:	701a      	strb	r2, [r3, #0]
 8002f5a:	e0df      	b.n	800311c <UART_SetConfig+0x390>
 8002f5c:	231b      	movs	r3, #27
 8002f5e:	2220      	movs	r2, #32
 8002f60:	189b      	adds	r3, r3, r2
 8002f62:	19db      	adds	r3, r3, r7
 8002f64:	2204      	movs	r2, #4
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	e0d8      	b.n	800311c <UART_SetConfig+0x390>
 8002f6a:	231b      	movs	r3, #27
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	189b      	adds	r3, r3, r2
 8002f70:	19db      	adds	r3, r3, r7
 8002f72:	2208      	movs	r2, #8
 8002f74:	701a      	strb	r2, [r3, #0]
 8002f76:	e0d1      	b.n	800311c <UART_SetConfig+0x390>
 8002f78:	231b      	movs	r3, #27
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	189b      	adds	r3, r3, r2
 8002f7e:	19db      	adds	r3, r3, r7
 8002f80:	2210      	movs	r2, #16
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	e0ca      	b.n	800311c <UART_SetConfig+0x390>
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a57      	ldr	r2, [pc, #348]	; (80030e8 <UART_SetConfig+0x35c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d106      	bne.n	8002f9e <UART_SetConfig+0x212>
 8002f90:	231b      	movs	r3, #27
 8002f92:	2220      	movs	r2, #32
 8002f94:	189b      	adds	r3, r3, r2
 8002f96:	19db      	adds	r3, r3, r7
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e0be      	b.n	800311c <UART_SetConfig+0x390>
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a52      	ldr	r2, [pc, #328]	; (80030ec <UART_SetConfig+0x360>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d106      	bne.n	8002fb6 <UART_SetConfig+0x22a>
 8002fa8:	231b      	movs	r3, #27
 8002faa:	2220      	movs	r2, #32
 8002fac:	189b      	adds	r3, r3, r2
 8002fae:	19db      	adds	r3, r3, r7
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e0b2      	b.n	800311c <UART_SetConfig+0x390>
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a4d      	ldr	r2, [pc, #308]	; (80030f0 <UART_SetConfig+0x364>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d106      	bne.n	8002fce <UART_SetConfig+0x242>
 8002fc0:	231b      	movs	r3, #27
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	189b      	adds	r3, r3, r2
 8002fc6:	19db      	adds	r3, r3, r7
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	e0a6      	b.n	800311c <UART_SetConfig+0x390>
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a3e      	ldr	r2, [pc, #248]	; (80030cc <UART_SetConfig+0x340>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d13e      	bne.n	8003056 <UART_SetConfig+0x2ca>
 8002fd8:	4b40      	ldr	r3, [pc, #256]	; (80030dc <UART_SetConfig+0x350>)
 8002fda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fdc:	23c0      	movs	r3, #192	; 0xc0
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	22c0      	movs	r2, #192	; 0xc0
 8002fe4:	0112      	lsls	r2, r2, #4
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d027      	beq.n	800303a <UART_SetConfig+0x2ae>
 8002fea:	22c0      	movs	r2, #192	; 0xc0
 8002fec:	0112      	lsls	r2, r2, #4
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d82a      	bhi.n	8003048 <UART_SetConfig+0x2bc>
 8002ff2:	2280      	movs	r2, #128	; 0x80
 8002ff4:	0112      	lsls	r2, r2, #4
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d011      	beq.n	800301e <UART_SetConfig+0x292>
 8002ffa:	2280      	movs	r2, #128	; 0x80
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d822      	bhi.n	8003048 <UART_SetConfig+0x2bc>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d004      	beq.n	8003010 <UART_SetConfig+0x284>
 8003006:	2280      	movs	r2, #128	; 0x80
 8003008:	00d2      	lsls	r2, r2, #3
 800300a:	4293      	cmp	r3, r2
 800300c:	d00e      	beq.n	800302c <UART_SetConfig+0x2a0>
 800300e:	e01b      	b.n	8003048 <UART_SetConfig+0x2bc>
 8003010:	231b      	movs	r3, #27
 8003012:	2220      	movs	r2, #32
 8003014:	189b      	adds	r3, r3, r2
 8003016:	19db      	adds	r3, r3, r7
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e07e      	b.n	800311c <UART_SetConfig+0x390>
 800301e:	231b      	movs	r3, #27
 8003020:	2220      	movs	r2, #32
 8003022:	189b      	adds	r3, r3, r2
 8003024:	19db      	adds	r3, r3, r7
 8003026:	2202      	movs	r2, #2
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e077      	b.n	800311c <UART_SetConfig+0x390>
 800302c:	231b      	movs	r3, #27
 800302e:	2220      	movs	r2, #32
 8003030:	189b      	adds	r3, r3, r2
 8003032:	19db      	adds	r3, r3, r7
 8003034:	2204      	movs	r2, #4
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	e070      	b.n	800311c <UART_SetConfig+0x390>
 800303a:	231b      	movs	r3, #27
 800303c:	2220      	movs	r2, #32
 800303e:	189b      	adds	r3, r3, r2
 8003040:	19db      	adds	r3, r3, r7
 8003042:	2208      	movs	r2, #8
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e069      	b.n	800311c <UART_SetConfig+0x390>
 8003048:	231b      	movs	r3, #27
 800304a:	2220      	movs	r2, #32
 800304c:	189b      	adds	r3, r3, r2
 800304e:	19db      	adds	r3, r3, r7
 8003050:	2210      	movs	r2, #16
 8003052:	701a      	strb	r2, [r3, #0]
 8003054:	e062      	b.n	800311c <UART_SetConfig+0x390>
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <UART_SetConfig+0x344>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d157      	bne.n	8003110 <UART_SetConfig+0x384>
 8003060:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <UART_SetConfig+0x350>)
 8003062:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003064:	23c0      	movs	r3, #192	; 0xc0
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4013      	ands	r3, r2
 800306a:	22c0      	movs	r2, #192	; 0xc0
 800306c:	0092      	lsls	r2, r2, #2
 800306e:	4293      	cmp	r3, r2
 8003070:	d040      	beq.n	80030f4 <UART_SetConfig+0x368>
 8003072:	22c0      	movs	r2, #192	; 0xc0
 8003074:	0092      	lsls	r2, r2, #2
 8003076:	4293      	cmp	r3, r2
 8003078:	d843      	bhi.n	8003102 <UART_SetConfig+0x376>
 800307a:	2280      	movs	r2, #128	; 0x80
 800307c:	0092      	lsls	r2, r2, #2
 800307e:	4293      	cmp	r3, r2
 8003080:	d011      	beq.n	80030a6 <UART_SetConfig+0x31a>
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	0092      	lsls	r2, r2, #2
 8003086:	4293      	cmp	r3, r2
 8003088:	d83b      	bhi.n	8003102 <UART_SetConfig+0x376>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d004      	beq.n	8003098 <UART_SetConfig+0x30c>
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	0052      	lsls	r2, r2, #1
 8003092:	4293      	cmp	r3, r2
 8003094:	d00e      	beq.n	80030b4 <UART_SetConfig+0x328>
 8003096:	e034      	b.n	8003102 <UART_SetConfig+0x376>
 8003098:	231b      	movs	r3, #27
 800309a:	2220      	movs	r2, #32
 800309c:	189b      	adds	r3, r3, r2
 800309e:	19db      	adds	r3, r3, r7
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e03a      	b.n	800311c <UART_SetConfig+0x390>
 80030a6:	231b      	movs	r3, #27
 80030a8:	2220      	movs	r2, #32
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	19db      	adds	r3, r3, r7
 80030ae:	2202      	movs	r2, #2
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	e033      	b.n	800311c <UART_SetConfig+0x390>
 80030b4:	231b      	movs	r3, #27
 80030b6:	2220      	movs	r2, #32
 80030b8:	189b      	adds	r3, r3, r2
 80030ba:	19db      	adds	r3, r3, r7
 80030bc:	2204      	movs	r2, #4
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	e02c      	b.n	800311c <UART_SetConfig+0x390>
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	cfff69f3 	.word	0xcfff69f3
 80030c8:	ffffcfff 	.word	0xffffcfff
 80030cc:	40008000 	.word	0x40008000
 80030d0:	40008400 	.word	0x40008400
 80030d4:	11fff4ff 	.word	0x11fff4ff
 80030d8:	40013800 	.word	0x40013800
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40004400 	.word	0x40004400
 80030e4:	40004800 	.word	0x40004800
 80030e8:	40004c00 	.word	0x40004c00
 80030ec:	40005000 	.word	0x40005000
 80030f0:	40013c00 	.word	0x40013c00
 80030f4:	231b      	movs	r3, #27
 80030f6:	2220      	movs	r2, #32
 80030f8:	189b      	adds	r3, r3, r2
 80030fa:	19db      	adds	r3, r3, r7
 80030fc:	2208      	movs	r2, #8
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e00c      	b.n	800311c <UART_SetConfig+0x390>
 8003102:	231b      	movs	r3, #27
 8003104:	2220      	movs	r2, #32
 8003106:	189b      	adds	r3, r3, r2
 8003108:	19db      	adds	r3, r3, r7
 800310a:	2210      	movs	r2, #16
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	e005      	b.n	800311c <UART_SetConfig+0x390>
 8003110:	231b      	movs	r3, #27
 8003112:	2220      	movs	r2, #32
 8003114:	189b      	adds	r3, r3, r2
 8003116:	19db      	adds	r3, r3, r7
 8003118:	2210      	movs	r2, #16
 800311a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800311c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4ac1      	ldr	r2, [pc, #772]	; (8003428 <UART_SetConfig+0x69c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d005      	beq.n	8003132 <UART_SetConfig+0x3a6>
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4ac0      	ldr	r2, [pc, #768]	; (800342c <UART_SetConfig+0x6a0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d000      	beq.n	8003132 <UART_SetConfig+0x3a6>
 8003130:	e093      	b.n	800325a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003132:	231b      	movs	r3, #27
 8003134:	2220      	movs	r2, #32
 8003136:	189b      	adds	r3, r3, r2
 8003138:	19db      	adds	r3, r3, r7
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d015      	beq.n	800316c <UART_SetConfig+0x3e0>
 8003140:	dc18      	bgt.n	8003174 <UART_SetConfig+0x3e8>
 8003142:	2b04      	cmp	r3, #4
 8003144:	d00d      	beq.n	8003162 <UART_SetConfig+0x3d6>
 8003146:	dc15      	bgt.n	8003174 <UART_SetConfig+0x3e8>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d002      	beq.n	8003152 <UART_SetConfig+0x3c6>
 800314c:	2b02      	cmp	r3, #2
 800314e:	d005      	beq.n	800315c <UART_SetConfig+0x3d0>
 8003150:	e010      	b.n	8003174 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003152:	f7ff fb73 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 8003156:	0003      	movs	r3, r0
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800315a:	e014      	b.n	8003186 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800315c:	4bb4      	ldr	r3, [pc, #720]	; (8003430 <UART_SetConfig+0x6a4>)
 800315e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003160:	e011      	b.n	8003186 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003162:	f7ff fadf 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 8003166:	0003      	movs	r3, r0
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800316a:	e00c      	b.n	8003186 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003172:	e008      	b.n	8003186 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003178:	231a      	movs	r3, #26
 800317a:	2220      	movs	r2, #32
 800317c:	189b      	adds	r3, r3, r2
 800317e:	19db      	adds	r3, r3, r7
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
        break;
 8003184:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003188:	2b00      	cmp	r3, #0
 800318a:	d100      	bne.n	800318e <UART_SetConfig+0x402>
 800318c:	e135      	b.n	80033fa <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003192:	4ba8      	ldr	r3, [pc, #672]	; (8003434 <UART_SetConfig+0x6a8>)
 8003194:	0052      	lsls	r2, r2, #1
 8003196:	5ad3      	ldrh	r3, [r2, r3]
 8003198:	0019      	movs	r1, r3
 800319a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800319c:	f7fc ffb2 	bl	8000104 <__udivsi3>
 80031a0:	0003      	movs	r3, r0
 80031a2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	0013      	movs	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	189b      	adds	r3, r3, r2
 80031ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d305      	bcc.n	80031c0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031bc:	429a      	cmp	r2, r3
 80031be:	d906      	bls.n	80031ce <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80031c0:	231a      	movs	r3, #26
 80031c2:	2220      	movs	r2, #32
 80031c4:	189b      	adds	r3, r3, r2
 80031c6:	19db      	adds	r3, r3, r7
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	e044      	b.n	8003258 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031da:	4b96      	ldr	r3, [pc, #600]	; (8003434 <UART_SetConfig+0x6a8>)
 80031dc:	0052      	lsls	r2, r2, #1
 80031de:	5ad3      	ldrh	r3, [r2, r3]
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	69b8      	ldr	r0, [r7, #24]
 80031ec:	69f9      	ldr	r1, [r7, #28]
 80031ee:	f7fd f8ff 	bl	80003f0 <__aeabi_uldivmod>
 80031f2:	0002      	movs	r2, r0
 80031f4:	000b      	movs	r3, r1
 80031f6:	0e11      	lsrs	r1, r2, #24
 80031f8:	021d      	lsls	r5, r3, #8
 80031fa:	430d      	orrs	r5, r1
 80031fc:	0214      	lsls	r4, r2, #8
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68b8      	ldr	r0, [r7, #8]
 800320c:	68f9      	ldr	r1, [r7, #12]
 800320e:	1900      	adds	r0, r0, r4
 8003210:	4169      	adcs	r1, r5
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	2300      	movs	r3, #0
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f7fd f8e6 	bl	80003f0 <__aeabi_uldivmod>
 8003224:	0002      	movs	r2, r0
 8003226:	000b      	movs	r3, r1
 8003228:	0013      	movs	r3, r2
 800322a:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800322c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800322e:	23c0      	movs	r3, #192	; 0xc0
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	429a      	cmp	r2, r3
 8003234:	d309      	bcc.n	800324a <UART_SetConfig+0x4be>
 8003236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003238:	2380      	movs	r3, #128	; 0x80
 800323a:	035b      	lsls	r3, r3, #13
 800323c:	429a      	cmp	r2, r3
 800323e:	d204      	bcs.n	800324a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003246:	60da      	str	r2, [r3, #12]
 8003248:	e006      	b.n	8003258 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800324a:	231a      	movs	r3, #26
 800324c:	2220      	movs	r2, #32
 800324e:	189b      	adds	r3, r3, r2
 8003250:	19db      	adds	r3, r3, r7
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003256:	e0d0      	b.n	80033fa <UART_SetConfig+0x66e>
 8003258:	e0cf      	b.n	80033fa <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	429a      	cmp	r2, r3
 8003264:	d000      	beq.n	8003268 <UART_SetConfig+0x4dc>
 8003266:	e070      	b.n	800334a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003268:	231b      	movs	r3, #27
 800326a:	2220      	movs	r2, #32
 800326c:	189b      	adds	r3, r3, r2
 800326e:	19db      	adds	r3, r3, r7
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b08      	cmp	r3, #8
 8003274:	d015      	beq.n	80032a2 <UART_SetConfig+0x516>
 8003276:	dc18      	bgt.n	80032aa <UART_SetConfig+0x51e>
 8003278:	2b04      	cmp	r3, #4
 800327a:	d00d      	beq.n	8003298 <UART_SetConfig+0x50c>
 800327c:	dc15      	bgt.n	80032aa <UART_SetConfig+0x51e>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <UART_SetConfig+0x4fc>
 8003282:	2b02      	cmp	r3, #2
 8003284:	d005      	beq.n	8003292 <UART_SetConfig+0x506>
 8003286:	e010      	b.n	80032aa <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003288:	f7ff fad8 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 800328c:	0003      	movs	r3, r0
 800328e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003290:	e014      	b.n	80032bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003292:	4b67      	ldr	r3, [pc, #412]	; (8003430 <UART_SetConfig+0x6a4>)
 8003294:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003296:	e011      	b.n	80032bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003298:	f7ff fa44 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 800329c:	0003      	movs	r3, r0
 800329e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032a0:	e00c      	b.n	80032bc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032a8:	e008      	b.n	80032bc <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80032ae:	231a      	movs	r3, #26
 80032b0:	2220      	movs	r2, #32
 80032b2:	189b      	adds	r3, r3, r2
 80032b4:	19db      	adds	r3, r3, r7
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
        break;
 80032ba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d100      	bne.n	80032c4 <UART_SetConfig+0x538>
 80032c2:	e09a      	b.n	80033fa <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032c8:	4b5a      	ldr	r3, [pc, #360]	; (8003434 <UART_SetConfig+0x6a8>)
 80032ca:	0052      	lsls	r2, r2, #1
 80032cc:	5ad3      	ldrh	r3, [r2, r3]
 80032ce:	0019      	movs	r1, r3
 80032d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032d2:	f7fc ff17 	bl	8000104 <__udivsi3>
 80032d6:	0003      	movs	r3, r0
 80032d8:	005a      	lsls	r2, r3, #1
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	18d2      	adds	r2, r2, r3
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	0019      	movs	r1, r3
 80032e8:	0010      	movs	r0, r2
 80032ea:	f7fc ff0b 	bl	8000104 <__udivsi3>
 80032ee:	0003      	movs	r3, r0
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	2b0f      	cmp	r3, #15
 80032f6:	d921      	bls.n	800333c <UART_SetConfig+0x5b0>
 80032f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	025b      	lsls	r3, r3, #9
 80032fe:	429a      	cmp	r2, r3
 8003300:	d21c      	bcs.n	800333c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	b29a      	uxth	r2, r3
 8003306:	200e      	movs	r0, #14
 8003308:	2420      	movs	r4, #32
 800330a:	1903      	adds	r3, r0, r4
 800330c:	19db      	adds	r3, r3, r7
 800330e:	210f      	movs	r1, #15
 8003310:	438a      	bics	r2, r1
 8003312:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	b29b      	uxth	r3, r3
 800331a:	2207      	movs	r2, #7
 800331c:	4013      	ands	r3, r2
 800331e:	b299      	uxth	r1, r3
 8003320:	1903      	adds	r3, r0, r4
 8003322:	19db      	adds	r3, r3, r7
 8003324:	1902      	adds	r2, r0, r4
 8003326:	19d2      	adds	r2, r2, r7
 8003328:	8812      	ldrh	r2, [r2, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	1902      	adds	r2, r0, r4
 8003334:	19d2      	adds	r2, r2, r7
 8003336:	8812      	ldrh	r2, [r2, #0]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	e05e      	b.n	80033fa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800333c:	231a      	movs	r3, #26
 800333e:	2220      	movs	r2, #32
 8003340:	189b      	adds	r3, r3, r2
 8003342:	19db      	adds	r3, r3, r7
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e057      	b.n	80033fa <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800334a:	231b      	movs	r3, #27
 800334c:	2220      	movs	r2, #32
 800334e:	189b      	adds	r3, r3, r2
 8003350:	19db      	adds	r3, r3, r7
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d015      	beq.n	8003384 <UART_SetConfig+0x5f8>
 8003358:	dc18      	bgt.n	800338c <UART_SetConfig+0x600>
 800335a:	2b04      	cmp	r3, #4
 800335c:	d00d      	beq.n	800337a <UART_SetConfig+0x5ee>
 800335e:	dc15      	bgt.n	800338c <UART_SetConfig+0x600>
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <UART_SetConfig+0x5de>
 8003364:	2b02      	cmp	r3, #2
 8003366:	d005      	beq.n	8003374 <UART_SetConfig+0x5e8>
 8003368:	e010      	b.n	800338c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800336a:	f7ff fa67 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 800336e:	0003      	movs	r3, r0
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003372:	e014      	b.n	800339e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003374:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <UART_SetConfig+0x6a4>)
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003378:	e011      	b.n	800339e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7ff f9d3 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 800337e:	0003      	movs	r3, r0
 8003380:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003382:	e00c      	b.n	800339e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003384:	2380      	movs	r3, #128	; 0x80
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800338a:	e008      	b.n	800339e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003390:	231a      	movs	r3, #26
 8003392:	2220      	movs	r2, #32
 8003394:	189b      	adds	r3, r3, r2
 8003396:	19db      	adds	r3, r3, r7
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
        break;
 800339c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800339e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d02a      	beq.n	80033fa <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a8:	4b22      	ldr	r3, [pc, #136]	; (8003434 <UART_SetConfig+0x6a8>)
 80033aa:	0052      	lsls	r2, r2, #1
 80033ac:	5ad3      	ldrh	r3, [r2, r3]
 80033ae:	0019      	movs	r1, r3
 80033b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80033b2:	f7fc fea7 	bl	8000104 <__udivsi3>
 80033b6:	0003      	movs	r3, r0
 80033b8:	001a      	movs	r2, r3
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	085b      	lsrs	r3, r3, #1
 80033c0:	18d2      	adds	r2, r2, r3
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	0019      	movs	r1, r3
 80033c8:	0010      	movs	r0, r2
 80033ca:	f7fc fe9b 	bl	8000104 <__udivsi3>
 80033ce:	0003      	movs	r3, r0
 80033d0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	2b0f      	cmp	r3, #15
 80033d6:	d90a      	bls.n	80033ee <UART_SetConfig+0x662>
 80033d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	025b      	lsls	r3, r3, #9
 80033de:	429a      	cmp	r2, r3
 80033e0:	d205      	bcs.n	80033ee <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60da      	str	r2, [r3, #12]
 80033ec:	e005      	b.n	80033fa <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80033ee:	231a      	movs	r3, #26
 80033f0:	2220      	movs	r2, #32
 80033f2:	189b      	adds	r3, r3, r2
 80033f4:	19db      	adds	r3, r3, r7
 80033f6:	2201      	movs	r2, #1
 80033f8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	226a      	movs	r2, #106	; 0x6a
 80033fe:	2101      	movs	r1, #1
 8003400:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	2268      	movs	r2, #104	; 0x68
 8003406:	2101      	movs	r1, #1
 8003408:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	2200      	movs	r2, #0
 800340e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	2200      	movs	r2, #0
 8003414:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003416:	231a      	movs	r3, #26
 8003418:	2220      	movs	r2, #32
 800341a:	189b      	adds	r3, r3, r2
 800341c:	19db      	adds	r3, r3, r7
 800341e:	781b      	ldrb	r3, [r3, #0]
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b010      	add	sp, #64	; 0x40
 8003426:	bdb0      	pop	{r4, r5, r7, pc}
 8003428:	40008000 	.word	0x40008000
 800342c:	40008400 	.word	0x40008400
 8003430:	00f42400 	.word	0x00f42400
 8003434:	08003b00 	.word	0x08003b00

08003438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	2201      	movs	r2, #1
 8003446:	4013      	ands	r3, r2
 8003448:	d00b      	beq.n	8003462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a4a      	ldr	r2, [pc, #296]	; (800357c <UART_AdvFeatureConfig+0x144>)
 8003452:	4013      	ands	r3, r2
 8003454:	0019      	movs	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	2202      	movs	r2, #2
 8003468:	4013      	ands	r3, r2
 800346a:	d00b      	beq.n	8003484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4a43      	ldr	r2, [pc, #268]	; (8003580 <UART_AdvFeatureConfig+0x148>)
 8003474:	4013      	ands	r3, r2
 8003476:	0019      	movs	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	2204      	movs	r2, #4
 800348a:	4013      	ands	r3, r2
 800348c:	d00b      	beq.n	80034a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	4a3b      	ldr	r2, [pc, #236]	; (8003584 <UART_AdvFeatureConfig+0x14c>)
 8003496:	4013      	ands	r3, r2
 8003498:	0019      	movs	r1, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	2208      	movs	r2, #8
 80034ac:	4013      	ands	r3, r2
 80034ae:	d00b      	beq.n	80034c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4a34      	ldr	r2, [pc, #208]	; (8003588 <UART_AdvFeatureConfig+0x150>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	0019      	movs	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	2210      	movs	r2, #16
 80034ce:	4013      	ands	r3, r2
 80034d0:	d00b      	beq.n	80034ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	4a2c      	ldr	r2, [pc, #176]	; (800358c <UART_AdvFeatureConfig+0x154>)
 80034da:	4013      	ands	r3, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	2220      	movs	r2, #32
 80034f0:	4013      	ands	r3, r2
 80034f2:	d00b      	beq.n	800350c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	4a25      	ldr	r2, [pc, #148]	; (8003590 <UART_AdvFeatureConfig+0x158>)
 80034fc:	4013      	ands	r3, r2
 80034fe:	0019      	movs	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	2240      	movs	r2, #64	; 0x40
 8003512:	4013      	ands	r3, r2
 8003514:	d01d      	beq.n	8003552 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <UART_AdvFeatureConfig+0x15c>)
 800351e:	4013      	ands	r3, r2
 8003520:	0019      	movs	r1, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	035b      	lsls	r3, r3, #13
 8003536:	429a      	cmp	r2, r3
 8003538:	d10b      	bne.n	8003552 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4a15      	ldr	r2, [pc, #84]	; (8003598 <UART_AdvFeatureConfig+0x160>)
 8003542:	4013      	ands	r3, r2
 8003544:	0019      	movs	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	4013      	ands	r3, r2
 800355a:	d00b      	beq.n	8003574 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	4a0e      	ldr	r2, [pc, #56]	; (800359c <UART_AdvFeatureConfig+0x164>)
 8003564:	4013      	ands	r3, r2
 8003566:	0019      	movs	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]
  }
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	b002      	add	sp, #8
 800357a:	bd80      	pop	{r7, pc}
 800357c:	fffdffff 	.word	0xfffdffff
 8003580:	fffeffff 	.word	0xfffeffff
 8003584:	fffbffff 	.word	0xfffbffff
 8003588:	ffff7fff 	.word	0xffff7fff
 800358c:	ffffefff 	.word	0xffffefff
 8003590:	ffffdfff 	.word	0xffffdfff
 8003594:	ffefffff 	.word	0xffefffff
 8003598:	ff9fffff 	.word	0xff9fffff
 800359c:	fff7ffff 	.word	0xfff7ffff

080035a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2290      	movs	r2, #144	; 0x90
 80035ac:	2100      	movs	r1, #0
 80035ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035b0:	f7fd fd36 	bl	8001020 <HAL_GetTick>
 80035b4:	0003      	movs	r3, r0
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2208      	movs	r2, #8
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d10c      	bne.n	80035e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2280      	movs	r2, #128	; 0x80
 80035ca:	0391      	lsls	r1, r2, #14
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <UART_CheckIdleState+0x98>)
 80035d0:	9200      	str	r2, [sp, #0]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f000 f832 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 80035d8:	1e03      	subs	r3, r0, #0
 80035da:	d001      	beq.n	80035e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e026      	b.n	800362e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2204      	movs	r2, #4
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d10c      	bne.n	8003608 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2280      	movs	r2, #128	; 0x80
 80035f2:	03d1      	lsls	r1, r2, #15
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4a10      	ldr	r2, [pc, #64]	; (8003638 <UART_CheckIdleState+0x98>)
 80035f8:	9200      	str	r2, [sp, #0]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f000 f81e 	bl	800363c <UART_WaitOnFlagUntilTimeout>
 8003600:	1e03      	subs	r3, r0, #0
 8003602:	d001      	beq.n	8003608 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e012      	b.n	800362e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2288      	movs	r2, #136	; 0x88
 800360c:	2120      	movs	r1, #32
 800360e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	228c      	movs	r2, #140	; 0x8c
 8003614:	2120      	movs	r1, #32
 8003616:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2284      	movs	r2, #132	; 0x84
 8003628:	2100      	movs	r1, #0
 800362a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	0018      	movs	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	b004      	add	sp, #16
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	01ffffff 	.word	0x01ffffff

0800363c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b094      	sub	sp, #80	; 0x50
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	1dfb      	adds	r3, r7, #7
 800364a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364c:	e0a7      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003650:	3301      	adds	r3, #1
 8003652:	d100      	bne.n	8003656 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003654:	e0a3      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7fd fce3 	bl	8001020 <HAL_GetTick>
 800365a:	0002      	movs	r2, r0
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <UART_WaitOnFlagUntilTimeout+0x30>
 8003666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003668:	2b00      	cmp	r3, #0
 800366a:	d13f      	bne.n	80036ec <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366c:	f3ef 8310 	mrs	r3, PRIMASK
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003674:	647b      	str	r3, [r7, #68]	; 0x44
 8003676:	2301      	movs	r3, #1
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	f383 8810 	msr	PRIMASK, r3
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	494e      	ldr	r1, [pc, #312]	; (80037c8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800368e:	400a      	ands	r2, r1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003694:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	f383 8810 	msr	PRIMASK, r3
}
 800369c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800369e:	f3ef 8310 	mrs	r3, PRIMASK
 80036a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80036a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a6:	643b      	str	r3, [r7, #64]	; 0x40
 80036a8:	2301      	movs	r3, #1
 80036aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ae:	f383 8810 	msr	PRIMASK, r3
}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2101      	movs	r1, #1
 80036c0:	438a      	bics	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ca:	f383 8810 	msr	PRIMASK, r3
}
 80036ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2288      	movs	r2, #136	; 0x88
 80036d4:	2120      	movs	r1, #32
 80036d6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	228c      	movs	r2, #140	; 0x8c
 80036dc:	2120      	movs	r1, #32
 80036de:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2284      	movs	r2, #132	; 0x84
 80036e4:	2100      	movs	r1, #0
 80036e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e069      	b.n	80037c0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2204      	movs	r2, #4
 80036f4:	4013      	ands	r3, r2
 80036f6:	d052      	beq.n	800379e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69da      	ldr	r2, [r3, #28]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	401a      	ands	r2, r3
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	429a      	cmp	r2, r3
 800370a:	d148      	bne.n	800379e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	0112      	lsls	r2, r2, #4
 8003714:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003716:	f3ef 8310 	mrs	r3, PRIMASK
 800371a:	613b      	str	r3, [r7, #16]
  return(result);
 800371c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003720:	2301      	movs	r3, #1
 8003722:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f383 8810 	msr	PRIMASK, r3
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4924      	ldr	r1, [pc, #144]	; (80037c8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003738:	400a      	ands	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800373e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f383 8810 	msr	PRIMASK, r3
}
 8003746:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003748:	f3ef 8310 	mrs	r3, PRIMASK
 800374c:	61fb      	str	r3, [r7, #28]
  return(result);
 800374e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003750:	64bb      	str	r3, [r7, #72]	; 0x48
 8003752:	2301      	movs	r3, #1
 8003754:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	f383 8810 	msr	PRIMASK, r3
}
 800375c:	46c0      	nop			; (mov r8, r8)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2101      	movs	r1, #1
 800376a:	438a      	bics	r2, r1
 800376c:	609a      	str	r2, [r3, #8]
 800376e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	f383 8810 	msr	PRIMASK, r3
}
 8003778:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2288      	movs	r2, #136	; 0x88
 800377e:	2120      	movs	r1, #32
 8003780:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	228c      	movs	r2, #140	; 0x8c
 8003786:	2120      	movs	r1, #32
 8003788:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2290      	movs	r2, #144	; 0x90
 800378e:	2120      	movs	r1, #32
 8003790:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2284      	movs	r2, #132	; 0x84
 8003796:	2100      	movs	r1, #0
 8003798:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e010      	b.n	80037c0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	4013      	ands	r3, r2
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	425a      	negs	r2, r3
 80037ae:	4153      	adcs	r3, r2
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	001a      	movs	r2, r3
 80037b4:	1dfb      	adds	r3, r7, #7
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d100      	bne.n	80037be <UART_WaitOnFlagUntilTimeout+0x182>
 80037bc:	e747      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	0018      	movs	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b014      	add	sp, #80	; 0x50
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	fffffe5f 	.word	0xfffffe5f

080037cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2284      	movs	r2, #132	; 0x84
 80037d8:	5c9b      	ldrb	r3, [r3, r2]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80037de:	2302      	movs	r3, #2
 80037e0:	e027      	b.n	8003832 <HAL_UARTEx_DisableFifoMode+0x66>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2284      	movs	r2, #132	; 0x84
 80037e6:	2101      	movs	r1, #1
 80037e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2288      	movs	r2, #136	; 0x88
 80037ee:	2124      	movs	r1, #36	; 0x24
 80037f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2101      	movs	r1, #1
 8003806:	438a      	bics	r2, r1
 8003808:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a0b      	ldr	r2, [pc, #44]	; (800383c <HAL_UARTEx_DisableFifoMode+0x70>)
 800380e:	4013      	ands	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2288      	movs	r2, #136	; 0x88
 8003824:	2120      	movs	r1, #32
 8003826:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2284      	movs	r2, #132	; 0x84
 800382c:	2100      	movs	r1, #0
 800382e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	0018      	movs	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	b004      	add	sp, #16
 8003838:	bd80      	pop	{r7, pc}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	dfffffff 	.word	0xdfffffff

08003840 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2284      	movs	r2, #132	; 0x84
 800384e:	5c9b      	ldrb	r3, [r3, r2]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003854:	2302      	movs	r3, #2
 8003856:	e02e      	b.n	80038b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2284      	movs	r2, #132	; 0x84
 800385c:	2101      	movs	r1, #1
 800385e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2288      	movs	r2, #136	; 0x88
 8003864:	2124      	movs	r1, #36	; 0x24
 8003866:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2101      	movs	r1, #1
 800387c:	438a      	bics	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	08d9      	lsrs	r1, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	0018      	movs	r0, r3
 8003898:	f000 f854 	bl	8003944 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2288      	movs	r2, #136	; 0x88
 80038a8:	2120      	movs	r1, #32
 80038aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2284      	movs	r2, #132	; 0x84
 80038b0:	2100      	movs	r1, #0
 80038b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b004      	add	sp, #16
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2284      	movs	r2, #132	; 0x84
 80038ce:	5c9b      	ldrb	r3, [r3, r2]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e02f      	b.n	8003938 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2284      	movs	r2, #132	; 0x84
 80038dc:	2101      	movs	r1, #1
 80038de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2288      	movs	r2, #136	; 0x88
 80038e4:	2124      	movs	r1, #36	; 0x24
 80038e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2101      	movs	r1, #1
 80038fc:	438a      	bics	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	4a0e      	ldr	r2, [pc, #56]	; (8003940 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003908:	4013      	ands	r3, r2
 800390a:	0019      	movs	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	0018      	movs	r0, r3
 800391a:	f000 f813 	bl	8003944 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2288      	movs	r2, #136	; 0x88
 800392a:	2120      	movs	r1, #32
 800392c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2284      	movs	r2, #132	; 0x84
 8003932:	2100      	movs	r1, #0
 8003934:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b004      	add	sp, #16
 800393e:	bd80      	pop	{r7, pc}
 8003940:	f1ffffff 	.word	0xf1ffffff

08003944 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003950:	2b00      	cmp	r3, #0
 8003952:	d108      	bne.n	8003966 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	226a      	movs	r2, #106	; 0x6a
 8003958:	2101      	movs	r1, #1
 800395a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2268      	movs	r2, #104	; 0x68
 8003960:	2101      	movs	r1, #1
 8003962:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003964:	e043      	b.n	80039ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003966:	260f      	movs	r6, #15
 8003968:	19bb      	adds	r3, r7, r6
 800396a:	2208      	movs	r2, #8
 800396c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800396e:	200e      	movs	r0, #14
 8003970:	183b      	adds	r3, r7, r0
 8003972:	2208      	movs	r2, #8
 8003974:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	0e5b      	lsrs	r3, r3, #25
 800397e:	b2da      	uxtb	r2, r3
 8003980:	240d      	movs	r4, #13
 8003982:	193b      	adds	r3, r7, r4
 8003984:	2107      	movs	r1, #7
 8003986:	400a      	ands	r2, r1
 8003988:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	0f5b      	lsrs	r3, r3, #29
 8003992:	b2da      	uxtb	r2, r3
 8003994:	250c      	movs	r5, #12
 8003996:	197b      	adds	r3, r7, r5
 8003998:	2107      	movs	r1, #7
 800399a:	400a      	ands	r2, r1
 800399c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800399e:	183b      	adds	r3, r7, r0
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	197a      	adds	r2, r7, r5
 80039a4:	7812      	ldrb	r2, [r2, #0]
 80039a6:	4914      	ldr	r1, [pc, #80]	; (80039f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80039a8:	5c8a      	ldrb	r2, [r1, r2]
 80039aa:	435a      	muls	r2, r3
 80039ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80039ae:	197b      	adds	r3, r7, r5
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	4a12      	ldr	r2, [pc, #72]	; (80039fc <UARTEx_SetNbDataToProcess+0xb8>)
 80039b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039b6:	0019      	movs	r1, r3
 80039b8:	f7fc fc2e 	bl	8000218 <__divsi3>
 80039bc:	0003      	movs	r3, r0
 80039be:	b299      	uxth	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	226a      	movs	r2, #106	; 0x6a
 80039c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039c6:	19bb      	adds	r3, r7, r6
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	193a      	adds	r2, r7, r4
 80039cc:	7812      	ldrb	r2, [r2, #0]
 80039ce:	490a      	ldr	r1, [pc, #40]	; (80039f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80039d0:	5c8a      	ldrb	r2, [r1, r2]
 80039d2:	435a      	muls	r2, r3
 80039d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80039d6:	193b      	adds	r3, r7, r4
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	4a08      	ldr	r2, [pc, #32]	; (80039fc <UARTEx_SetNbDataToProcess+0xb8>)
 80039dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039de:	0019      	movs	r1, r3
 80039e0:	f7fc fc1a 	bl	8000218 <__divsi3>
 80039e4:	0003      	movs	r3, r0
 80039e6:	b299      	uxth	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2268      	movs	r2, #104	; 0x68
 80039ec:	5299      	strh	r1, [r3, r2]
}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b005      	add	sp, #20
 80039f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	08003b18 	.word	0x08003b18
 80039fc:	08003b20 	.word	0x08003b20

08003a00 <memset>:
 8003a00:	0003      	movs	r3, r0
 8003a02:	1882      	adds	r2, r0, r2
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d100      	bne.n	8003a0a <memset+0xa>
 8003a08:	4770      	bx	lr
 8003a0a:	7019      	strb	r1, [r3, #0]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	e7f9      	b.n	8003a04 <memset+0x4>

08003a10 <__libc_init_array>:
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	2600      	movs	r6, #0
 8003a14:	4c0c      	ldr	r4, [pc, #48]	; (8003a48 <__libc_init_array+0x38>)
 8003a16:	4d0d      	ldr	r5, [pc, #52]	; (8003a4c <__libc_init_array+0x3c>)
 8003a18:	1b64      	subs	r4, r4, r5
 8003a1a:	10a4      	asrs	r4, r4, #2
 8003a1c:	42a6      	cmp	r6, r4
 8003a1e:	d109      	bne.n	8003a34 <__libc_init_array+0x24>
 8003a20:	2600      	movs	r6, #0
 8003a22:	f000 f819 	bl	8003a58 <_init>
 8003a26:	4c0a      	ldr	r4, [pc, #40]	; (8003a50 <__libc_init_array+0x40>)
 8003a28:	4d0a      	ldr	r5, [pc, #40]	; (8003a54 <__libc_init_array+0x44>)
 8003a2a:	1b64      	subs	r4, r4, r5
 8003a2c:	10a4      	asrs	r4, r4, #2
 8003a2e:	42a6      	cmp	r6, r4
 8003a30:	d105      	bne.n	8003a3e <__libc_init_array+0x2e>
 8003a32:	bd70      	pop	{r4, r5, r6, pc}
 8003a34:	00b3      	lsls	r3, r6, #2
 8003a36:	58eb      	ldr	r3, [r5, r3]
 8003a38:	4798      	blx	r3
 8003a3a:	3601      	adds	r6, #1
 8003a3c:	e7ee      	b.n	8003a1c <__libc_init_array+0xc>
 8003a3e:	00b3      	lsls	r3, r6, #2
 8003a40:	58eb      	ldr	r3, [r5, r3]
 8003a42:	4798      	blx	r3
 8003a44:	3601      	adds	r6, #1
 8003a46:	e7f2      	b.n	8003a2e <__libc_init_array+0x1e>
 8003a48:	08003b30 	.word	0x08003b30
 8003a4c:	08003b30 	.word	0x08003b30
 8003a50:	08003b34 	.word	0x08003b34
 8003a54:	08003b30 	.word	0x08003b30

08003a58 <_init>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5e:	bc08      	pop	{r3}
 8003a60:	469e      	mov	lr, r3
 8003a62:	4770      	bx	lr

08003a64 <_fini>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr
